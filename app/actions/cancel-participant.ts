'use server'

import { revalidatePath, revalidateTag } from 'next/cache'
import { prisma } from '@/lib/prisma'
import { BookingStatus } from '@/lib/generated/prisma'
import { broadcastGroupTripUpdate } from '@/app/api/group-trips/ws/route'

/**
 * üö´ –û—Ç–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–µ–∑–¥–∫–∏
 * –†–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Prisma
 */
export async function cancelParticipant(bookingId: string, reason?: string) {
  if (!bookingId) {
    return {
      success: false,
      error: 'ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
    }
  }

  try {
    console.log(`üö´ Starting participant cancellation for booking: ${bookingId}`)

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Prisma —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
    const result = await prisma.$transaction(async (tx) => {
      // 1. –ù–∞–π—Ç–∏ –∏ –æ–±–Ω–æ–≤–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      const booking = await tx.groupBooking.findUnique({
        where: { id: bookingId },
        include: { 
          trip: true,
          user: true 
        }
      })

      if (!booking) {
        throw new Error(`–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å ID ${bookingId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`)
      }

      if (booking.status === BookingStatus.CANCELLED) {
        throw new Error('–£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω')
      }

      // 2. –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      const cancelledBooking = await tx.groupBooking.update({
        where: { id: bookingId },
        data: {
          status: BookingStatus.CANCELLED,
          specialRequests: reason ? `–û—Ç–º–µ–Ω–µ–Ω–æ: ${reason}` : '–û—Ç–º–µ–Ω–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º',
          updatedAt: new Date()
        },
        include: {
          trip: true,
          user: true
        }
      })

      // 3. –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞
      const activeBookings = await tx.groupBooking.findMany({
        where: {
          tripId: booking.tripId,
          status: {
            in: [BookingStatus.PENDING, BookingStatus.CONFIRMED]
          }
        }
      })

      // 4. –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      const currentParticipants = activeBookings.reduce(
        (total, booking) => total + booking.participants,
        0
      )

      // 5. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–µ–∑–¥–∫–∏
      const spotsRemaining = booking.trip.maxParticipants - currentParticipants
      let newTripStatus = booking.trip.status
      
      // –ï—Å–ª–∏ —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞ - –ø–æ–µ–∑–¥–∫–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è
      if (currentParticipants < booking.trip.minRequired && booking.trip.status === 'CONFIRMED') {
        newTripStatus = 'FORMING'
      }

      // 6. –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–µ–∑–¥–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      let updatedTrip = booking.trip
      if (newTripStatus !== booking.trip.status) {
        updatedTrip = await tx.groupTrip.update({
          where: { id: booking.tripId },
          data: { 
            status: newTripStatus as any,
            updatedAt: new Date()
          }
        })
      }

      return {
        cancelledBooking,
        trip: updatedTrip,
        currentParticipants,
        spotsRemaining,
        activeBookingsCount: activeBookings.length
      }
    })

    console.log(`‚úÖ Participant cancelled successfully:`, {
      bookingId: result.cancelledBooking.id,
      participantName: result.cancelledBooking.contactName,
      tripId: result.trip.id,
      currentParticipants: result.currentParticipants,
      spotsRemaining: result.spotsRemaining
    })

    // 7. –û—Ç–ø—Ä–∞–≤–∏—Ç—å WebSocket —Å–æ–±—ã—Ç–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    const wsUpdate = await broadcastGroupTripUpdate({
      tripId: result.trip.id,
      type: 'participant_cancelled',
      currentParticipants: result.currentParticipants,
      status: result.currentParticipants >= result.trip.minRequired ? 'confirmed' : 'forming',
      timestamp: new Date(),
      spotsRemaining: result.spotsRemaining,
      maxParticipants: result.trip.maxParticipants,
      cancellationData: {
        participantName: result.cancelledBooking.contactName,
        reason: reason || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
        refundStatus: 'pending',
        spotsFreed: result.cancelledBooking.participants
      }
    })

    console.log(`üì° WebSocket event sent to ${wsUpdate} clients`)

    // 8. –û–±–Ω–æ–≤–∏—Ç—å –∫–µ—à Next.js
    revalidatePath('/group-events')
    revalidatePath(`/trip/${result.trip.id}`)
    revalidateTag('group-trips')
    revalidateTag('bookings')

    console.log('üîÑ Cache revalidated')

    return {
      success: true,
      data: {
        cancelledBooking: {
          id: result.cancelledBooking.id,
          contactName: result.cancelledBooking.contactName,
          participants: result.cancelledBooking.participants
        },
        trip: {
          id: result.trip.id,
          currentParticipants: result.currentParticipants,
          spotsRemaining: result.spotsRemaining,
          status: result.currentParticipants >= result.trip.minRequired ? 'confirmed' : 'forming'
        },
        websocketClients: wsUpdate
      }
    }

  } catch (error) {
    console.error('‚ùå Error cancelling participant:', error)
    
    return {
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞'
    }
  }
}

/**
 * üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–º–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–µ–∑–¥–∫–∏
 */
export async function getTripCancellationStats(tripId: string) {
  if (!tripId) {
    return {
      success: false,
      error: 'ID –ø–æ–µ–∑–¥–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
    }
  }

  try {
    const stats = await prisma.$transaction(async (tx) => {
      // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–µ–∑–¥–∫–∏
      const allBookings = await tx.groupBooking.findMany({
        where: { tripId },
        include: { user: true }
      })

      // –†–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
      const activeBookings = allBookings.filter(b => 
        b.status === BookingStatus.PENDING || b.status === BookingStatus.CONFIRMED
      )
      const cancelledBookings = allBookings.filter(b => 
        b.status === BookingStatus.CANCELLED
      )

      // –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      const currentParticipants = activeBookings.reduce((sum, b) => sum + b.participants, 0)
      const cancelledParticipants = cancelledBookings.reduce((sum, b) => sum + b.participants, 0)

      // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–µ–∑–¥–∫–µ
      const trip = await tx.groupTrip.findUnique({ where: { id: tripId } })

      return {
        tripId,
        trip,
        totalBookings: allBookings.length,
        activeBookings: activeBookings.length,
        cancelledBookings: cancelledBookings.length,
        currentParticipants,
        cancelledParticipants,
        spotsRemaining: trip ? trip.maxParticipants - currentParticipants : 0,
        cancellationRate: allBookings.length > 0 ? 
          Math.round((cancelledBookings.length / allBookings.length) * 100) : 0,
        recentCancellations: cancelledBookings
          .sort((a, b) => b.updatedAt.getTime() - a.updatedAt.getTime())
          .slice(0, 5)
          .map(b => ({
            id: b.id,
            contactName: b.contactName,
            participants: b.participants,
            cancelledAt: b.updatedAt,
            reason: b.specialRequests
          }))
      }
    })

    return {
      success: true,
      data: stats
    }

  } catch (error) {
    console.error('‚ùå Error getting cancellation stats:', error)
    
    return {
      success: false,
      error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–º–µ–Ω'
    }
  }
}

/**
 * üìù –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω—ã
 */
export async function createTestBooking(tripId: string, participantName: string = 'Test Participant') {
  try {
    const testBooking = await prisma.groupBooking.create({
      data: {
        tripId,
        participants: 1,
        totalPrice: 95.00,
        contactName: participantName,
        contactPhone: '+351912345678',
        contactEmail: 'test@example.com',
        status: BookingStatus.CONFIRMED,
        specialRequests: '–¢–µ—Å—Ç–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω—ã'
      },
      include: {
        trip: true
      }
    })

    // –û–±–Ω–æ–≤–∏—Ç—å –∫–µ—à
    revalidatePath('/group-events')
    revalidateTag('group-trips')

    console.log(`‚úÖ Test booking created: ${testBooking.id} for trip ${tripId}`)

    return {
      success: true,
      data: testBooking
    }

  } catch (error) {
    console.error('‚ùå Error creating test booking:', error)
    
    return {
      success: false,
      error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'
    }
  }
}
