'use client';

import React, { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import { useRouter } from 'next/navigation';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { 
  Search, 
  Trophy, 
  User, 
  Users,
  Medal,
  MapPin,
  Filter,
  RefreshCw,
  Plus,
  Star,
  Award
} from 'lucide-react';

// üéØ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
import ReputationCard from '@/components/reputation/ReputationCard';
import RateUserDialog from '@/components/reputation/RateUserDialog';

// Temporary interfaces for profile system
interface LeaderboardPlayer {
  userId: string;
  position: number;
  name: string;
  avatar?: string;
  rating: number;
  level: number;
  completedTrips: number;
  totalFishCaught: number;
  achievementsCount: number;
}

interface ProfileData {
  userId: string;
  user?: {
    id: string;
    name?: string;
    image?: string;
  };
  rating: number | string;
  level: number;
  completedTrips: number;
  experienceLevel?: string;
  country?: string;
  city?: string;
  bio?: string;
}

interface AchievementData {
  id: string;
  name: string;
  description: string;
  icon: string;
  unlocked: boolean;
  progress: number;
  maxProgress: number;
  progressPercent?: number;
}
// Temporarily comment out problematic components
// import { FisherProfileCard } from '@/components/profile/FisherProfileCard';
import { AchievementsGrid } from '@/components/profile/AchievementsGrid';
import { LeaderboardTable } from '@/components/profile/LeaderboardTable';
import { 
  FisherProfileExtended,
  AchievementWithProgress,
  LeaderboardPlayer,
  FetchUserAchievementsResponse,
  FetchLeaderboardResponse
} from '@/lib/types/achievements';

export default function ProfilesPage() {
  const { data: session } = useSession();
  const router = useRouter();
  const [activeTab, setActiveTab] = useState('leaderboard');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
  const [leaderboard, setLeaderboard] = useState<LeaderboardPlayer[]>([]);
  const [leaderboardLoading, setLeaderboardLoading] = useState(true);
  const [orderBy] = useState<'rating' | 'level' | 'completedTrips' | 'totalFishCaught' | 'achievementsCount'>('rating');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π
  const [profiles, setProfiles] = useState<ProfileData[]>([]);
  const [profilesLoading, setProfilesLoading] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [countryFilter, setCountryFilter] = useState<string>('ALL');
  const [experienceFilter, setExperienceFilter] = useState<string>('ALL');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [userAchievements, setUserAchievements] = useState<AchievementData[]>([]);
  const [achievementsLoading, setAchievementsLoading] = useState(false);
  const [userProfile, setUserProfile] = useState<ProfileData | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
  useEffect(() => {
    const loadData = async () => {
      setLeaderboardLoading(true);
      try {
        const response = await fetch(`/api/leaderboard?orderBy=${orderBy}&limit=50`);
        if (response.ok) {
          const data = await response.json();
          setLeaderboard(data.players || []);
        } else {
          console.error('Failed to load leaderboard');
          setLeaderboard([]);
        }
      } catch (error) {
        console.error('Error loading leaderboard:', error);
        setLeaderboard([]);
      } finally {
        setLeaderboardLoading(false);
      }
    };
    loadData();
  }, [orderBy]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    const loadUserData = async () => {
      if (!session?.user?.id || activeTab !== 'achievements') return;
      
      setAchievementsLoading(true);
      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        const achievementsResponse = await fetch(`/api/achievements?userId=${session.user.id}`);
        if (achievementsResponse.ok) {
          const achievementsData = await achievementsResponse.json();
          setUserAchievements(achievementsData.achievements || []);
        } else {
          console.error('Failed to load user achievements');
          setUserAchievements([]);
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        const profileResponse = await fetch(`/api/profiles?userId=${session.user.id}`);
        if (profileResponse.ok) {
          const profileData = await profileResponse.json();
          setUserProfile(profileData);
        } else if (profileResponse.status === 404) {
          setUserProfile(null);
        } else {
          console.error('Failed to load user profile');
          setUserProfile(null);
        }
      } catch (error) {
        console.error('Error loading user data:', error);
        setUserAchievements([]);
        setUserProfile(null);
      } finally {
        setAchievementsLoading(false);
      }
    };
    
    loadUserData();
  }, [session?.user?.id, activeTab]);



  const loadProfiles = async () => {
    setProfilesLoading(true);
    try {
      const params = new URLSearchParams({
        limit: '20',
        orderBy: 'rating',
      });
      
      if (countryFilter && countryFilter !== 'ALL') {
        params.append('country', countryFilter);
      }
      
      if (experienceFilter && experienceFilter !== 'ALL') {
        params.append('experienceLevel', experienceFilter);
      }

      const response = await fetch(`/api/profiles?${params.toString()}`);
      if (response.ok) {
        const data = await response.json();
        setProfiles(Array.isArray(data) ? data : []);
      } else {
        console.error('Failed to load profiles');
        setProfiles([]);
      }
    } catch (error) {
      console.error('Error loading profiles:', error);
      setProfiles([]);
    } finally {
      setProfilesLoading(false);
    }
  };



  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
  const filteredProfiles = profiles.filter(profile => {
    // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
    const matchesSearch = !searchQuery || 
      profile.user?.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
      profile.bio?.toLowerCase().includes(searchQuery.toLowerCase()) ||
      profile.city?.toLowerCase().includes(searchQuery.toLowerCase()) ||
      profile.country?.toLowerCase().includes(searchQuery.toLowerCase());
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç—Ä–∞–Ω–µ
    const matchesCountry = countryFilter === 'ALL' || 
      profile.country === countryFilter;
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –æ–ø—ã—Ç—É
    const matchesExperience = experienceFilter === 'ALL' || 
      profile.experienceLevel === experienceFilter;
    
    return matchesSearch && matchesCountry && matchesExperience;
  });

  const handleViewProfile = (userId: string) => {
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    router.push(`/profiles/${userId}`);
  };

  const handleCreateProfile = async () => {
    if (!session?.user?.id) return;
    
    try {
      const response = await fetch('/api/profiles', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: session.user.id,
          bio: '',
          specialties: [],
        }),
      });

      if (response.ok) {
        await loadUserProfile();
        // –¢–∞–∫–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        await fetch('/api/achievements', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            userId: session.user.id,
          }),
        });
      }
    } catch (error) {
      console.error('Error creating profile:', error);
    }
  };

  return (
    <div className="container mx-auto px-4 py-8 max-w-7xl">
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-2">–°–æ–æ–±—â–µ—Å—Ç–≤–æ —Ä—ã–±–æ–ª–æ–≤–æ–≤</h1>
        <p className="text-muted-foreground">
          –†–µ–π—Ç–∏–Ω–≥–∏, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –ø—Ä–æ—Ñ–∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
        </p>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="leaderboard" className="gap-2">
            <Trophy className="w-4 h-4" />
            –†–µ–π—Ç–∏–Ω–≥
          </TabsTrigger>
          <TabsTrigger value="profiles" className="gap-2">
            <Users className="w-4 h-4" />
            –ü—Ä–æ—Ñ–∏–ª–∏
          </TabsTrigger>
          <TabsTrigger value="reputation" className="gap-2">
            <Star className="w-4 h-4" />
            –†–µ–ø—É—Ç–∞—Ü–∏—è
          </TabsTrigger>
          <TabsTrigger value="achievements" className="gap-2">
            <Medal className="w-4 h-4" />
            –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
          </TabsTrigger>
        </TabsList>

        {/* –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ */}
        <TabsContent value="leaderboard" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Trophy className="w-5 h-5 text-yellow-500" />
                –†–µ–π—Ç–∏–Ω–≥ —Ä—ã–±–æ–ª–æ–≤–æ–≤
              </CardTitle>
            </CardHeader>
            <CardContent>
              {leaderboardLoading ? (
                <div className="flex items-center justify-center py-8">
                  <RefreshCw className="w-6 h-6 animate-spin text-muted-foreground" />
                  <span className="ml-2 text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞...</span>
                </div>
              ) : leaderboard.length > 0 ? (
                <div className="space-y-3">
                  {leaderboard.slice(0, 10).map((player) => (
                    <div
                      key={player.userId}
                      className="flex items-center justify-between p-3 rounded-lg border bg-card"
                    >
                      <div className="flex items-center gap-3">
                        <div className="flex items-center justify-center w-8 h-8 rounded-full bg-primary/10 text-primary font-semibold text-sm">
                          {player.position}
                        </div>
                        <div>
                          <div className="font-medium">{player.name}</div>
                          <div className="text-sm text-muted-foreground">
                            –£—Ä–æ–≤–µ–Ω—å {player.level} ‚Ä¢ {player.completedTrips} –ø–æ–µ–∑–¥–æ–∫
                          </div>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="font-semibold">{player.rating.toFixed(1)} ‚òÖ</div>
                        <div className="text-sm text-muted-foreground">
                          {player.totalFishCaught} –∫–≥
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8">
                  <Trophy className="w-16 h-16 mx-auto mb-4 text-muted-foreground opacity-50" />
                  <h3 className="text-lg font-medium mb-2">–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç</h3>
                  <p className="text-muted-foreground">
                    –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º —Ä—ã–±–æ–ª–æ–≤–æ–º –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!
                  </p>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* –ü—Ä–æ—Ñ–∏–ª–∏ —Ä—ã–±–æ–ª–æ–≤–æ–≤ */}
        <TabsContent value="profiles" className="space-y-6">
          {/* –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫ */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Filter className="w-4 h-4" />
                –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex gap-4">
                {/* –ü–æ–∏—Å–∫ */}
                <div className="flex-1">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
                    <Input
                      placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏, –±–∏–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –ª–æ–∫–∞—Ü–∏–∏..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className="pl-10"
                    />
                  </div>
                </div>

                {/* –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç—Ä–∞–Ω–µ */}
                <Select value={countryFilter} onValueChange={setCountryFilter}>
                  <SelectTrigger className="w-48">
                    <SelectValue placeholder="–°—Ç—Ä–∞–Ω–∞" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="ALL">–í—Å–µ —Å—Ç—Ä–∞–Ω—ã</SelectItem>
                    <SelectItem value="Portugal">–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è</SelectItem>
                    <SelectItem value="Spain">–ò—Å–ø–∞–Ω–∏—è</SelectItem>
                    <SelectItem value="France">–§—Ä–∞–Ω—Ü–∏—è</SelectItem>
                    <SelectItem value="Italy">–ò—Ç–∞–ª–∏—è</SelectItem>
                  </SelectContent>
                </Select>

                {/* –§–∏–ª—å—Ç—Ä –ø–æ –æ–ø—ã—Ç—É */}
                <Select value={experienceFilter} onValueChange={setExperienceFilter}>
                  <SelectTrigger className="w-48">
                    <SelectValue placeholder="–£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="ALL">–õ—é–±–æ–π —É—Ä–æ–≤–µ–Ω—å</SelectItem>
                    <SelectItem value="BEGINNER">–ù–æ–≤–∏—á–æ–∫</SelectItem>
                    <SelectItem value="INTERMEDIATE">–û–ø—ã—Ç–Ω—ã–π</SelectItem>
                    <SelectItem value="EXPERT">–≠–∫—Å–ø–µ—Ä—Ç</SelectItem>
                  </SelectContent>
                </Select>

                {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ */}
                <Button onClick={loadProfiles} disabled={profilesLoading}>
                  {profilesLoading ? (
                    <RefreshCw className="w-4 h-4 animate-spin" />
                  ) : (
                    <Search className="w-4 h-4" />
                  )}
                </Button>
              </div>

              {/* –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
              {(countryFilter !== 'ALL' || experienceFilter !== 'ALL' || searchQuery) && (
                <div className="flex items-center gap-2">
                  <span className="text-sm text-muted-foreground">–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:</span>
                  {searchQuery && (
                    <Badge variant="secondary" className="gap-1">
                      –ü–æ–∏—Å–∫: {searchQuery}
                    </Badge>
                  )}
                  {countryFilter !== 'ALL' && (
                    <Badge variant="secondary" className="gap-1">
                      <MapPin className="w-3 h-3" />
                      {countryFilter}
                    </Badge>
                  )}
                  {experienceFilter !== 'ALL' && (
                    <Badge variant="secondary">
                      {experienceFilter}
                    </Badge>
                  )}
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => {
                      setSearchQuery('');
                      setCountryFilter('ALL');
                      setExperienceFilter('ALL');
                    }}
                  >
                    –û—á–∏—Å—Ç–∏—Ç—å
                  </Button>
                </div>
              )}
            </CardContent>
          </Card>

          {/* –°–µ—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π */}
          <Card>
            <CardHeader>
              <CardTitle>–ü—Ä–æ—Ñ–∏–ª–∏ —Ä—ã–±–æ–ª–æ–≤–æ–≤</CardTitle>
            </CardHeader>
            <CardContent>
              {profilesLoading ? (
                <div className="flex items-center justify-center py-8">
                  <RefreshCw className="w-6 h-6 animate-spin text-muted-foreground" />
                  <span className="ml-2 text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π...</span>
                </div>
              ) : filteredProfiles.length > 0 ? (
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                  {filteredProfiles.map((profile) => (
                    <Card 
                      key={profile.userId}
                      className="cursor-pointer transition-all hover:shadow-md hover:border-primary/50"
                      onClick={() => handleViewProfile(profile.userId)}
                    >
                      <CardHeader className="pb-3">
                        <div className="flex items-center gap-3">
                          <div className="w-12 h-12 rounded-full bg-gradient-to-br from-blue-400 to-blue-600 flex items-center justify-center text-white font-semibold">
                            {profile.user?.name?.charAt(0) || 'U'}
                          </div>
                          <div className="flex-1">
                            <CardTitle className="text-base">{profile.user?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</CardTitle>
                            <p className="text-sm text-muted-foreground">
                              {profile.city && profile.country ? `${profile.city}, ${profile.country}` : 
                               profile.country ? profile.country : 
                               '–õ–æ–∫–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
                            </p>
                          </div>
                        </div>
                      </CardHeader>
                      <CardContent className="pt-0">
                        <div className="space-y-2">
                          <div className="flex justify-between text-sm">
                            <span className="text-muted-foreground">–†–µ–π—Ç–∏–Ω–≥:</span>
                            <span className="font-medium">{Number(profile.rating).toFixed(1)} ‚òÖ</span>
                          </div>
                          <div className="flex justify-between text-sm">
                            <span className="text-muted-foreground">–£—Ä–æ–≤–µ–Ω—å:</span>
                            <span className="font-medium">{profile.level}</span>
                          </div>
                          <div className="flex justify-between text-sm">
                            <span className="text-muted-foreground">–ü–æ–µ–∑–¥–æ–∫:</span>
                            <span className="font-medium">{profile.completedTrips}</span>
                          </div>
                          {profile.bio && (
                            <p className="text-sm text-muted-foreground line-clamp-2 mt-2">
                              {profile.bio}
                            </p>
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8">
                  <Users className="w-16 h-16 mx-auto mb-4 text-muted-foreground opacity-50" />
                  <h3 className="text-lg font-medium mb-2">–ü—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                  <p className="text-muted-foreground">
                    {profiles.length === 0 
                      ? '–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ —Å–æ–∑–¥–∞–ª –ø—Ä–æ—Ñ–∏–ª—å —Ä—ã–±–æ–ª–æ–≤–∞'
                      : '–ü–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–∏—Å–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}
                  </p>
                </div>
              )}
            </CardContent>
          </Card>


        </TabsContent>

        {/* üéØ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ */}
        <TabsContent value="reputation" className="space-y-6">
          {!session ? (
            <Card>
              <CardContent className="text-center py-12">
                <Star className="w-16 h-16 mx-auto mb-4 text-muted-foreground opacity-50" />
                <h3 className="text-lg font-medium mb-2">–°–∏—Å—Ç–µ–º–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ —Ä—ã–±–æ–ª–æ–≤–∞</h3>
                <p className="text-muted-foreground mb-4">
                  –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–∏—Å—Ç–µ–º—É —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –∏ –æ—Ü–µ–Ω–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                </p>
                <Button>–í–æ–π—Ç–∏</Button>
              </CardContent>
            </Card>
          ) : (
            <div className="space-y-6">
              {/* –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Award className="w-5 h-5" />
                    –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="flex gap-2">
                    <div className="relative flex-1">
                      <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground" />
                      <Input
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏..."
                        className="pl-10"
                      />
                    </div>
                    <Button>–ù–∞–π—Ç–∏</Button>
                  </div>
                </CardContent>
              </Card>

              {/* –ü—Ä–∏–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ (–º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ—é –∏–ª–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) */}
              <div className="text-center py-8">
                <Star className="w-16 h-16 mx-auto mb-4 text-orange-500" />
                <h3 className="text-lg font-medium mb-2">–°–∏—Å—Ç–µ–º–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</h3>
                <p className="text-muted-foreground mb-4">
                  –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏ —Å–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                </p>
                <div className="flex justify-center gap-2">
                  <Badge className="bg-orange-100 text-orange-800">–ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ</Badge>
                  <Badge className="bg-blue-100 text-blue-800">–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞</Badge>
                  <Badge className="bg-green-100 text-green-800">–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å</Badge>
                  <Badge className="bg-red-100 text-red-800">–°–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª</Badge>
                </div>
              </div>
            </div>
          )}
        </TabsContent>

        {/* –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
        <TabsContent value="achievements" className="space-y-6">
          {!session ? (
            <Card>
              <CardContent className="text-center py-12">
                <User className="w-16 h-16 mx-auto mb-4 text-muted-foreground opacity-50" />
                <h3 className="text-lg font-medium mb-2">–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É</h3>
                <p className="text-muted-foreground">
                  –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
                </p>
              </CardContent>
            </Card>
          ) : !userProfile ? (
            <Card>
              <CardContent className="text-center py-12">
                <Plus className="w-16 h-16 mx-auto mb-4 text-muted-foreground opacity-50" />
                <h3 className="text-lg font-medium mb-2">–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Ä—ã–±–æ–ª–æ–≤–∞</h3>
                <p className="text-muted-foreground mb-4">
                  –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Ä—ã–±–æ–ª–æ–≤–∞
                </p>
                <Button onClick={handleCreateProfile}>
                  <Plus className="w-4 h-4 mr-2" />
                  –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
                </Button>
              </CardContent>
            </Card>
          ) : (
            <div className="space-y-6">
              {/* –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <User className="w-5 h-5" />
                    –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Ä—ã–±–æ–ª–æ–≤–∞
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  {userProfile ? (
                    <div className="space-y-4">
                      <div className="flex items-center gap-4">
                        <div className="w-16 h-16 rounded-full bg-gradient-to-br from-blue-400 to-blue-600 flex items-center justify-center text-white font-semibold text-lg">
                          {userProfile.user?.name?.charAt(0) || 'U'}
                        </div>
                        <div className="flex-1">
                          <h3 className="text-lg font-semibold">{userProfile.user?.name}</h3>
                          <p className="text-muted-foreground">{userProfile.experienceLevel}</p>
                          <div className="flex items-center gap-4 mt-2 text-sm">
                            <span>‚òÖ {Number(userProfile.rating).toFixed(1)}</span>
                            <span>–£—Ä–æ–≤–µ–Ω—å {userProfile.level}</span>
                            <span>{userProfile.completedTrips} –ø–æ–µ–∑–¥–æ–∫</span>
                          </div>
                        </div>
                      </div>
                      {userProfile.bio && (
                        <p className="text-muted-foreground">{userProfile.bio}</p>
                      )}
                    </div>
                  ) : (
                    <div className="text-center py-4">
                      <p className="text-muted-foreground">–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
                    </div>
                  )}
                </CardContent>
              </Card>

              {/* –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Medal className="w-5 h-5 text-yellow-500" />
                    –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  {achievementsLoading ? (
                    <div className="flex items-center justify-center py-8">
                      <RefreshCw className="w-6 h-6 animate-spin text-muted-foreground" />
                      <span className="ml-2 text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...</span>
                    </div>
                  ) : userAchievements.length > 0 ? (
                    <div className="space-y-3">
                      {userAchievements.slice(0, 10).map((achievement) => (
                        <div
                          key={achievement.id}
                          className={`flex items-center gap-3 p-3 rounded-lg border ${
                            achievement.unlocked 
                              ? 'bg-green-50 border-green-200 dark:bg-green-950 dark:border-green-800' 
                              : 'bg-gray-50 border-gray-200 dark:bg-gray-950 dark:border-gray-800'
                          }`}
                        >
                          <div className="text-2xl">{achievement.icon}</div>
                          <div className="flex-1">
                            <div className="font-medium">{achievement.name}</div>
                            <p className="text-sm text-muted-foreground">{achievement.description}</p>
                            <div className="mt-1 text-xs text-muted-foreground">
                              –ü—Ä–æ–≥—Ä–µ—Å—Å: {achievement.progress}/{achievement.maxProgress} ({achievement.progressPercent?.toFixed(1)}%)
                            </div>
                          </div>
                          {achievement.unlocked && (
                            <Badge variant="secondary" className="text-green-700 bg-green-100">
                              –ü–æ–ª—É—á–µ–Ω–æ
                            </Badge>
                          )}
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center py-8">
                      <Medal className="w-16 h-16 mx-auto mb-4 text-muted-foreground opacity-50" />
                      <h3 className="text-lg font-medium mb-2">–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</h3>
                      <p className="text-muted-foreground">
                        –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!
                      </p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          )}
        </TabsContent>
      </Tabs>
    </div>
  );
}
