import { NextRequest, NextResponse } from 'next/server'
import { auth } from '@/auth'
import { PrismaClient, BadgeCategory, FishingExperience } from '@prisma/client'
import { z } from 'zod'

const prisma = new PrismaClient()

// Schema –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è badge
const createBadgeSchema = z.object({
  name: z.string().min(1).max(100),
  description: z.string().max(500).optional(),
  icon: z.string().max(255),
  category: z.enum(['ACHIEVEMENT', 'MILESTONE', 'SPECIAL', 'SEASONAL']),
  requiredValue: z.number().min(0).optional()
})

/**
 * POST /api/badges - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ badge (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 */
export async function POST(request: NextRequest) {
  try {
    console.log('üÜï Creating new badge')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    const session = await auth()
    if (!session?.user) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if (session.user.role !== 'ADMIN') {
      return NextResponse.json(
        { success: false, error: 'Admin access required' },
        { status: 403 }
      )
    }

    const body = await request.json()
    console.log('üìã Request body:', body)

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const validationResult = createBadgeSchema.safeParse(body)
    if (!validationResult.success) {
      console.error('‚ùå Validation error:', validationResult.error)
      return NextResponse.json(
        { 
          success: false, 
          error: 'Invalid request data', 
          details: validationResult.error.flatten() 
        },
        { status: 400 }
      )
    }

    const badgeData = validationResult.data

    // –°–æ–∑–¥–∞–µ–º badge (–≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ–º –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è)
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å badge template –æ—Ç–¥–µ–ª—å–Ω–æ
    const systemProfile = await prisma.fisherProfile.findFirst({
      where: { user: { role: 'ADMIN' } }
    })

    if (!systemProfile) {
      return NextResponse.json(
        { success: false, error: 'System profile not found' },
        { status: 500 }
      )
    }

    const badge = await prisma.fisherBadge.create({
      data: {
        profileId: systemProfile.id,
        name: badgeData.name,
        description: badgeData.description || '',
        icon: badgeData.icon,
        category: badgeData.category as BadgeCategory,
        requiredValue: badgeData.requiredValue
      }
    })

    console.log('‚úÖ Badge created:', badge.id)
    
    return NextResponse.json({
      success: true,
      data: badge,
      message: 'Badge created successfully'
    })
    
  } catch (error) {
    console.error('‚ùå Error creating badge:', error)
    return NextResponse.json(
      { 
        success: false, 
        error: 'Internal server error',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  }
}

/**
 * GET /api/badges - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö badges –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö badges
 */
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const userId = searchParams.get('userId')
    const category = searchParams.get('category')
    
    console.log('üîç Fetching badges:', { userId, category })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    const session = await auth()
    if (!session?.user) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      )
    }

    let whereCondition: any = {}
    
    if (category && ['ACHIEVEMENT', 'MILESTONE', 'SPECIAL', 'SEASONAL'].includes(category)) {
      whereCondition.category = category as BadgeCategory
    }

    // –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç—Å—è badges –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userId) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
      const canAccess = session.user.id === userId || session.user.role === 'ADMIN'
      if (!canAccess) {
      return NextResponse.json(
          { success: false, error: 'Access denied' },
        { status: 403 }
        )
      }

      const userProfile = await prisma.fisherProfile.findUnique({
        where: { userId },
        select: { id: true }
      })

      if (!userProfile) {
        return NextResponse.json(
          { success: false, error: 'User profile not found' },
          { status: 404 }
        )
      }

      whereCondition.profileId = userProfile.id
    }

    const badges = await prisma.fisherBadge.findMany({
      where: whereCondition,
      include: {
        profile: {
          select: {
            user: {
              select: {
                id: true,
                name: true,
                image: true
              }
            }
          }
        }
      },
      orderBy: [
        { earnedAt: 'desc' },
        { category: 'asc' },
        { name: 'asc' }
      ]
    })

    console.log(`‚úÖ Found ${badges.length} badges`)

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º badges –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    const badgesByCategory = badges.reduce((acc, badge) => {
      if (!acc[badge.category]) {
        acc[badge.category] = []
      }
      acc[badge.category].push(badge)
      return acc
    }, {} as Record<string, any[]>)
    
    return NextResponse.json({
      success: true,
      data: {
        badges,
        badgesByCategory,
        stats: {
          total: badges.length,
          achievement: badges.filter(b => b.category === 'ACHIEVEMENT').length,
          milestone: badges.filter(b => b.category === 'MILESTONE').length,
          special: badges.filter(b => b.category === 'SPECIAL').length,
          seasonal: badges.filter(b => b.category === 'SEASONAL').length
        }
      }
    })
    
  } catch (error) {
    console.error('‚ùå Error fetching badges:', error)
    return NextResponse.json(
      { 
        success: false, 
        error: 'Internal server error',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  }
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ badges –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function awardBadgesBasedOnActivity(userId: string) {
  try {
    console.log('üèÜ Checking badges for user:', userId)

    const profile = await prisma.fisherProfile.findUnique({
      where: { userId },
      include: {
        badges: true,
        user: {
          include: {
            groupBookings: {
              where: { status: 'CONFIRMED' },
              select: { id: true, createdAt: true }
            },
            reviewsReceived: {
              where: { verified: true },
              select: { rating: true }
            }
          }
        }
      }
    })

    if (!profile) {
      console.log('‚ùå Profile not found for user:', userId)
      return []
    }

    const existingBadgeNames = profile.badges.map(badge => badge.name)
    const newBadges: any[] = []

    // Badge –∑–∞ –ø–µ—Ä–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (profile.user.groupBookings.length >= 1 && !existingBadgeNames.includes('First Trip')) {
      const badge = await prisma.fisherBadge.create({
        data: {
          profileId: profile.id,
          name: 'First Trip',
          description: 'Completed your first fishing trip!',
          icon: 'üé£',
          category: BadgeCategory.MILESTONE,
          requiredValue: 1
        }
      })
      newBadges.push(badge)
      console.log('üèÜ Awarded "First Trip" badge')
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
      await sendBadgeAwardedNotification(userId, badge)
    }

    // Badge –∑–∞ 5 –ø–æ–µ–∑–¥–æ–∫
    if (profile.completedTrips >= 5 && !existingBadgeNames.includes('Regular Fisher')) {
      const badge = await prisma.fisherBadge.create({
        data: {
          profileId: profile.id,
          name: 'Regular Fisher',
          description: 'Completed 5+ fishing trips',
          icon: 'üêü',
          category: BadgeCategory.MILESTONE,
          requiredValue: 5
        }
      })
      newBadges.push(badge)
      console.log('üèÜ Awarded "Regular Fisher" badge')
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
      await sendBadgeAwardedNotification(userId, badge)
    }

    // Badge –∑–∞ 10 –ø–æ–µ–∑–¥–æ–∫
    if (profile.completedTrips >= 10 && !existingBadgeNames.includes('Experienced Angler')) {
      const badge = await prisma.fisherBadge.create({
        data: {
          profileId: profile.id,
          name: 'Experienced Angler',
          description: 'Completed 10+ fishing trips',
          icon: 'üéØ',
          category: BadgeCategory.MILESTONE,
          requiredValue: 10
        }
      })
      newBadges.push(badge)
      console.log('üèÜ Awarded "Experienced Angler" badge')
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
      await sendBadgeAwardedNotification(userId, badge)
    }

    // Badge –∑–∞ –≤—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ (4.5+)
    if (profile.rating >= 4.5 && profile.totalReviews >= 3 && 
        !existingBadgeNames.includes('Highly Rated')) {
      const badge = await prisma.fisherBadge.create({
        data: {
          profileId: profile.id,
          name: 'Highly Rated',
          description: 'Maintained 4.5+ star rating',
          icon: '‚≠ê',
          category: BadgeCategory.ACHIEVEMENT,
          requiredValue: null
        }
      })
      newBadges.push(badge)
      console.log('üèÜ Awarded "Highly Rated" badge')
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
      await sendBadgeAwardedNotification(userId, badge)
    }

    // Badge –∑–∞ –≤—ã—Å–æ–∫—É—é –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å (95%+)
    if (profile.reliability >= 95 && profile.completedTrips >= 5 && 
        !existingBadgeNames.includes('Reliable Fisher')) {
      const badge = await prisma.fisherBadge.create({
        data: {
          profileId: profile.id,
          name: 'Reliable Fisher',
          description: '95%+ reliability score',
          icon: 'üõ°Ô∏è',
          category: BadgeCategory.ACHIEVEMENT,
          requiredValue: null
        }
      })
      newBadges.push(badge)
      console.log('üèÜ Awarded "Reliable Fisher" badge')
    }

    // Badge –∑–∞ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    if (profile.experience === FishingExperience.EXPERT && 
        !existingBadgeNames.includes('Master Angler')) {
      const badge = await prisma.fisherBadge.create({
        data: {
          profileId: profile.id,
          name: 'Master Angler',
          description: 'Reached Expert fishing level',
          icon: 'üëë',
          category: BadgeCategory.SPECIAL,
          requiredValue: null
        }
      })
      newBadges.push(badge)
      console.log('üèÜ Awarded "Master Angler" badge')
    }

    // –°–µ–∑–æ–Ω–Ω—ã–π badge (–ø—Ä–∏–º–µ—Ä - winter fishing)
    const now = new Date()
    const isWinter = now.getMonth() === 11 || now.getMonth() === 0 || now.getMonth() === 1
    
    if (isWinter && profile.user.groupBookings.length >= 1 && 
        !existingBadgeNames.includes('Winter Fisher')) {
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∏–º–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      const winterBookings = profile.user.groupBookings.filter(booking => {
        const bookingMonth = booking.createdAt.getMonth()
        return bookingMonth === 11 || bookingMonth === 0 || bookingMonth === 1
      })
      
      if (winterBookings.length >= 1) {
        const badge = await prisma.fisherBadge.create({
          data: {
            profileId: profile.id,
            name: 'Winter Fisher',
            description: 'Went fishing during winter season',
            icon: '‚ùÑÔ∏è',
            category: BadgeCategory.SEASONAL,
            requiredValue: null
          }
        })
        newBadges.push(badge)
        console.log('üèÜ Awarded "Winter Fisher" badge')
      }
    }

    console.log(`‚úÖ Awarded ${newBadges.length} new badges to user ${userId}`)
    return newBadges

  } catch (error) {
    console.error('‚ùå Error awarding badges:', error)
    return []
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
 */
async function sendBadgeAwardedNotification(userId: string, badge: any) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
    const user = await prisma.user.findUnique({
      where: { userId },
      include: {
        fisherProfile: {
          include: {
            badges: true
          }
        }
      }
    });

    if (!user?.email) {
      console.log('‚ö†Ô∏è User email not found, skipping badge notification');
      return;
    }

    const profileUrl = `${process.env.NEXTAUTH_URL}/profile`;
    const totalBadges = user.fisherProfile?.badges.length || 1;

    await emailService.sendBadgeAwardedNotification({
      userEmail: user.email,
      userName: user.name || '–£—á–∞—Å—Ç–Ω–∏–∫',
      badge: {
        name: badge.name,
        description: badge.description,
        icon: badge.icon,
        category: badge.category
      },
      totalBadges,
      profileUrl
    });

    console.log(`üìß Badge notification sent to ${user.email} (${badge.name})`);

  } catch (error) {
    console.error('Error sending badge notification:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤—ã—à–µ –∫–∞–∫ named export