import { NextRequest, NextResponse } from 'next/server';
import { z } from 'zod';
import { prisma } from '@/lib/prisma';

// TypeScript interfaces
interface FisherProfileExtended {
  id: string;
  userId: string;
  user?: {
    id: string;
    name?: string;
    image?: string;
  };
  experienceLevel: string;
  bio?: string;
  rating: number;
  level: number;
  completedTrips: number;
  country?: string;
  city?: string;
  position?: number;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
const UpdateProfileSchema = z.object({
  userId: z.string(),
  bio: z.string().max(500).optional(),
  specialties: z.array(z.enum(['DEEP_SEA', 'SHORE', 'FLY_FISHING', 'SPORT_FISHING'])).optional(),
  country: z.string().max(100).optional(),
  city: z.string().max(100).optional(),
  latitude: z.number().min(-90).max(90).optional(),
  longitude: z.number().min(-180).max(180).optional(),
  favoriteLocation: z.string().max(200).optional(),
  
  // üéØ –ù–æ–≤—ã–µ –ø–æ–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
  mentorRating: z.number().min(1).max(10).optional(),
  teamworkRating: z.number().min(1).max(10).optional(),
  reliabilityRating: z.number().min(1).max(10).optional(),
  respectRating: z.number().min(1).max(10).optional(),
  totalWeightCaught: z.number().min(0).optional(),
  averageTripDuration: z.number().min(0).optional(),
  successRate: z.number().min(0).max(100).optional(),
  favoriteLocations: z.array(z.string()).optional(),
  fishingZones: z.array(z.string()).optional(),
  
  // JSON –ø–æ–ª—è –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  experienceStats: z.record(z.any()).optional(),
  certificates: z.array(z.record(z.any())).optional(),
  fishingPreferences: z.record(z.any()).optional(),
  catchRecords: z.array(z.record(z.any())).optional(),
  techniqueSkills: z.array(z.record(z.any())).optional(),
  seasonalActivity: z.record(z.any()).optional(),
  reviewBreakdown: z.record(z.any()).optional(),
});

/**
 * GET /api/profiles - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ —Ä—ã–±–æ–ª–æ–≤–æ–≤
 * 
 * Query params:
 * - userId?: string - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
 * - limit?: number - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏–ª–µ–π (default: 20)
 * - orderBy?: 'rating' | 'level' | 'completedTrips' | 'createdAt' - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
 * - country?: string - —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç—Ä–∞–Ω–µ
 * - experienceLevel?: 'BEGINNER' | 'INTERMEDIATE' | 'EXPERT' - —Ñ–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é –æ–ø—ã—Ç–∞
 */
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const userId = searchParams.get('userId');
    const limit = Math.min(Number(searchParams.get('limit')) || 20, 100);
    const orderBy = searchParams.get('orderBy') || 'rating';
    const country = searchParams.get('country');
    const experienceLevel = searchParams.get('experienceLevel');

    // –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (userId) {
      const profile = await prisma.fisherProfile.findUnique({
        where: { userId },
        include: {
          user: {
            select: {
              id: true,
              name: true,
              image: true,
              email: true,
            },
          },
          badges: {
            include: {
              fisherProfile: false, // –ò–∑–±–µ–≥–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏
            },
            orderBy: {
              earnedAt: 'desc',
            },
          },
        },
      });

      if (!profile) {
        return NextResponse.json(
          { error: 'Profile not found' },
          { status: 404 }
        );
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const achievements = await prisma.userAchievement.findMany({
        where: { userId },
        include: {
          achievement: true,
        },
        orderBy: {
          unlockedAt: 'desc',
        },
      });

      const profileExtended: FisherProfileExtended = {
        ...profile,
        achievements,
      };

      return NextResponse.json(profileExtended);
    }

    // –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const where: any = {
      isActive: true,
    };

    if (country && country !== 'ALL') {
      where.country = country;
    }

    if (experienceLevel && experienceLevel !== 'ALL') {
      where.experienceLevel = experienceLevel;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    let orderByClause: any = { rating: 'desc' };
    switch (orderBy) {
      case 'level':
        orderByClause = { level: 'desc' };
        break;
      case 'completedTrips':
        orderByClause = { completedTrips: 'desc' };
        break;
      case 'createdAt':
        orderByClause = { createdAt: 'desc' };
        break;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
    const profiles = await prisma.fisherProfile.findMany({
      where,
      include: {
        user: {
          select: {
            id: true,
            name: true,
            image: true,
            email: false, // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º email –≤ —Å–ø–∏—Å–∫–µ
          },
        },
        badges: {
          take: 5, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-5 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
          orderBy: {
            earnedAt: 'desc',
          },
        },
        _count: {
          select: {
            badges: true,
          },
        },
      },
      orderBy: orderByClause,
      take: limit,
    });

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
    const profilesExtended: FisherProfileExtended[] = profiles
      .filter(profile => profile.user) // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ñ–∏–ª–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
      .map((profile, index) => ({
        ...profile,
        user: {
          ...profile.user!,
          name: profile.user!.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        },
        position: orderBy === 'rating' ? index + 1 : undefined,
      }));

    return NextResponse.json(profilesExtended);

  } catch (error) {
    console.error('Error fetching profiles:', error);
    return NextResponse.json(
      { error: 'Failed to fetch profiles' },
      { status: 500 }
    );
  }
}

/**
 * POST /api/profiles - –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ä—ã–±–æ–ª–æ–≤–∞
 * 
 * Body:
 * - userId: string - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * - bio?: string - –±–∏–æ–≥—Ä–∞—Ñ–∏—è
 * - specialties?: FishingSpecialty[] - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
 * - country?: string - —Å—Ç—Ä–∞–Ω–∞
 * - city?: string - –≥–æ—Ä–æ–¥
 * - latitude?: number - —à–∏—Ä–æ—Ç–∞
 * - longitude?: number - –¥–æ–ª–≥–æ—Ç–∞
 * - favoriteLocation?: string - –ª—é–±–∏–º–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏
 */
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const data = UpdateProfileSchema.parse(body);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const user = await prisma.user.findUnique({
      where: { id: data.userId },
    });

    if (!user) {
      return NextResponse.json(
        { error: 'User not found' },
        { status: 404 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—è
    const existingProfile = await prisma.fisherProfile.findUnique({
      where: { userId: data.userId },
    });

    if (existingProfile) {
      return NextResponse.json(
        { error: 'Profile already exists' },
        { status: 409 }
      );
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const secretCode = generateSecretCode();

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    const profile = await prisma.fisherProfile.create({
      data: {
        userId: data.userId,
        bio: data.bio,
        specialties: data.specialties || [],
        country: data.country,
        city: data.city,
        latitude: data.latitude,
        longitude: data.longitude,
        favoriteLocation: data.favoriteLocation,
        secretCode,
        experienceLevel: 'BEGINNER',
        rating: 5.0,
        level: 1,
        activeDays: 1,
        lastActiveAt: new Date(),
      },
      include: {
        user: {
          select: {
            id: true,
            name: true,
            image: true,
            email: true,
          },
        },
        badges: true,
      },
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await initializeUserAchievements(data.userId);

    return NextResponse.json(profile, { status: 201 });

  } catch (error) {
    console.error('Error creating profile:', error);
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Invalid request body', details: error.errors },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { error: 'Failed to create profile' },
      { status: 500 }
    );
  }
}

/**
 * PUT /api/profiles - –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ä—ã–±–æ–ª–æ–≤–∞
 * 
 * Body: —Ç–æ—Ç –∂–µ —á—Ç–æ –∏ –¥–ª—è POST
 */
export async function PUT(request: NextRequest) {
  try {
    const body = await request.json();
    const data = UpdateProfileSchema.parse(body);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    const existingProfile = await prisma.fisherProfile.findUnique({
      where: { userId: data.userId },
    });

    if (!existingProfile) {
      return NextResponse.json(
        { error: 'Profile not found' },
        { status: 404 }
      );
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    const profile = await prisma.fisherProfile.update({
      where: { userId: data.userId },
      data: {
        bio: data.bio,
        specialties: data.specialties,
        country: data.country,
        city: data.city,
        latitude: data.latitude,
        longitude: data.longitude,
        favoriteLocation: data.favoriteLocation,
        lastActiveAt: new Date(),
        
        // üéØ –ù–æ–≤—ã–µ –ø–æ–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
        ...(data.mentorRating && { mentorRating: data.mentorRating }),
        ...(data.teamworkRating && { teamworkRating: data.teamworkRating }),
        ...(data.reliabilityRating && { reliabilityRating: data.reliabilityRating }),
        ...(data.respectRating && { respectRating: data.respectRating }),
        ...(data.totalWeightCaught !== undefined && { totalWeightCaught: data.totalWeightCaught }),
        ...(data.averageTripDuration !== undefined && { averageTripDuration: data.averageTripDuration }),
        ...(data.successRate !== undefined && { successRate: data.successRate }),
        ...(data.favoriteLocations && { favoriteLocations: data.favoriteLocations }),
        ...(data.fishingZones && { fishingZones: data.fishingZones }),
        
        // JSON –ø–æ–ª—è –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö 
        ...(data.experienceStats && { experienceStats: data.experienceStats }),
        ...(data.certificates && { certificates: data.certificates }),
        ...(data.fishingPreferences && { fishingPreferences: data.fishingPreferences }),
        ...(data.catchRecords && { catchRecords: data.catchRecords }),
        ...(data.techniqueSkills && { techniqueSkills: data.techniqueSkills }),
        ...(data.seasonalActivity && { seasonalActivity: data.seasonalActivity }),
        ...(data.reviewBreakdown && { reviewBreakdown: data.reviewBreakdown }),
      },
      include: {
        user: {
          select: {
            id: true,
            name: true,
            image: true,
            email: true,
          },
        },
        badges: {
          orderBy: {
            earnedAt: 'desc',
          },
        },
      },
    });

    return NextResponse.json(profile);

  } catch (error) {
    console.error('Error updating profile:', error);
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Invalid request body', details: error.errors },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { error: 'Failed to update profile' },
      { status: 500 }
    );
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function generateSecretCode(): string {
  const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789'; // –ò—Å–∫–ª—é—á–µ–Ω—ã –ø–æ—Ö–æ–∂–∏–µ —Å–∏–º–≤–æ–ª—ã
  let result = '';
  for (let i = 0; i < 8; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function initializeUserAchievements(userId: string) {
  try {
    // –í—ã–∑—ã–≤–∞–µ–º POST endpoint –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const response = await fetch(`${process.env.NEXTAUTH_URL}/api/achievements`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ userId }),
    });

    if (!response.ok) {
      console.error('Failed to initialize achievements for user:', userId);
    }
  } catch (error) {
    console.error('Error initializing achievements:', error);
    // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–µ —É–¥–∞–ª–∞—Å—å
  }
}