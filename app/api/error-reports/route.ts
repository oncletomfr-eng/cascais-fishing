import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ
interface ErrorReport {
  id: string;
  error: {
    name: string;
    message: string;
    stack?: string;
  };
  errorInfo: {
    componentStack: string;
  };
  timestamp: string;
  userAgent: string;
  url: string;
  userId?: string;
  level: 'page' | 'component' | 'critical';
  boundaryName?: string;
  userFeedback?: string;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ
function validateErrorReport(data: any): data is ErrorReport {
  return (
    typeof data.id === 'string' &&
    typeof data.error === 'object' &&
    typeof data.error.name === 'string' &&
    typeof data.error.message === 'string' &&
    typeof data.errorInfo === 'object' &&
    typeof data.errorInfo.componentStack === 'string' &&
    typeof data.timestamp === 'string' &&
    typeof data.userAgent === 'string' &&
    typeof data.url === 'string' &&
    ['page', 'component', 'critical'].includes(data.level)
  );
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É (–¥–ª—è development)
async function logErrorToFile(errorReport: ErrorReport) {
  if (process.env.NODE_ENV !== 'development') {
    return;
  }

  try {
    const fs = await import('fs/promises');
    const path = await import('path');
    
    const logsDir = path.join(process.cwd(), 'logs');
    const logFile = path.join(logsDir, `errors-${new Date().toISOString().split('T')[0]}.log`);
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try {
      await fs.access(logsDir);
    } catch {
      await fs.mkdir(logsDir, { recursive: true });
    }

    const logEntry = {
      timestamp: new Date().toISOString(),
      ...errorReport,
    };

    await fs.appendFile(logFile, JSON.stringify(logEntry) + '\n');
  } catch (error) {
    console.error('Failed to log error to file:', error);
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≤–Ω–µ—à–Ω—é—é —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async function reportToMonitoringSystem(errorReport: ErrorReport) {
  // –í production –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ —Ç–∏–ø–∞:
  // - Sentry
  // - LogRocket  
  // - Bugsnag
  // - DataDog
  // - –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

  // –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Sentry (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ)
  /*
  if (process.env.SENTRY_DSN) {
    try {
      const Sentry = await import('@sentry/nextjs');
      
      Sentry.withScope((scope) => {
        scope.setTag('errorBoundary', true);
        scope.setTag('level', errorReport.level);
        scope.setTag('boundaryName', errorReport.boundaryName || 'unknown');
        scope.setContext('errorInfo', errorReport.errorInfo);
        scope.setContext('userReport', {
          id: errorReport.id,
          userAgent: errorReport.userAgent,
          url: errorReport.url,
          userFeedback: errorReport.userFeedback,
        });

        const error = new Error(errorReport.error.message);
        error.name = errorReport.error.name;
        error.stack = errorReport.error.stack;

        Sentry.captureException(error);
      });
    } catch (error) {
      console.error('Failed to report to Sentry:', error);
    }
  }
  */

  console.log('üìä Error report would be sent to monitoring system:', {
    id: errorReport.id,
    level: errorReport.level,
    boundary: errorReport.boundaryName,
    url: errorReport.url,
  });
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
async function saveErrorToDatabase(errorReport: ErrorReport) {
  try {
    // –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –≤ –ë–î –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—à–∏–±–æ–∫
    console.log('üíæ Error report would be saved to database:', {
      id: errorReport.id,
      level: errorReport.level,
      errorName: errorReport.error.name,
      errorMessage: errorReport.error.message,
      boundaryName: errorReport.boundaryName,
      url: errorReport.url,
      timestamp: errorReport.timestamp,
    });
    
    // –ü—Ä–∏–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü—ã errors)
    /*
    await prisma.errorReport.create({
      data: {
        id: errorReport.id,
        errorName: errorReport.error.name,
        errorMessage: errorReport.error.message,
        errorStack: errorReport.error.stack,
        componentStack: errorReport.errorInfo.componentStack,
        level: errorReport.level,
        boundaryName: errorReport.boundaryName,
        url: errorReport.url,
        userAgent: errorReport.userAgent,
        userFeedback: errorReport.userFeedback,
        timestamp: new Date(errorReport.timestamp),
      },
    });
    */
  } catch (error) {
    console.error('Failed to save error to database:', error);
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    if (!validateErrorReport(body)) {
      return NextResponse.json(
        { success: false, error: 'Invalid error report format' },
        { status: 400 }
      );
    }

    const errorReport: ErrorReport = body;

    // –ü–æ–ª—É—á–∞–µ–º IP –∏ –¥—Ä—É–≥—É—é –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const ip = request.ip || 
               request.headers.get('x-forwarded-for') || 
               request.headers.get('x-real-ip') || 
               'unknown';

    // –û–±–æ–≥–∞—â–∞–µ–º –æ—Ç—á–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    const enrichedReport = {
      ...errorReport,
      ip,
      receivedAt: new Date().toISOString(),
      headers: {
        userAgent: request.headers.get('user-agent') || errorReport.userAgent,
        referer: request.headers.get('referer'),
        acceptLanguage: request.headers.get('accept-language'),
      },
    };

    // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    console.group(`üö® Error Report Received [${errorReport.level.toUpperCase()}]`);
    console.log('ID:', errorReport.id);
    console.log('Boundary:', errorReport.boundaryName || 'Unknown');
    console.log('Error:', errorReport.error.name, '-', errorReport.error.message);
    console.log('URL:', errorReport.url);
    console.log('User Agent:', errorReport.userAgent);
    console.log('IP:', ip);
    if (errorReport.userFeedback) {
      console.log('User Feedback:', errorReport.userFeedback);
    }
    console.groupEnd();

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    await Promise.allSettled([
      logErrorToFile(enrichedReport),
      reportToMonitoringSystem(enrichedReport),
      saveErrorToDatabase(enrichedReport),
    ]);

    return NextResponse.json({ 
      success: true, 
      id: errorReport.id,
      message: 'Error report received and processed'
    });

  } catch (error) {
    console.error('Error processing error report:', error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: 'Failed to process error report',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: GET endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫ (–¥–ª—è admin –ø–∞–Ω–µ–ª–∏)
export async function GET(request: NextRequest) {
  try {
    // –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    
    const stats = {
      message: 'Error reporting system is active',
      endpoints: {
        POST: 'Submit error report',
        GET: 'Get error statistics (development only)',
      },
      environment: process.env.NODE_ENV,
      timestamp: new Date().toISOString(),
    };

    return NextResponse.json(stats);

  } catch (error) {
    return NextResponse.json(
      { success: false, error: 'Failed to get error statistics' },
      { status: 500 }
    );
  }
}
