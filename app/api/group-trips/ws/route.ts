import { NextRequest } from 'next/server';
import type { WebSocket } from 'ws';
import { GroupTripUpdate, ClientMessage } from '@/lib/types/group-events';

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
interface ClientSubscription {
  tripIds: Set<string>;
  eventTypes: Set<string>; // —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –∫–ª–∏–µ–Ω—Ç
  filters: {
    weatherAlertsOnly?: boolean;
    biteReportsMinConfidence?: 'low' | 'medium' | 'high';
    routeChangesOnly?: boolean;
  };
}

const clients = new Map<WebSocket, ClientSubscription>();

// WebSocket handler function –¥–ª—è next-ws
export function SOCKET(
  client: WebSocket,
  request: any,
  server: any
) {
  console.log('üîå New WebSocket client connected');
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
  clients.set(client, {
    tripIds: new Set(),
    eventTypes: new Set(['participant_joined', 'participant_left', 'status_changed', 'confirmed']), // –±–∞–∑–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    filters: {}
  });
  
  // Heartbeat –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 25 —Å–µ–∫—É–Ω–¥
  const heartbeatInterval = setInterval(() => {
    if (client.readyState === client.OPEN) {
      client.ping();
      console.log('üíì Sending heartbeat ping');
    }
  }, 25000);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  client.on('message', async (data: Buffer) => {
    try {
      const messageText = data.toString();
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ heartbeat —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–¥–µ–ª—å–Ω–æ
      if (messageText === 'heartbeat' || messageText === 'ping') {
        client.send('pong');
        return;
      }

      const message: ClientMessage = JSON.parse(messageText);
      console.log('üì® Received message:', message.type);
      
      await handleClientMessage(client, message);
    } catch (error) {
      console.error('‚ùå Error handling WebSocket message:', error);
      client.send(JSON.stringify({ 
        type: 'error', 
        message: 'Invalid message format' 
      }));
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ pong –æ—Ç–≤–µ—Ç–æ–≤
  client.on('pong', () => {
    console.log('üíì Received heartbeat pong');
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  client.on('close', (code: number, reason: string) => {
    console.log(`üîå Client disconnected: ${code} ${reason}`);
    clearInterval(heartbeatInterval);
    clients.delete(client);
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  client.on('error', (error: Error) => {
    console.error('‚ùå WebSocket client error:', error);
    clearInterval(heartbeatInterval);
    clients.delete(client);
  });
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º welcome —Å–æ–æ–±—â–µ–Ω–∏–µ
  client.send(JSON.stringify({
    type: 'connected',
    message: 'WebSocket connection established',
    timestamp: new Date().toISOString()
  }));
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
async function handleClientMessage(client: WebSocket, message: ClientMessage) {
  const subscription = clients.get(client);
  if (!subscription) return;
  
  switch (message.type) {
    case 'subscribe':
      if (message.tripIds && message.tripIds.length > 0) {
        message.tripIds.forEach(tripId => subscription.tripIds.add(tripId));
        
        console.log(`üì° Client subscribed to trips: ${message.tripIds.join(', ')}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        client.send(JSON.stringify({
          type: 'subscription_confirmed',
          tripIds: message.tripIds,
          timestamp: new Date().toISOString()
        }));
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫
        await sendCurrentTripStates(client, message.tripIds);
      }
      break;
      
    case 'unsubscribe':
      if (message.tripIds && message.tripIds.length > 0) {
        message.tripIds.forEach(tripId => subscription.tripIds.delete(tripId));
        
        console.log(`üì° Client unsubscribed from trips: ${message.tripIds.join(', ')}`);
        
        client.send(JSON.stringify({
          type: 'unsubscription_confirmed',
          tripIds: message.tripIds,
          timestamp: new Date().toISOString()
        }));
      }
      break;

    case 'subscribe_events':
      if (message.eventTypes && message.eventTypes.length > 0) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π –≤ –ø–æ–¥–ø–∏—Å–∫—É
        message.eventTypes.forEach(eventType => subscription.eventTypes.add(eventType));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
        if (message.filters) {
          subscription.filters = { ...subscription.filters, ...message.filters };
        }
        
        console.log(`üé£ Client subscribed to event types: ${message.eventTypes.join(', ')}`);
        
        client.send(JSON.stringify({
          type: 'event_subscription_confirmed',
          eventTypes: message.eventTypes,
          filters: subscription.filters,
          timestamp: new Date().toISOString()
        }));
      }
      break;

    case 'unsubscribe_events':
      if (message.eventTypes && message.eventTypes.length > 0) {
        message.eventTypes.forEach(eventType => subscription.eventTypes.delete(eventType));
        
        console.log(`üé£ Client unsubscribed from event types: ${message.eventTypes.join(', ')}`);
        
        client.send(JSON.stringify({
          type: 'event_unsubscription_confirmed',
          eventTypes: message.eventTypes,
          timestamp: new Date().toISOString()
        }));
      }
      break;
      
    case 'heartbeat':
      // –û—Ç–≤–µ—Ç –Ω–∞ heartbeat
      client.send(JSON.stringify({ 
        type: 'heartbeat_response', 
        timestamp: new Date().toISOString() 
      }));
      console.log('üíì Heartbeat response sent');
      break;
      
    default:
      console.warn('‚ö†Ô∏è Unknown message type:', message.type);
      client.send(JSON.stringify({
        type: 'error',
        message: `Unknown message type: ${message.type}`
      }));
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–µ–∑–¥–æ–∫ (—Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î)
async function sendCurrentTripStates(client: WebSocket, tripIds: string[]) {
  try {
    console.log('üìä Sending current trip states for:', tripIds);
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º prisma –∏ —Ç–∏–ø—ã
    const { prisma } = await import('@/lib/prisma');
    const { BookingStatus } = await import('@prisma/client');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const trips = await prisma.groupTrip.findMany({
      where: {
        id: { in: tripIds }
      },
      include: {
        bookings: {
          where: {
            status: {
              in: [BookingStatus.PENDING, BookingStatus.CONFIRMED]
            }
          }
        }
      }
    });
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    const updates = trips.map(trip => {
      const currentParticipants = trip.bookings.reduce(
        (total, booking) => total + booking.participants,
        0
      );
      const spotsRemaining = trip.maxParticipants - currentParticipants;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      let status: GroupTripUpdate['status'] = 'forming';
      if (trip.status === 'CONFIRMED' || currentParticipants >= trip.minRequired) {
        status = 'confirmed';
      } else if (spotsRemaining <= 2) {
        status = 'almost_full';
      }
      
      return {
        tripId: trip.id,
        type: 'status_changed' as const,
        currentParticipants,
        status,
        timestamp: new Date(),
        spotsRemaining,
        maxParticipants: trip.maxParticipants,
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–µ–≥–æ—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        participantName: trip.bookings.length > 0 
          ? trip.bookings[trip.bookings.length - 1].contactName 
          : undefined
      };
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
    for (const update of updates) {
      if (client.readyState === client.OPEN) {
        client.send(JSON.stringify(update));
        console.log(`üì° Sent real trip state: ${update.tripId} - ${update.status} (${update.currentParticipants}/${update.maxParticipants})`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Error sending trip states:', error);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ë–î, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    tripIds.forEach(tripId => {
      if (client.readyState === client.OPEN) {
        client.send(JSON.stringify({
          tripId,
          type: 'status_changed' as const,
          currentParticipants: 0,
          status: 'forming' as const,
          timestamp: new Date(),
          spotsRemaining: 8,
          maxParticipants: 8
        }));
      }
    });
  }
}

// –ü—É–±–ª–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è broadcast –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ server actions)
export async function broadcastGroupTripUpdate(update: GroupTripUpdate) {
  console.log(`üì° Broadcasting update for trip ${update.tripId}: ${update.type}`);
  
  let sentCount = 0;
  clients.forEach((subscription, client) => {
    if (shouldSendUpdateToClient(subscription, update) && client.readyState === client.OPEN) {
      try {
        client.send(JSON.stringify(update));
        sentCount++;
        console.log(`üì° Sent ${update.type} update to client (trip: ${update.tripId})`);
      } catch (error) {
        console.error('‚ùå Error sending update to client:', error);
      }
    }
  });
  
  console.log(`üì° Update sent to ${sentCount} clients`);
  return sentCount;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–ª–∂–µ–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
function shouldSendUpdateToClient(subscription: ClientSubscription, update: GroupTripUpdate): boolean {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ø–æ–µ–∑–¥–∫—É
  if (!subscription.tripIds.has(update.tripId)) {
    return false;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
  if (!subscription.eventTypes.has(update.type)) {
    return false;
  }
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
  switch (update.type) {
    case 'weather_changed':
      if (subscription.filters.weatherAlertsOnly && 
          (!update.weatherData || update.weatherData.alertLevel !== 'warning' && update.weatherData.alertLevel !== 'danger')) {
        return false;
      }
      break;
      
    case 'bite_report':
      if (subscription.filters.biteReportsMinConfidence && update.biteReport) {
        const confidenceLevel = { 'low': 1, 'medium': 2, 'high': 3 };
        const requiredLevel = confidenceLevel[subscription.filters.biteReportsMinConfidence];
        const reportLevel = confidenceLevel[update.biteReport.confidence];
        if (reportLevel < requiredLevel) {
          return false;
        }
      }
      break;
      
    case 'route_changed':
      if (subscription.filters.routeChangesOnly && update.type !== 'route_changed') {
        return false;
      }
      break;
  }
  
  return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
export function getWebSocketStats() {
  const stats = {
    totalConnections: clients.size,
    totalTripSubscriptions: Array.from(clients.values()).reduce(
      (total, subscription) => total + subscription.tripIds.size,
      0
    ),
    totalEventSubscriptions: Array.from(clients.values()).reduce(
      (total, subscription) => total + subscription.eventTypes.size,
      0
    ),
    connections: Array.from(clients.entries()).map(([client, subscription]) => ({
      readyState: client.readyState,
      tripSubscriptions: Array.from(subscription.tripIds),
      eventSubscriptions: Array.from(subscription.eventTypes),
      filters: subscription.filters
    }))
  };
  
  console.log('üìä WebSocket Stats:', stats);
  return stats;
}

// üåä –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–≥–æ–¥–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
export async function createWeatherEvent(tripId: string) {
  const weatherConditions = ['excellent', 'good', 'fair', 'poor', 'dangerous'];
  const condition = weatherConditions[Math.floor(Math.random() * weatherConditions.length)] as any;
  
  const update: GroupTripUpdate = {
    tripId,
    type: 'weather_changed',
    currentParticipants: Math.floor(Math.random() * 8),
    status: 'confirmed',
    timestamp: new Date(),
    spotsRemaining: Math.floor(Math.random() * 4),
    maxParticipants: 8,
    weatherData: {
      condition,
      windSpeed: Math.floor(Math.random() * 30) + 5, // 5-35 km/h
      waveHeight: Math.random() * 3 + 0.5, // 0.5-3.5 meters
      temperature: Math.floor(Math.random() * 10) + 15, // 15-25¬∞C
      visibility: Math.floor(Math.random() * 20) + 5, // 5-25 km
      weatherScore: Math.floor(Math.random() * 10) + 1, // 1-10
      forecast: `–£—Å–ª–æ–≤–∏—è ${condition === 'excellent' ? '–æ—Ç–ª–∏—á–Ω—ã–µ' : condition === 'good' ? '—Ö–æ—Ä–æ—à–∏–µ' : condition === 'fair' ? '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ' : condition === 'poor' ? '–ø–ª–æ—Ö–∏–µ' : '–æ–ø–∞—Å–Ω—ã–µ'} –¥–ª—è —Ä—ã–±–∞–ª–∫–∏`,
      alertLevel: condition === 'dangerous' ? 'danger' : condition === 'poor' ? 'warning' : 'info',
      alertMessage: condition === 'dangerous' ? '‚ö†Ô∏è –û–ø–∞—Å–Ω—ã–µ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è! –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É.' :
                   condition === 'poor' ? 'üåä –ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã.' :
                   '‚úÖ –•–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä—ã–±–∞–ª–∫–∏!'
    }
  };
  
  return await broadcastGroupTripUpdate(update);
}

// üêü –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –æ –∫–ª—ë–≤–µ
export async function createBiteReport(tripId: string) {
  const species = ['TUNA', 'DORADO', 'SEABASS', 'MACKEREL', 'SARDINE'];
  const techniques = ['TROLLING', 'JIGGING', 'BOTTOM_FISHING', 'SPINNING'];
  const confidence = ['low', 'medium', 'high'];
  
  const update: GroupTripUpdate = {
    tripId,
    type: 'bite_report',
    currentParticipants: Math.floor(Math.random() * 8),
    status: 'confirmed',
    timestamp: new Date(),
    spotsRemaining: Math.floor(Math.random() * 4),
    maxParticipants: 8,
    biteReport: {
      species: species[Math.floor(Math.random() * species.length)],
      size: Math.floor(Math.random() * 50) + 20, // 20-70 cm
      weight: Math.floor(Math.random() * 10) + 1, // 1-11 kg
      location: 'Cascais Deep Waters',
      technique: techniques[Math.floor(Math.random() * techniques.length)],
      baitUsed: '–ñ–∏–≤–∞—è —Å–∞—Ä–¥–∏–Ω–∞',
      depth: Math.floor(Math.random() * 100) + 20, // 20-120 meters
      time: new Date(),
      reporterName: 'Captain Jo√£o',
      confidence: confidence[Math.floor(Math.random() * confidence.length)] as any,
      photos: []
    }
  };
  
  return await broadcastGroupTripUpdate(update);
}

// üó∫Ô∏è –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
export async function createRouteChange(tripId: string) {
  const locations = ['Cascais Deep Ridge', 'Sintra Rock Formation', 'Estoril Bay', 'Atlantic Dropoff'];
  const reasons = ['–õ—É—á—à–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä—ã–±–∞–ª–∫–∏', '–ò–∑–±–µ–≥–∞–µ–º –ø–ª–æ—Ö—É—é –ø–æ–≥–æ–¥—É', '–°–ª–µ–¥—É–µ–º –∑–∞ –∫–æ—Å—è–∫–æ–º —Ä—ã–±—ã', '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ—á–µ–Ω–∏—è'];
  
  const update: GroupTripUpdate = {
    tripId,
    type: 'route_changed',
    currentParticipants: Math.floor(Math.random() * 8),
    status: 'confirmed',
    timestamp: new Date(),
    spotsRemaining: Math.floor(Math.random() * 4),
    maxParticipants: 8,
    routeChange: {
      newLocation: locations[Math.floor(Math.random() * locations.length)],
      reason: reasons[Math.floor(Math.random() * reasons.length)],
      estimatedArrival: new Date(Date.now() + Math.random() * 3600000), // –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞
      coordinates: {
        lat: 38.7223 + (Math.random() - 0.5) * 0.1, // –æ–∫–æ–ª–æ Cascais
        lng: -9.4215 + (Math.random() - 0.5) * 0.1
      },
      changedBy: 'Captain Jo√£o',
      announcement: '–ú–µ–Ω—è–µ–º –∫—É—Ä—Å –¥–ª—è –ª—É—á—à–∏—Ö —É—Å–ª–æ–≤–∏–π –ª–æ–≤–∞!'
    }
  };
  
  return await broadcastGroupTripUpdate(update);
}

// HTTP endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (POST –∑–∞–ø—Ä–æ—Å—ã)
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    console.log('üß™ Test endpoint received:', body);
    
    let sentCount = 0;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä—ã–±–æ–ª–æ–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    if (body.command) {
      switch (body.command) {
        case 'weather_alert':
          sentCount = await createWeatherEvent(body.tripId || 'trip-1');
          return new Response(JSON.stringify({
            success: true,
            message: 'Weather alert sent',
            command: body.command,
            clientsSent: sentCount,
            stats: getWebSocketStats()
          }), {
            status: 200,
            headers: { 'Content-Type': 'application/json' }
          });
          
        case 'bite_report':
          sentCount = await createBiteReport(body.tripId || 'trip-1');
          return new Response(JSON.stringify({
            success: true,
            message: 'Bite report sent',
            command: body.command,
            clientsSent: sentCount,
            stats: getWebSocketStats()
          }), {
            status: 200,
            headers: { 'Content-Type': 'application/json' }
          });
          
        case 'route_change':
          sentCount = await createRouteChange(body.tripId || 'trip-1');
          return new Response(JSON.stringify({
            success: true,
            message: 'Route change sent',
            command: body.command,
            clientsSent: sentCount,
            stats: getWebSocketStats()
          }), {
            status: 200,
            headers: { 'Content-Type': 'application/json' }
          });
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å FishingEvent –¥–∞–Ω–Ω—ã–º–∏
    const update: GroupTripUpdate = {
      tripId: body.tripId || 'trip-1',
      type: body.type || 'participant_joined',
      currentParticipants: body.currentParticipants || Math.floor(Math.random() * 7) + 1,
      status: body.status || 'forming',
      timestamp: new Date(),
      spotsRemaining: body.spotsRemaining || Math.floor(Math.random() * 4) + 1,
      maxParticipants: body.maxParticipants || 8,
      participantName: body.participantName || 'Test User',
      
      // üé£ FISHING EVENT DATA from request body
      eventType: body.eventType,
      skillLevel: body.skillLevel,
      socialMode: body.socialMode,
      fishingTechniques: body.fishingTechniques,
      targetSpecies: body.targetSpecies,
      equipment: body.equipment,
      weatherDependency: body.weatherDependency,
      difficultyRating: body.difficultyRating,
      pricePerPerson: body.pricePerPerson
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º broadcast
    sentCount = await broadcastGroupTripUpdate(update);
    
    return new Response(JSON.stringify({
      success: true,
      message: 'Test update broadcasted',
      update,
      clientsSent: sentCount,
      stats: getWebSocketStats()
    }), {
      status: 200,
      headers: { 'Content-Type': 'application/json' }
    });
    
  } catch (error) {
    console.error('‚ùå Error in test endpoint:', error);
    
    return new Response(JSON.stringify({
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    });
  }
}

// GET endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
export async function GET(request: NextRequest) {
  try {
    const stats = getWebSocketStats();
    
    return new Response(JSON.stringify({
      message: 'WebSocket server status',
      ...stats,
      endpoint: '/api/group-trips/ws',
      protocols: ['group-trips-v1']
    }), {
      status: 200,
      headers: { 'Content-Type': 'application/json' }
    });
  } catch (error) {
    console.error('‚ùå Error getting WebSocket stats:', error);
    
    return new Response(JSON.stringify({
      error: 'Failed to get WebSocket stats'
    }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    });
  }
}