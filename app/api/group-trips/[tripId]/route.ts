'use server';

import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { transformTripToDisplay } from '@/lib/utils/group-trips-utils';
import { BookingStatus } from '@/lib/generated/prisma';
import { broadcastGroupTripUpdate } from '../ws/route';

export async function GET(
  request: NextRequest,
  { params }: { params: { tripId: string } }
) {
  try {
    const { tripId } = params;

    if (!tripId) {
      return NextResponse.json({
        success: false,
        error: 'Trip ID is required'
      }, { status: 400 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–µ–∑–¥–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const trip = await prisma.groupTrip.findUnique({
      where: { id: tripId },
      include: {
        bookings: {
          where: {
            status: {
              in: [BookingStatus.PENDING, BookingStatus.CONFIRMED]
            }
          },
          include: {
            user: true
          }
        },
        captain: true,
        reviews: {
          include: {
            fromUser: true,
            toUser: true
          }
        }
      }
    });

    if (!trip) {
      return NextResponse.json({
        success: false,
        error: 'Trip not found'
      }, { status: 404 });
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const displayTrip = {
      ...transformTripToDisplay(trip),
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      captain: trip.captain ? {
        id: trip.captain.id,
        name: trip.captain.name,
        image: trip.captain.image,
        email: trip.captain.email
      } : null,
      reviews: trip.reviews.map(review => ({
        id: review.id,
        rating: review.rating,
        comment: review.comment,
        fromUser: {
          id: review.fromUser.id,
          name: review.fromUser.name,
          image: review.fromUser.image
        },
        toUser: {
          id: review.toUser.id,
          name: review.toUser.name,
          image: review.toUser.image
        },
        createdAt: review.createdAt,
        verified: review.verified
      })),
      // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
      detailedParticipants: trip.bookings.map(booking => ({
        id: booking.id,
        contactName: booking.contactName,
        contactPhone: booking.contactPhone,
        participants: booking.participants,
        status: booking.status,
        createdAt: booking.createdAt,
        user: booking.user ? {
          id: booking.user.id,
          name: booking.user.name,
          image: booking.user.image,
          email: booking.user.email
        } : null
      })),
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      specialNotes: trip.specialNotes,
      meetingInstructions: '–í—Å—Ç—Ä–µ—á–∞–µ–º—Å—è —É –≥–ª–∞–≤–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ –º–∞—Ä–∏–Ω—É –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –í–æ–∑—å–º–∏—Ç–µ —Å —Å–æ–±–æ–π —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–π –∫—Ä–µ–º –∏ —É–¥–æ–±–Ω—É—é –æ–±—É–≤—å.',
      cancellationPolicy: '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –∑–∞ 24 —á–∞—Å–∞ –¥–æ –ø–æ–µ–∑–¥–∫–∏. –ü—Ä–∏ –æ—Ç–º–µ–Ω–µ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 24 —á–∞—Å–∞ –≤–æ–∑–≤—Ä–∞—Ç —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 50%.',
      includedServices: [
        '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–∏–¥',
        '–†—ã–±–æ–ª–æ–≤–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
        '–ü—Ä–∏–º–∞–Ω–∫–∏ –∏ –Ω–∞–∂–∏–≤–∫–∞',
        '–°–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã–µ –∂–∏–ª–µ—Ç—ã',
        '–ù–∞–ø–∏—Ç–∫–∏ –Ω–∞ –±–æ—Ä—Ç—É',
        '–ß–∏—Å—Ç–∫–∞ —É–ª–æ–≤–∞'
      ],
      whatToBring: [
        '–°–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–π –∫—Ä–µ–º',
        '–£–¥–æ–±–Ω–∞—è –æ–±—É–≤—å',
        '–®–ª—è–ø–∞ –∏–ª–∏ –∫–µ–ø–∫–∞',
        '–ö–∞–º–µ—Ä–∞ –¥–ª—è —Ñ–æ—Ç–æ',
        '–õ–∏—á–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞'
      ]
    };

    return NextResponse.json({
      success: true,
      data: displayTrip
    });

  } catch (error) {
    console.error('Error fetching trip details:', error);
    return NextResponse.json({
      success: false,
      error: 'Failed to fetch trip details'
    }, { status: 500 });
  }
}

// PUT endpoint –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏
export async function PUT(
  request: NextRequest,
  { params }: { params: { tripId: string } }
) {
  try {
    const { tripId } = params;
    const body = await request.json();

    const updatedTrip = await prisma.groupTrip.update({
      where: { id: tripId },
      data: body,
      include: {
        bookings: {
          include: {
            user: true
          }
        },
        captain: true
      }
    });

    const displayTrip = transformTripToDisplay(updatedTrip);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    try {
      const currentParticipants = updatedTrip.bookings.reduce(
        (total: number, booking: any) => total + booking.participants,
        0
      );
      const spotsRemaining = updatedTrip.maxParticipants - currentParticipants;
      
      let status: 'forming' | 'almost_full' | 'confirmed' = 'forming';
      if (updatedTrip.status === 'CONFIRMED' || currentParticipants >= updatedTrip.minRequired) {
        status = 'confirmed';
      } else if (spotsRemaining <= 2) {
        status = 'almost_full';
      }
      
      await broadcastGroupTripUpdate({
        tripId: updatedTrip.id,
        type: 'status_changed',
        currentParticipants,
        status,
        timestamp: new Date(),
        spotsRemaining,
        maxParticipants: updatedTrip.maxParticipants
      });
      console.log('üì° Broadcasted trip update:', updatedTrip.id);
    } catch (wsError) {
      console.error('‚ùå WebSocket broadcast failed:', wsError);
    }

    return NextResponse.json({
      success: true,
      data: displayTrip
    });

  } catch (error) {
    console.error('Error updating trip:', error);
    return NextResponse.json({
      success: false,
      error: 'Failed to update trip'
    }, { status: 500 });
  }
}

// POST endpoint –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ø–æ–µ–∑–¥–∫–µ
export async function POST(
  request: NextRequest,
  { params }: { params: { tripId: string } }
) {
  try {
    const { tripId } = params;
    const body = await request.json();
    const { participants = 1, contactName, contactPhone, contactEmail, specialRequests } = body;

    if (!contactName || !contactPhone) {
      return NextResponse.json({
        success: false,
        error: 'Contact name and phone are required'
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–µ–∑–¥–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–∞
    const trip = await prisma.groupTrip.findUnique({
      where: { id: tripId },
      include: {
        bookings: {
          where: {
            status: {
              in: [BookingStatus.PENDING, BookingStatus.CONFIRMED]
            }
          }
        }
      }
    });

    if (!trip) {
      return NextResponse.json({
        success: false,
        error: 'Trip not found'
      }, { status: 404 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Å—Ç
    const currentParticipants = trip.bookings.reduce(
      (total, booking) => total + booking.participants,
      0
    );
    const availableSpots = trip.maxParticipants - currentParticipants;

    if (participants > availableSpots) {
      return NextResponse.json({
        success: false,
        error: `Not enough spots available. Only ${availableSpots} spots left.`
      }, { status: 400 });
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const newBooking = await prisma.groupBooking.create({
      data: {
        tripId,
        participants,
        totalPrice: trip.pricePerPerson.mul(participants),
        contactName,
        contactPhone,
        contactEmail,
        specialRequests,
        status: BookingStatus.CONFIRMED // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –ø–æ–µ–∑–¥–æ–∫
      }
    });

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏
    const updatedTrip = await prisma.groupTrip.findUnique({
      where: { id: tripId },
      include: {
        bookings: {
          where: {
            status: {
              in: [BookingStatus.PENDING, BookingStatus.CONFIRMED]
            }
          },
          include: {
            user: true
          }
        },
        captain: true
      }
    });

    if (updatedTrip) {
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏
      const newCurrentParticipants = updatedTrip.bookings.reduce(
        (total, booking) => total + booking.participants,
        0
      );
      const spotsRemaining = updatedTrip.maxParticipants - newCurrentParticipants;
      
      let status: 'forming' | 'almost_full' | 'confirmed' = 'forming';
      if (updatedTrip.status === 'CONFIRMED' || newCurrentParticipants >= updatedTrip.minRequired) {
        status = 'confirmed';
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if (updatedTrip.status !== 'CONFIRMED') {
          await prisma.groupTrip.update({
            where: { id: tripId },
            data: { status: 'CONFIRMED' }
          });
        }
      } else if (spotsRemaining <= 2) {
        status = 'almost_full';
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      try {
        await broadcastGroupTripUpdate({
          tripId: updatedTrip.id,
          type: 'participant_joined',
          currentParticipants: newCurrentParticipants,
          status,
          timestamp: new Date(),
          spotsRemaining,
          maxParticipants: updatedTrip.maxParticipants,
          participantName: contactName
        });
        console.log('üì° Broadcasted participant joined:', updatedTrip.id, contactName);
      } catch (wsError) {
        console.error('‚ùå WebSocket broadcast failed:', wsError);
      }

      const displayTrip = transformTripToDisplay(updatedTrip);
      
      return NextResponse.json({
        success: true,
        message: 'Successfully joined the trip!',
        data: {
          booking: newBooking,
          trip: displayTrip
        }
      });
    }

    return NextResponse.json({
      success: true,
      message: 'Successfully joined the trip!',
      data: { booking: newBooking }
    });

  } catch (error) {
    console.error('Error joining trip:', error);
    return NextResponse.json({
      success: false,
      error: 'Failed to join trip'
    }, { status: 500 });
  }
}
