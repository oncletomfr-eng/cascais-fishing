import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';

// –¢–ï–°–¢–û–í–´–ô endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ OpenAI –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export async function GET(req: NextRequest) {
  try {
    console.log('üß™ Testing OpenAI API...');
    console.log('API Key present:', !!process.env.OPENAI_API_KEY);
    console.log('API Key starts with sk-:', process.env.OPENAI_API_KEY?.startsWith('sk-'));

    if (!process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY === 'your-openai-api-key-here') {
      return NextResponse.json({
        success: false,
        error: 'OpenAI API key not configured',
        status: '‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
      });
    }

    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });

    // –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ä—ã–±–æ–ª–æ–≤–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini', // –ë–æ–ª–µ–µ –¥–µ—à–µ–≤–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      messages: [
        {
          role: 'system',
          content: `–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ä—ã–±–æ–ª–æ–≤–Ω—ã–π –≥–∏–¥ –≤ –ö–∞—à–∫–∞–π—à–µ, –ü–æ—Ä—Ç—É–≥–∞–ª–∏—è. 
          –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏ –¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Ä—ã–±–∞–ª–∫–µ.
          –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.`
        },
        {
          role: 'user',
          content: `–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:
          - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: 18¬∞C
          - –í–µ—Ç–µ—Ä: 12 —É–∑–ª–æ–≤, —Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π
          - –î–∞–≤–ª–µ–Ω–∏–µ: 1015.2 –º–±–∞—Ä
          - –í–ª–∞–∂–Ω–æ—Å—Ç—å: 65%
          - –û–±–ª–∞—á–Ω–æ—Å—Ç—å: 40%
          - –õ–æ–∫–∞—Ü–∏—è: –ö–∞—à–∫–∞–π—à (38.6964, -9.4214)
          
          –ö–∞–∫—É—é —Ä—ã–±—É –ª—É—á—à–µ –ª–æ–≤–∏—Ç—å –ø—Ä–∏ —Ç–∞–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö –∏ –∫–∞–∫—É—é —Ç–µ—Ö–Ω–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?`
        }
      ],
      max_tokens: 300,
      temperature: 0.7,
    });

    const recommendation = response.choices[0]?.message?.content;

    return NextResponse.json({
      success: true,
      status: '‚úÖ OpenAI API —Ä–∞–±–æ—Ç–∞–µ—Ç!',
      recommendation,
      usage: response.usage,
      model: response.model,
      timestamp: new Date().toISOString(),
    });

  } catch (error: any) {
    console.error('‚ùå OpenAI API Error:', error);
    
    return NextResponse.json({
      success: false,
      error: error.message,
      status: '‚ùå –û—à–∏–±–∫–∞ OpenAI API',
      details: {
        code: error.code,
        type: error.type,
        param: error.param,
      }
    }, { status: 500 });
  }
}

// POST –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
export async function POST(req: NextRequest) {
  try {
    const { weatherData, customPrompt } = await req.json();

    if (!process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY === 'your-openai-api-key-here') {
      return NextResponse.json({
        success: false,
        error: 'OpenAI API key not configured'
      });
    }

    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });

    const weatherInfo = weatherData ? `
    –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:
    - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${weatherData.temperature}¬∞C
    - –í–µ—Ç–µ—Ä: ${weatherData.windSpeed} —É–∑–ª–æ–≤, ${weatherData.windDirection}
    - –î–∞–≤–ª–µ–Ω–∏–µ: ${weatherData.pressure} –º–±–∞—Ä
    - –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${weatherData.humidity}%
    - –û–±–ª–∞—á–Ω–æ—Å—Ç—å: ${weatherData.cloudCover * 100}%
    ` : '';

    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: `–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ä—ã–±–æ–ª–æ–≤–Ω—ã–π –≥–∏–¥ –≤ –ö–∞—à–∫–∞–π—à–µ, –ü–æ—Ä—Ç—É–≥–∞–ª–∏—è. 
          –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏ –¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Ä—ã–±–∞–ª–∫–µ.
          –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "–ü—Ä–∏ —Ç–∞–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö –ª—É—á—à–µ –∏–¥—ë—Ç [–≤–∏–¥ —Ä—ã–±—ã] –Ω–∞ [—Ç–µ—Ö–Ω–∏–∫—É]"`
        },
        {
          role: 'user',
          content: customPrompt || `${weatherInfo}\n\n–ö–∞–∫—É—é —Ä—ã–±—É –∏ –∫–∞–∫ –ª—É—á—à–µ –ª–æ–≤–∏—Ç—å?`
        }
      ],
      max_tokens: 200,
      temperature: 0.7,
    });

    return NextResponse.json({
      success: true,
      recommendation: response.choices[0]?.message?.content,
      usage: response.usage,
    });

  } catch (error: any) {
    return NextResponse.json({
      success: false,
      error: error.message,
      details: error
    }, { status: 500 });
  }
}
