import { NextRequest, NextResponse } from 'next/server';
import { smartRecommendationsServiceV2 } from '@/lib/services/smart-recommendations-service-v2';

// GET - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
export async function GET(req: NextRequest) {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è OpenAI API...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ API
    const healthCheck = await smartRecommendationsServiceV2.checkAPIHealth();
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    const usageStats = await smartRecommendationsServiceV2.getUsageStats();

    return NextResponse.json({
      success: true,
      apiHealth: healthCheck,
      usageStats: usageStats,
      timestamp: new Date().toISOString(),
      message: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ API:', error);
    return NextResponse.json(
      { 
        success: false,
        message: '–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏', 
        error: error?.toString() 
      },
      { status: 500 }
    );
  }
}

// POST - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≥–æ–¥–Ω—ã—Ö AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—É—Å–ª–æ–≤–∏—è –¥–ª—è —Ö–æ—Ä–æ—à–µ–π —Ä—ã–±–∞–ª–∫–∏ –≤ –ö–∞—à–∫–∞–π—à)
    const testWeatherData = {
      temperature: body.temperature || 18,
      windSpeed: body.windSpeed || 5.5,
      windDirection: body.windDirection || 'NORTH_WEST',
      pressure: body.pressure || 1015,
      humidity: body.humidity || 70,
      cloudCover: body.cloudCover || 0.3,
      location: body.location || { lat: 38.6973, lon: -9.4208 }
    };

    console.log('üå§Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–≥–æ–¥–Ω—ã–µ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...');
    console.log('–£—Å–ª–æ–≤–∏—è:', JSON.stringify(testWeatherData, null, 2));

    const startTime = Date.now();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    const recommendation = await smartRecommendationsServiceV2.generateWeatherAIRecommendations(testWeatherData);
    
    const processingTime = Date.now() - startTime;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ API –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞
    const postHealthCheck = await smartRecommendationsServiceV2.checkAPIHealth();

    return NextResponse.json({
      success: true,
      weatherData: testWeatherData,
      recommendation: recommendation,
      performance: {
        processingTimeMs: processingTime,
        timestamp: new Date().toISOString()
      },
      apiStatus: postHealthCheck,
      message: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', error);
    
    let errorDetails: any = {
      success: false,
      message: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
      error: error?.toString(),
      timestamp: new Date().toISOString()
    };

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ OpenAI
    if (error?.message?.includes('quota')) {
      errorDetails.errorType = 'quota_exceeded';
      errorDetails.message = 'üî¥ –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ OpenAI API';
      errorDetails.solution = '–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ https://platform.openai.com/account/billing';
    } else if (error?.message?.includes('rate_limit')) {
      errorDetails.errorType = 'rate_limited';
      errorDetails.message = '‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤';
      errorDetails.solution = '–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º';
    } else {
      errorDetails.errorType = 'unknown';
    }

    return NextResponse.json(
      errorDetails,
      { status: 500 }
    );
  }
}

// PUT - —Ç–µ—Å—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–æ–≥–æ–¥–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
export async function PUT(req: NextRequest) {
  try {
    console.log('üß™ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø–æ–≥–æ–¥–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...');

    const testScenarios = [
      {
        name: '–ò–¥–µ–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è',
        data: { temperature: 20, windSpeed: 3, windDirection: 'SOUTH', pressure: 1018, humidity: 65, cloudCover: 0.1, location: { lat: 38.6973, lon: -9.4208 } }
      },
      {
        name: '–®—Ç–æ—Ä–º–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è',
        data: { temperature: 15, windSpeed: 15, windDirection: 'NORTH', pressure: 990, humidity: 85, cloudCover: 0.9, location: { lat: 38.6973, lon: -9.4208 } }
      },
      {
        name: '–ñ–∞—Ä–∫–∏–π –ª–µ—Ç–Ω–∏–π –¥–µ–Ω—å',
        data: { temperature: 28, windSpeed: 8, windDirection: 'EAST', pressure: 1025, humidity: 45, cloudCover: 0.2, location: { lat: 38.6973, lon: -9.4208 } }
      },
      {
        name: '–•–æ–ª–æ–¥–Ω—ã–π –∑–∏–º–Ω–∏–π –¥–µ–Ω—å',
        data: { temperature: 10, windSpeed: 12, windDirection: 'WEST', pressure: 1005, humidity: 80, cloudCover: 0.7, location: { lat: 38.6973, lon: -9.4208 } }
      }
    ];

    const results = [];

    for (const scenario of testScenarios) {
      try {
        console.log(`üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${scenario.name}`);
        
        const startTime = Date.now();
        const recommendation = await smartRecommendationsServiceV2.generateWeatherAIRecommendations(scenario.data);
        const processingTime = Date.now() - startTime;

        results.push({
          scenario: scenario.name,
          weatherData: scenario.data,
          recommendation: recommendation,
          processingTimeMs: processingTime,
          success: true
        });

        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
        await new Promise(resolve => setTimeout(resolve, 1000));

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "${scenario.name}":`, error);
        results.push({
          scenario: scenario.name,
          weatherData: scenario.data,
          error: error?.toString(),
          success: false
        });
      }
    }

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API
    const finalHealthCheck = await smartRecommendationsServiceV2.checkAPIHealth();
    const finalUsageStats = await smartRecommendationsServiceV2.getUsageStats();

    return NextResponse.json({
      success: true,
      testResults: results,
      summary: {
        totalTests: testScenarios.length,
        successfulTests: results.filter(r => r.success).length,
        failedTests: results.filter(r => !r.success).length,
        averageProcessingTime: results
          .filter(r => r.success && r.processingTimeMs)
          .reduce((sum, r) => sum + (r.processingTimeMs || 0), 0) / results.filter(r => r.success).length || 0
      },
      finalApiStatus: finalHealthCheck,
      finalUsageStats: finalUsageStats,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:', error);
    return NextResponse.json(
      { 
        success: false,
        message: '–û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', 
        error: error?.toString() 
      },
      { status: 500 }
    );
  }
}
