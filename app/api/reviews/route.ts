import { NextRequest } from 'next/server';
import { auth } from '@/auth';
import prisma from '@/lib/prisma';
import { revalidatePath } from 'next/cache';
import { sendGroupTripConfirmed } from '@/lib/services/email-service';


/**
 * GET /api/reviews - –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –∏–ª–∏ pending review opportunities
 * Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
 * - tripId: –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏
 * - userId: –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–ª—É—á–µ–Ω–Ω—ã–µ)
 * - fromUserId: –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã, –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
 * - pending: –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏ –±–µ–∑ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (true/false)
 */
export async function GET(request: NextRequest) {
  try {
    const url = new URL(request.url);
    const tripId = url.searchParams.get('tripId');
    const userId = url.searchParams.get('userId');
    const fromUserId = url.searchParams.get('fromUserId');
    const pending = url.searchParams.get('pending') === 'true';

    // üîÑ Handle pending review opportunities
    if (pending) {
      const session = await auth();
      if (!session?.user?.id) {
        return new Response(
          JSON.stringify({ success: false, error: 'Authentication required for pending reviews' }),
          { status: 401, headers: { 'Content-Type': 'application/json' } }
        );
      }

      // Get completed trips where user participated but hasn't left reviews for other participants
      const completedTrips = await prisma.groupTrip.findMany({
        where: {
          date: { lt: new Date() }, // Trip completed
          bookings: {
            some: {
              userId: session.user.id,
              status: 'CONFIRMED'
            }
          }
        },
        include: {
          bookings: {
            where: { 
              status: 'CONFIRMED',
              userId: { not: session.user.id } // Other participants
            },
            include: {
              user: {
                select: {
                  id: true,
                  name: true,
                  image: true,
                  email: true
                }
              }
            }
          }
        }
      });

      // Find participants the user hasn't reviewed yet
      const pendingReviews = [];
      for (const trip of completedTrips) {
        for (const booking of trip.bookings) {
          if (!booking.user) continue;
          
          // Check if user already reviewed this participant for this trip
          const existingReview = await prisma.review.findUnique({
            where: {
              tripId_fromUserId_toUserId: {
                tripId: trip.id,
                fromUserId: session.user.id,
                toUserId: booking.user.id
              }
            }
          });

          if (!existingReview) {
            pendingReviews.push({
              tripId: trip.id,
              tripTitle: trip.title || trip.description,
              tripDate: trip.date,
              timeSlot: trip.timeSlot,
              participant: booking.user
            });
          }
        }
      }

      return new Response(
        JSON.stringify({ 
          success: true, 
          pendingReviews,
          count: pendingReviews.length
        }),
        { status: 200, headers: { 'Content-Type': 'application/json' } }
      );
    }

    let whereClause: any = {};

    if (tripId) {
      whereClause.tripId = tripId;
    }

    if (userId) {
      whereClause.toUserId = userId;
    }

    if (fromUserId) {
      whereClause.fromUserId = fromUserId;
    }

    const reviews = await prisma.review.findMany({
      where: whereClause,
      include: {
        fromUser: {
          select: {
            id: true,
            name: true,
            image: true
          }
        },
        toUser: {
          select: {
            id: true,
            name: true,
            image: true
          }
        },
        trip: {
          select: {
            id: true,
            date: true,
            timeSlot: true,
            title: true
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    return new Response(
      JSON.stringify({ success: true, reviews }),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('Error fetching reviews:', error);
    return new Response(
      JSON.stringify({ success: false, error: 'Failed to fetch reviews' }),
      { status: 500, headers: { 'Content-Type': 'application/json' } }
    );
  }
}

/**
 * POST /api/reviews - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞
 * Body: { tripId, toUserId, rating, comment }
 */
export async function POST(request: NextRequest) {
  try {
    const session = await auth();
    if (!session || !session.user || !session.user.id) {
      return new Response(
        JSON.stringify({ success: false, error: 'Unauthorized' }),
        { status: 401, headers: { 'Content-Type': 'application/json' } }
      );
    }

    const { tripId, toUserId, rating, comment } = await request.json();

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!tripId || !toUserId || !rating) {
      return new Response(
        JSON.stringify({ success: false, error: 'Missing required fields' }),
        { status: 400, headers: { 'Content-Type': 'application/json' } }
      );
    }

    if (rating < 1 || rating > 5) {
      return new Response(
        JSON.stringify({ success: false, error: 'Rating must be between 1 and 5' }),
        { status: 400, headers: { 'Content-Type': 'application/json' } }
      );
    }

    if (session.user.id === toUserId) {
      return new Response(
        JSON.stringify({ success: false, error: 'Cannot review yourself' }),
        { status: 400, headers: { 'Content-Type': 'application/json' } }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–µ–∑–¥–∫–∞ –∏ –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
    const trip = await prisma.groupTrip.findUnique({
      where: { id: tripId },
      include: {
        bookings: {
          where: {
            userId: { in: [session.user.id, toUserId] },
            status: 'CONFIRMED'
          },
          select: { userId: true }
        }
      }
    });

    if (!trip) {
      return new Response(
        JSON.stringify({ success: false, error: 'Trip not found' }),
        { status: 404, headers: { 'Content-Type': 'application/json' } }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –ø–æ–µ–∑–¥–∫–∏
    const participantIds = trip.bookings.map(b => b.userId);
    const bothParticipated = participantIds.includes(session.user.id) && 
                           participantIds.includes(toUserId);

    if (!bothParticipated) {
      return new Response(
        JSON.stringify({ success: false, error: 'Both users must have participated in the trip' }),
        { status: 403, headers: { 'Content-Type': 'application/json' } }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–µ–∑–¥–∫–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–¥–∞—Ç–∞ –ø—Ä–æ—à–ª–∞)
    const tripDate = new Date(trip.date);
    const now = new Date();
    if (tripDate > now) {
      return new Response(
        JSON.stringify({ success: false, error: 'Trip has not completed yet' }),
        { status: 400, headers: { 'Content-Type': 'application/json' } }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–∑—ã–≤ –æ–± —ç—Ç–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ –¥–ª—è —ç—Ç–æ–π –ø–æ–µ–∑–¥–∫–∏
    const existingReview = await prisma.review.findUnique({
      where: {
        tripId_fromUserId_toUserId: {
          tripId,
          fromUserId: session.user.id,
          toUserId
        }
      }
    });

    if (existingReview) {
      return new Response(
        JSON.stringify({ success: false, error: 'Review already exists' }),
        { status: 409, headers: { 'Content-Type': 'application/json' } }
      );
    }

    // –°–æ–∑–¥–∞–µ–º –æ—Ç–∑—ã–≤
    const review = await prisma.review.create({
      data: {
        tripId,
        fromUserId: session.user.id,
        toUserId,
        rating,
        comment,
        verified: true // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, —Ç–∞–∫ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã
      },
      include: {
        fromUser: {
          select: {
            id: true,
            name: true,
            image: true
          }
        },
        toUser: {
          select: {
            id: true,
            name: true,
            image: true
          }
        },
        trip: {
          select: {
            id: true,
            date: true,
            timeSlot: true,
            title: true
          }
        }
      }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ—Ç–∑—ã–≤–∞
    await updateUserRating(toUserId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω
    await awardReviewBadges(session.user.id, toUserId);

    console.log(`‚úÖ Review created: ${session.user.id} ‚Üí ${toUserId} (${rating}‚≠ê)`);

    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à
    revalidatePath('/profile');
    revalidatePath(`/profile/${toUserId}`);

    return new Response(
      JSON.stringify({ success: true, review }),
      { status: 201, headers: { 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('Error creating review:', error);
    return new Response(
      JSON.stringify({ success: false, error: 'Failed to create review' }),
      { status: 500, headers: { 'Content-Type': 'application/json' } }
    );
  }
}

/**
 * Send review reminders via separate endpoint to avoid conflicts
 * PUT /api/reviews - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
 * Body: { action: 'send_reminders', tripId?: string }
 */
export async function PUT(request: NextRequest) {
  try {
    const session = await auth();
    if (!session?.user?.id) {
      return new Response(
        JSON.stringify({ success: false, error: 'Authentication required' }),
        { status: 401, headers: { 'Content-Type': 'application/json' } }
      );
    }

    const { action, tripId } = await request.json();

    if (action === 'send_reminders') {
      const result = await sendReviewReminders(tripId);
      return new Response(
        JSON.stringify({ success: true, ...result }),
        { status: 200, headers: { 'Content-Type': 'application/json' } }
      );
    }

    return new Response(
      JSON.stringify({ success: false, error: 'Invalid action' }),
      { status: 400, headers: { 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('Error in review PUT:', error);
    return new Response(
      JSON.stringify({ success: false, error: 'Failed to process request' }),
      { status: 500, headers: { 'Content-Type': 'application/json' } }
    );
  }
}

/**
 * Send review reminders to participants of completed trips
 */
async function sendReviewReminders(specificTripId?: string) {
  try {
    const now = new Date();
    const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);

    let whereClause: any = {
      date: { 
        lt: oneDayAgo, // Trip completed at least 24 hours ago
        gte: new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000) // Not more than 7 days ago
      },
      status: 'CONFIRMED'
    };

    if (specificTripId) {
      whereClause.id = specificTripId;
    }

    const completedTrips = await prisma.groupTrip.findMany({
      where: whereClause,
      include: {
        bookings: {
          where: { status: 'CONFIRMED' },
          include: { user: true }
        }
      }
    });

    let emailsSent = 0;
    let errors = 0;

    for (const trip of completedTrips) {
      const participants = trip.bookings.filter(b => b.user?.email);
      
      for (const booking of participants) {
        if (!booking.user?.email) continue;

        // Count pending reviews for this participant
        const otherParticipants = participants.filter(p => p.user?.id !== booking.user?.id);
        let pendingCount = 0;

        for (const otherBooking of otherParticipants) {
          const existingReview = await prisma.review.findUnique({
            where: {
              tripId_fromUserId_toUserId: {
                tripId: trip.id,
                fromUserId: booking.user!.id,
                toUserId: otherBooking.user!.id
              }
            }
          });
          if (!existingReview) pendingCount++;
        }

        // Send email if there are pending reviews
        if (pendingCount > 0) {
          try {
            const emailResult = await sendGroupTripConfirmed(booking.user.email, {
              customerName: booking.user.name || '–£—á–∞—Å—Ç–Ω–∏–∫',
              confirmationCode: `REVIEW-${trip.id}`,
              date: new Date(trip.date).toLocaleDateString('ru-RU'),
              time: trip.timeSlot || '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
              totalParticipants: pendingCount,
              customerPhone: ''
            });

            if (emailResult.success) {
              console.log(`üìß Review reminder sent to: ${booking.user.email}`);
              emailsSent++;
            } else {
              console.warn(`‚ö†Ô∏è Failed to send review reminder to ${booking.user.email}:`, emailResult.error);
              errors++;
            }
          } catch (emailError) {
            console.error(`‚ùå Review reminder email error for ${booking.user.email}:`, emailError);
            errors++;
          }
        }
      }
    }

    return {
      emailsSent,
      errors,
      tripsProcessed: completedTrips.length,
      message: `Processed ${completedTrips.length} trips, sent ${emailsSent} reminders`
    };

  } catch (error) {
    console.error('‚ùå Error sending review reminders:', error);
    return { emailsSent: 0, errors: 1, tripsProcessed: 0, error: error.message };
  }
}

/**
 * PATCH /api/reviews/[id] - –æ—Ç–º–µ—Ç–∏—Ç—å –æ—Ç–∑—ã–≤ –∫–∞–∫ –ø–æ–ª–µ–∑–Ω—ã–π
 */
export async function PATCH(request: NextRequest) {
  try {
    const session = await auth();
    if (!session || !session.user || !session.user.id) {
      return new Response(
        JSON.stringify({ success: false, error: 'Unauthorized' }),
        { status: 401, headers: { 'Content-Type': 'application/json' } }
      );
    }

    const { reviewId, helpful } = await request.json();

    if (!reviewId || typeof helpful !== 'boolean') {
      return new Response(
        JSON.stringify({ success: false, error: 'Invalid data' }),
        { status: 400, headers: { 'Content-Type': 'application/json' } }
      );
    }

    const review = await prisma.review.findUnique({
      where: { id: reviewId }
    });

    if (!review) {
      return new Response(
        JSON.stringify({ success: false, error: 'Review not found' }),
        { status: 404, headers: { 'Content-Type': 'application/json' } }
      );
    }

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–º–µ—á–∞—Ç—å —Å–≤–æ–∏ –æ—Ç–∑—ã–≤—ã –∫–∞–∫ –ø–æ–ª–µ–∑–Ω—ã–µ
    if (review.fromUserId === session.user.id) {
      return new Response(
        JSON.stringify({ success: false, error: 'Cannot mark own review as helpful' }),
        { status: 403, headers: { 'Content-Type': 'application/json' } }
      );
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏
    const updatedReview = await prisma.review.update({
      where: { id: reviewId },
      data: {
        helpful: helpful ? review.helpful + 1 : Math.max(0, review.helpful - 1)
      }
    });

    return new Response(
      JSON.stringify({ success: true, helpful: updatedReview.helpful }),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('Error updating review helpful count:', error);
    return new Response(
      JSON.stringify({ success: false, error: 'Failed to update review' }),
      { status: 500, headers: { 'Content-Type': 'application/json' } }
    );
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
 */
async function updateUserRating(userId: string) {
  try {
    const reviews = await prisma.review.findMany({
      where: {
        toUserId: userId,
        verified: true
      },
      select: {
        rating: true
      }
    });

    if (reviews.length === 0) {
      return;
    }

    const averageRating = reviews.reduce((sum, review) => sum + review.rating, 0) / reviews.length;
    const roundedRating = Math.round(averageRating * 10) / 10; // –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 1 –∑–Ω–∞–∫–∞

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await prisma.fisherProfile.updateMany({
      where: { userId },
      data: {
        rating: roundedRating,
        totalReviews: reviews.length
      }
    });

    console.log(`üìä Updated rating for user ${userId}: ${roundedRating} (${reviews.length} reviews)`);

  } catch (error) {
    console.error('Error updating user rating:', error);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç badges —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ—Ç–∑—ã–≤–∞–º–∏
 */
async function awardReviewBadges(reviewerId: string, revieweeId: string) {
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è badges
    const { awardBadgesBasedOnActivity } = await import('../badges/route');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≥–æ, –∫—Ç–æ –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤
    await awardBadgesBasedOnActivity(reviewerId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≥–æ, –∫—Ç–æ –ø–æ–ª—É—á–∏–ª –æ—Ç–∑—ã–≤
    await awardBadgesBasedOnActivity(revieweeId);

  } catch (error) {
    console.error('Error awarding review badges:', error);
  }
}