import { NextRequest, NextResponse } from 'next/server';
import { z } from 'zod';
import { prisma } from '@/lib/prisma';
import { 
  UpdateReputationRequest, 
  ReputationSummary, 
  SocialRatings,
  ExperienceStats,
  Certificate 
} from '@/lib/types/reputation';

// üìä –°—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è API
const UpdateRatingSchema = z.object({
  userId: z.string(),
  rating: z.object({
    mentorRating: z.number().min(1).max(10).optional(),
    teamworkRating: z.number().min(1).max(10).optional(),
    reliabilityRating: z.number().min(1).max(10).optional(),
    respectRating: z.number().min(1).max(10).optional(),
  }).optional(),
  reviewerId: z.string(),
  tripId: z.string().optional(),
  comment: z.string().max(500).optional(),
});

const AddCertificateSchema = z.object({
  userId: z.string(),
  certificate: z.object({
    name: z.string(),
    issuer: z.string(),
    dateIssued: z.string(),
    expiryDate: z.string().optional(),
    category: z.enum(['SAFETY', 'TECHNIQUE', 'GUIDE', 'CAPTAIN', 'MARINE', 'ECOLOGY']),
    level: z.string().optional(),
    certificateNumber: z.string().optional(),
    description: z.string().optional(),
  }),
});

/**
 * GET /api/reputation - –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * 
 * Query params:
 * - userId: string - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
 */
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const userId = searchParams.get('userId');

    if (!userId) {
      return NextResponse.json(
        { error: 'userId is required' },
        { status: 400 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
    const profile = await prisma.fisherProfile.findUnique({
      where: { userId },
      include: {
        user: {
          select: {
            id: true,
            name: true,
            image: true,
          }
        },
        badges: true,
      }
    });

    if (!profile) {
      return NextResponse.json(
        { error: 'Profile not found' },
        { status: 404 }
      );
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é
    const socialRatings = {
      mentorRating: profile.mentorRating ? Number(profile.mentorRating) : null,
      teamworkRating: profile.teamworkRating ? Number(profile.teamworkRating) : null,
      reliabilityRating: profile.reliabilityRating ? Number(profile.reliabilityRating) : null,
      respectRating: profile.respectRating ? Number(profile.respectRating) : null,
      totalReviews: profile.totalReviews,
    };

    // –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–∞–∫ —Å—Ä–µ–¥–Ω–µ–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã)
    const hasRatings = socialRatings.mentorRating !== null && 
                       socialRatings.teamworkRating !== null && 
                       socialRatings.reliabilityRating !== null && 
                       socialRatings.respectRating !== null;
    
    const overallRating = hasRatings ? (
      socialRatings.mentorRating! + 
      socialRatings.teamworkRating! + 
      socialRatings.reliabilityRating! + 
      socialRatings.respectRating!
    ) / 4 : null;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã (—Ä–µ–π—Ç–∏–Ω–≥ >= 7)
    const strongPoints: string[] = [];
    if (socialRatings.mentorRating && socialRatings.mentorRating >= 7) strongPoints.push('–û—Ç–ª–∏—á–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –Ω–æ–≤–∏—á–∫–æ–≤');
    if (socialRatings.teamworkRating && socialRatings.teamworkRating >= 7) strongPoints.push('–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ');
    if (socialRatings.reliabilityRating && socialRatings.reliabilityRating >= 7) strongPoints.push('–í—ã—Å–æ–∫–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å');
    if (socialRatings.respectRating && socialRatings.respectRating >= 7) strongPoints.push('–°–æ–±–ª—é–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏ —ç–∫–æ–ª–æ–≥–∏—é');

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è (—Ä–µ–π—Ç–∏–Ω–≥ < 5)
    const improvementAreas: string[] = [];
    if (socialRatings.mentorRating && socialRatings.mentorRating < 5) improvementAreas.push('–ù–∞–≤—ã–∫–∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–∞');
    if (socialRatings.teamworkRating && socialRatings.teamworkRating < 5) improvementAreas.push('–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞');
    if (socialRatings.reliabilityRating && socialRatings.reliabilityRating < 5) improvementAreas.push('–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å');
    if (socialRatings.respectRating && socialRatings.respectRating < 5) improvementAreas.push('–°–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª');

    // –£—Ä–æ–≤–µ–Ω—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
    let recommendationLevel: 'HIGHLY_RECOMMENDED' | 'RECOMMENDED' | 'NEUTRAL' | 'CAUTION';
    if (!overallRating) recommendationLevel = 'NEUTRAL';
    else if (overallRating >= 8) recommendationLevel = 'HIGHLY_RECOMMENDED';
    else if (overallRating >= 6) recommendationLevel = 'RECOMMENDED';
    else if (overallRating >= 4) recommendationLevel = 'NEUTRAL';
    else recommendationLevel = 'CAUTION';

    // –°—á–µ—Ç –¥–æ–≤–µ—Ä–∏—è (0-100)
    const trustScore = overallRating ? Math.min(100, Math.round(
      (overallRating * 10) + 
      (profile.completedTrips * 2) + 
      (profile.totalReviews * 5) +
      (profile.level * 3)
    )) : null;

    const reputationSummary: ReputationSummary = {
      overallRating,
      strongPoints,
      improvementAreas,
      recommendationLevel,
      trustScore,
    };

    return NextResponse.json({
      profile: {
        ...profile,
        socialRatings,
      },
      reputation: reputationSummary,
    });

  } catch (error) {
    console.error('Error fetching reputation:', error);
    return NextResponse.json(
      { error: 'Failed to fetch reputation' },
      { status: 500 }
    );
  }
}

/**
 * POST /api/reputation - –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const data = UpdateRatingSchema.parse(body);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
    const profile = await prisma.fisherProfile.findUnique({
      where: { userId: data.userId },
    });

    if (!profile) {
      return NextResponse.json(
        { error: 'Profile not found' },
        { status: 404 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ reviewer –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å–∞–º —Å–µ–±—è
    if (data.userId === data.reviewerId) {
      return NextResponse.json(
        { error: 'Cannot rate yourself' },
        { status: 400 }
      );
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º weighted average)
    const updates: any = {};
    const currentReviews = profile.totalReviews;
    const newTotalReviews = currentReviews + 1;

    if (data.rating?.mentorRating) {
      const currentRating = Number(profile.mentorRating);
      const newRating = ((currentRating * currentReviews) + data.rating.mentorRating) / newTotalReviews;
      updates.mentorRating = Number(newRating.toFixed(1));
    }

    if (data.rating?.teamworkRating) {
      const currentRating = Number(profile.teamworkRating);
      const newRating = ((currentRating * currentReviews) + data.rating.teamworkRating) / newTotalReviews;
      updates.teamworkRating = Number(newRating.toFixed(1));
    }

    if (data.rating?.reliabilityRating) {
      const currentRating = Number(profile.reliabilityRating);
      const newRating = ((currentRating * currentReviews) + data.rating.reliabilityRating) / newTotalReviews;
      updates.reliabilityRating = Number(newRating.toFixed(1));
    }

    if (data.rating?.respectRating) {
      const currentRating = Number(profile.respectRating);
      const newRating = ((currentRating * currentReviews) + data.rating.respectRating) / newTotalReviews;
      updates.respectRating = Number(newRating.toFixed(1));
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ –æ—Ç–∑—ã–≤–æ–≤
    updates.totalReviews = newTotalReviews;

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    const updatedProfile = await prisma.fisherProfile.update({
      where: { userId: data.userId },
      data: updates,
    });

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ Reviews –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω tripId
    if (data.tripId && data.comment) {
      await prisma.review.create({
        data: {
          tripId: data.tripId,
          fromUserId: data.reviewerId,
          toUserId: data.userId,
          rating: Math.round(
            ((data.rating?.mentorRating || 0) +
             (data.rating?.teamworkRating || 0) +
             (data.rating?.reliabilityRating || 0) +
             (data.rating?.respectRating || 0)) / 4
          ),
          comment: data.comment,
        },
      });
    }

    return NextResponse.json({
      message: 'Rating updated successfully',
      profile: updatedProfile,
    });

  } catch (error) {
    console.error('Error updating rating:', error);
    return NextResponse.json(
      { error: 'Failed to update rating' },
      { status: 500 }
    );
  }
}

/**
 * PUT /api/reputation - –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
 */
export async function PUT(request: NextRequest) {
  try {
    const body = await request.json();
    const data = AddCertificateSchema.parse(body);

    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å
    const profile = await prisma.fisherProfile.findUnique({
      where: { userId: data.userId },
    });

    if (!profile) {
      return NextResponse.json(
        { error: 'Profile not found' },
        { status: 404 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
    const currentCertificates = (profile.certificates as any[]) || [];

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
    const newCertificate = {
      id: `cert_${Date.now()}`,
      ...data.certificate,
      dateIssued: new Date(data.certificate.dateIssued),
      expiryDate: data.certificate.expiryDate ? new Date(data.certificate.expiryDate) : undefined,
      verified: false, // –¢—Ä–µ–±—É–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å–ø–∏—Å–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    const updatedCertificates = [...currentCertificates, newCertificate];

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    const updatedProfile = await prisma.fisherProfile.update({
      where: { userId: data.userId },
      data: {
        certificates: updatedCertificates,
      },
    });

    return NextResponse.json({
      message: 'Certificate added successfully',
      certificate: newCertificate,
    });

  } catch (error) {
    console.error('Error adding certificate:', error);
    return NextResponse.json(
      { error: 'Failed to add certificate' },
      { status: 500 }
    );
  }
}
