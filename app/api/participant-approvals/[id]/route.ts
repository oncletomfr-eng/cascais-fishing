import { NextRequest, NextResponse } from 'next/server'
import { auth } from '@/auth'
import { PrismaClient, ApprovalStatus } from '@/lib/generated/prisma'
import { z } from 'zod'
import { revalidatePath } from 'next/cache'
import { emailService } from '@/lib/email-service'
import { format } from 'date-fns'
import { ru } from 'date-fns/locale'

const prisma = new PrismaClient()

// Schema –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è
const approvalUpdateSchema = z.object({
  status: z.enum(['APPROVED', 'REJECTED']),
  rejectedReason: z.string().optional()
})

/**
 * PATCH /api/participant-approvals/[id] - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–∞–ø–∏—Ç–∞–Ω–æ–º
 */
export async function PATCH(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    console.log('üîç Processing approval update for:', params.id)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    const session = await auth()
    if (!session?.user) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      )
    }

    const body = await request.json()
    console.log('üìã Request body:', body)

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    const validationResult = approvalUpdateSchema.safeParse(body)
    if (!validationResult.success) {
      console.error('‚ùå Validation error:', validationResult.error)
      return NextResponse.json(
        { 
          success: false, 
          error: 'Invalid request data', 
          details: validationResult.error.flatten() 
        },
        { status: 400 }
      )
    }

    const { status, rejectedReason } = validationResult.data

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–µ–∑–¥–∫–µ
    const approval = await prisma.participantApproval.findUnique({
      where: { id: params.id },
      include: {
        trip: {
          select: {
            id: true,
            captainId: true,
            status: true,
            date: true,
            timeSlot: true
          }
        },
        participant: {
          select: {
            id: true,
            name: true,
            email: true,
            fisherProfile: {
              select: {
                experience: true,
                rating: true,
                completedTrips: true,
                reliability: true
              }
            }
          }
        }
      }
    })

    if (!approval) {
      console.error('‚ùå Approval not found:', params.id)
      return NextResponse.json(
        { success: false, error: 'Approval not found' },
        { status: 404 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: —Ç–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –ø–æ–µ–∑–¥–∫–∏ –º–æ–∂–µ—Ç –æ–¥–æ–±—Ä—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if (!approval.trip.captainId || approval.trip.captainId !== session.user.id) {
      console.error('‚ùå Authorization failed. Captain:', approval.trip.captainId, 'User:', session.user.id)
      return NextResponse.json(
        { success: false, error: 'Only trip captain can approve participants' },
        { status: 403 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
    if (approval.status !== ApprovalStatus.PENDING) {
      console.error('‚ùå Approval already processed:', approval.status)
      return NextResponse.json(
        { success: false, error: 'Approval already processed' },
        { status: 409 }
      )
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–¥–æ–±—Ä–µ–Ω–∏—è
    const updatedApproval = await prisma.participantApproval.update({
      where: { id: params.id },
      data: {
        status: status as ApprovalStatus,
        approvedBy: session.user.id,
        processedAt: new Date(),
        rejectedReason: status === 'REJECTED' ? rejectedReason : null
      },
      include: {
        participant: {
          select: {
            id: true,
            name: true,
            email: true,
            fisherProfile: true
          }
        },
        trip: {
          select: {
            id: true,
            date: true,
            timeSlot: true,
            maxParticipants: true,
            minRequired: true,
            status: true,
            bookings: {
              where: { status: 'CONFIRMED' },
              select: { participants: true }
            }
          }
        }
      }
    })

    console.log('‚úÖ Approval updated:', updatedApproval.id, 'Status:', updatedApproval.status)

    // –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –æ–¥–æ–±—Ä–µ–Ω, —Å–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (status === 'APPROVED') {
      console.log('üéØ Creating group booking for approved participant')
      
      const groupBooking = await prisma.groupBooking.create({
        data: {
          tripId: approval.tripId,
          userId: approval.participantId,
          participants: 1, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —É—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏
          totalPrice: updatedApproval.trip.pricePerPerson || 95.00,
          contactName: approval.participant.name || 'Unknown',
          contactPhone: 'Approved by captain', // Placeholder
          contactEmail: approval.participant.email,
          status: 'CONFIRMED'
        }
      })

      console.log('‚úÖ Group booking created:', groupBooking.id)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–µ–∑–¥–∫–∏
      const totalParticipants = updatedApproval.trip.bookings.reduce(
        (sum, booking) => sum + booking.participants, 
        0
      ) + 1 // +1 –∑–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞

      if (totalParticipants >= updatedApproval.trip.minRequired && 
          updatedApproval.trip.status === 'FORMING') {
        
        await prisma.groupTrip.update({
          where: { id: approval.tripId },
          data: { status: 'CONFIRMED' }
        })

        console.log('üéâ Trip confirmed due to reaching minimum participants:', totalParticipants)
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É —É—á–∞—Å—Ç–Ω–∏–∫–∞
      if (approval.participant.fisherProfile) {
        await updateParticipantReputation(approval.participantId, 'APPROVED')
      }
    } else if (status === 'REJECTED') {
      // –ï—Å–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      if (approval.participant.fisherProfile) {
        await updateParticipantReputation(approval.participantId, 'REJECTED')
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É
    await sendApprovalEmailNotification(updatedApproval, status, rejectedReason);

    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
    revalidatePath('/admin/trips')
    revalidatePath(`/trip/${approval.tripId}`)

    return NextResponse.json({
      success: true,
      data: {
        approval: {
          id: updatedApproval.id,
          status: updatedApproval.status,
          processedAt: updatedApproval.processedAt,
          rejectedReason: updatedApproval.rejectedReason,
          approvedBy: updatedApproval.approvedBy
        },
        participant: {
          id: updatedApproval.participant.id,
          name: updatedApproval.participant.name,
          email: updatedApproval.participant.email
        },
        trip: {
          id: updatedApproval.trip.id,
          status: updatedApproval.trip.status
        }
      },
      message: status === 'APPROVED' 
        ? 'Participant approved and added to trip' 
        : 'Participant application rejected'
    })

  } catch (error) {
    console.error('‚ùå Error processing approval:', error)
    return NextResponse.json(
      { 
        success: false, 
        error: 'Internal server error',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  }
}

/**
 * GET /api/participant-approvals/[id] - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏
 */
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    console.log('üîç Fetching approval details for:', params.id)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    const session = await auth()
    if (!session?.user) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      )
    }

    const approval = await prisma.participantApproval.findUnique({
      where: { id: params.id },
      include: {
        participant: {
          select: {
            id: true,
            name: true,
            email: true,
            image: true,
            fisherProfile: {
              select: {
                experience: true,
                rating: true,
                completedTrips: true,
                reliability: true,
                specialties: true,
                bio: true,
                badges: {
                  select: {
                    name: true,
                    description: true,
                    icon: true,
                    category: true,
                    earnedAt: true
                  }
                }
              }
            }
          }
        },
        trip: {
          select: {
            id: true,
            date: true,
            timeSlot: true,
            captainId: true,
            maxParticipants: true,
            minRequired: true,
            status: true,
            description: true,
            meetingPoint: true,
            captain: {
              select: {
                id: true,
                name: true,
                email: true
              }
            }
          }
        }
      }
    })

    if (!approval) {
      return NextResponse.json(
        { success: false, error: 'Approval not found' },
        { status: 404 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (–∫–∞–ø–∏—Ç–∞–Ω –ø–æ–µ–∑–¥–∫–∏ –∏–ª–∏ —Å–∞–º —É—á–∞—Å—Ç–Ω–∏–∫)
    const isAuthorized = approval.trip.captainId === session.user.id || 
                        approval.participantId === session.user.id

    if (!isAuthorized) {
      return NextResponse.json(
        { success: false, error: 'Access denied' },
        { status: 403 }
      )
    }

    return NextResponse.json({
      success: true,
      data: approval
    })

  } catch (error) {
    console.error('‚ùå Error fetching approval:', error)
    return NextResponse.json(
      { 
        success: false, 
        error: 'Internal server error',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è
 */
async function updateParticipantReputation(
  participantId: string, 
  approvalResult: 'APPROVED' | 'REJECTED'
) {
  try {
    const profile = await prisma.fisherProfile.findUnique({
      where: { userId: participantId }
    })

    if (!profile) return

    let reliabilityChange = 0
    
    if (approvalResult === 'APPROVED') {
      // –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å
      reliabilityChange = Math.min(2, 100 - Number(profile.reliability))
    } else if (approvalResult === 'REJECTED') {
      // –ù–µ–≥–∞—Ç–∏–≤–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å
      reliabilityChange = -Math.min(5, Number(profile.reliability))
    }

    if (reliabilityChange !== 0) {
      await prisma.fisherProfile.update({
        where: { userId: participantId },
        data: {
          reliability: Math.max(0, Math.min(100, Number(profile.reliability) + reliabilityChange)),
          lastActiveAt: new Date()
        }
      })

      console.log(`üìä Updated reliability for ${participantId}: ${reliabilityChange > 0 ? '+' : ''}${reliabilityChange}`)
    }

  } catch (error) {
    console.error('‚ùå Error updating participant reputation:', error)
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
 */
async function sendApprovalEmailNotification(
  approval: any,
  status: ApprovalStatus,
  rejectedReason?: string
) {
  try {
    if (!approval.participant?.email) {
      console.log('‚ö†Ô∏è Participant email not found, skipping notification');
      return;
    }

    const tripDate = format(new Date(approval.trip.date), 'dd MMMM yyyy', { locale: ru });
    const tripDetailsUrl = `${process.env.NEXTAUTH_URL}/trip/${approval.tripId}`;

    await emailService.sendParticipantApprovalNotification({
      participantEmail: approval.participant.email,
      participantName: approval.participant.name || '–£—á–∞—Å—Ç–Ω–∏–∫',
      captainName: approval.trip.captain?.name || '–ö–∞–ø–∏—Ç–∞–Ω',
      tripTitle: approval.trip.description || '–†—ã–±–æ–ª–æ–≤–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞',
      tripDate,
      status,
      rejectedReason,
      tripDetailsUrl
    });

    console.log(`üìß Approval notification sent to ${approval.participant.email} (${status})`);

  } catch (error) {
    console.error('Error sending approval email notification:', error);
  }
}