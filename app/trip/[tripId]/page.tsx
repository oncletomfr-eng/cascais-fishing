/**
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä—É–ø–ø–æ–≤–æ–π —Ä—ã–±–æ–ª–æ–≤–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏
 * –í–∫–ª—é—á–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞—Ç (–§–∞–∑–∞ 3) –∏ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–µ–∑–¥–∫–µ
 */

'use client';

import React from 'react';
import { useParams } from 'next/navigation';
import { useSession } from 'next-auth/react';
import { useQuery } from '@tanstack/react-query';
import { TripChatSystem } from '@/components/chat/TripChatSystem';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { LoadingSpinner } from '@/components/ui/loading-spinner';
import { ErrorDisplay } from '@/components/ui/error-display';
import { DEFAULT_FISHING_FEATURES } from '@/lib/types/chat';
import type { GroupTripDisplay } from '@/lib/types/group-events';
import { 
  Calendar, 
  Clock, 
  Users, 
  MapPin, 
  Euro, 
  MessageCircle,
  Phone,
  Mail,
  Star,
  Fish,
  Waves,
  Sun,
  ArrowLeft
} from 'lucide-react';

interface TripParticipant {
  id: string;
  name: string;
  image?: string;
  joinedAt: Date;
  experience?: string;
}

interface TripDetails extends GroupTripDisplay {
  participants: TripParticipant[];
  captain: {
    id: string;
    name: string;
    image?: string;
    phone?: string;
    email?: string;
    rating?: number;
    experience?: string;
  };
  weather?: {
    temperature: number;
    windSpeed: number;
    conditions: string;
    isFavorable: boolean;
  };
  equipment?: string[];
  meetingInstructions?: string;
  cancellationPolicy?: string;
}

export default function TripDetailPage() {
  const params = useParams();
  const { data: session, status } = useSession();
  const tripId = params?.tripId as string;

  const [showChat, setShowChat] = React.useState(false);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–µ–∑–¥–∫–µ
  const { 
    data: trip, 
    isLoading, 
    error,
    refetch 
  } = useQuery({
    queryKey: ['trip-details', tripId],
    queryFn: async (): Promise<TripDetails> => {
      const response = await fetch(`/api/group-trips/${tripId}`);
      if (!response.ok) {
        throw new Error('Failed to fetch trip details');
      }
      const data = await response.json();
      if (!data.success) {
        throw new Error(data.error || 'Failed to fetch trip details');
      }
      return data.data;
    },
    enabled: !!tripId,
    staleTime: 2 * 60 * 1000, // 2 –º–∏–Ω—É—Ç—ã
    retry: 3,
    refetchOnWindowFocus: true
  });

  if (status === 'loading') {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <LoadingSpinner size="lg" text="–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏..." />
      </div>
    );
  }

  if (!session) {
    return (
      <div className="min-h-screen bg-gray-50 p-4">
        <div className="max-w-4xl mx-auto">
          <ErrorDisplay
            title="–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
            message="–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –ø–æ–µ–∑–¥–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"
          />
        </div>
      </div>
    );
  }

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <LoadingSpinner size="lg" text="–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–µ–∑–¥–∫–µ..." />
      </div>
    );
  }

  if (error || !trip) {
    return (
      <div className="min-h-screen bg-gray-50 p-4">
        <div className="max-w-4xl mx-auto">
          <ErrorDisplay
            title="–ü–æ–µ–∑–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            message="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–µ–∑–¥–∫–µ"
            showRetry
            onRetry={() => refetch()}
          />
        </div>
      </div>
    );
  }

  const isParticipant = trip.participants.some(p => p.id === session.user.id);
  const isCaptain = trip.captain.id === session.user.id;

  return (
    <div className="min-h-screen bg-gray-50">
      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
      <div className="bg-white border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex items-center space-x-4">
            <Button 
              variant="ghost" 
              onClick={() => window.history.back()}
              className="flex items-center space-x-2"
            >
              <ArrowLeft className="w-4 h-4" />
              <span>–ù–∞–∑–∞–¥</span>
            </Button>
            <h1 className="text-2xl font-bold text-gray-900">
              üé£ –ì—Ä—É–ø–ø–æ–≤–∞—è —Ä—ã–±–∞–ª–∫–∞ #{tripId.slice(-8)}
            </h1>
            <div className="flex items-center space-x-2">
              <Badge variant={trip.status === 'confirmed' ? 'success' : 'secondary'}>
                {trip.status === 'confirmed' ? '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞' : '–§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è'}
              </Badge>
              {trip.urgencyLevel === 'high' && (
                <Badge variant="destructive">–°—Ä–æ—á–Ω–æ</Badge>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          
          {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–µ–∑–¥–∫–µ */}
          <div className="lg:col-span-2 space-y-6">
            
            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–µ–∑–¥–∫–µ</span>
                  <div className="flex items-center space-x-2">
                    <Users className="w-4 h-4" />
                    <span className="text-sm">{trip.currentParticipants}/{trip.maxParticipants}</span>
                  </div>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="flex items-center space-x-3">
                    <Calendar className="w-5 h-5 text-blue-600" />
                    <div>
                      <p className="font-medium">{trip.date.toLocaleDateString('ru-RU', { 
                        weekday: 'long', 
                        year: 'numeric', 
                        month: 'long', 
                        day: 'numeric' 
                      })}</p>
                      <p className="text-sm text-gray-500">–î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏</p>
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-3">
                    <Clock className="w-5 h-5 text-blue-600" />
                    <div>
                      <p className="font-medium">{trip.timeDisplay}</p>
                      <p className="text-sm text-gray-500">–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</p>
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-3">
                    <MapPin className="w-5 h-5 text-blue-600" />
                    <div>
                      <p className="font-medium">{trip.meetingPoint}</p>
                      <p className="text-sm text-gray-500">–ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏</p>
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-3">
                    <Euro className="w-5 h-5 text-blue-600" />
                    <div>
                      <p className="font-medium">‚Ç¨{trip.pricePerPerson}</p>
                      <p className="text-sm text-gray-500">–ó–∞ —á–µ–ª–æ–≤–µ–∫–∞</p>
                    </div>
                  </div>
                </div>

                {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á–∏ */}
                {trip.meetingInstructions && (
                  <div className="bg-blue-50 p-4 rounded-lg">
                    <h4 className="font-medium text-blue-900 mb-2">üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á–∏</h4>
                    <p className="text-blue-700 text-sm">{trip.meetingInstructions}</p>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–ø–∏—Ç–∞–Ω–µ */}
            <Card>
              <CardHeader>
                <CardTitle>üë®‚Äç‚úàÔ∏è –ö–∞–ø–∏—Ç–∞–Ω</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="flex items-start space-x-4">
                  <img 
                    src={trip.captain.image || '/api/placeholder/60/60'} 
                    alt={trip.captain.name}
                    className="w-16 h-16 rounded-full object-cover"
                  />
                  <div className="flex-1">
                    <h3 className="text-lg font-semibold">{trip.captain.name}</h3>
                    <p className="text-gray-600">{trip.captain.experience}</p>
                    
                    {trip.captain.rating && (
                      <div className="flex items-center space-x-1 mt-1">
                        <Star className="w-4 h-4 text-yellow-400 fill-current" />
                        <span className="text-sm font-medium">{trip.captain.rating}</span>
                        <span className="text-sm text-gray-500">—Ä–µ–π—Ç–∏–Ω–≥</span>
                      </div>
                    )}
                    
                    <div className="flex space-x-4 mt-3">
                      {trip.captain.phone && (
                        <Button variant="outline" size="sm" className="flex items-center space-x-2">
                          <Phone className="w-4 h-4" />
                          <span>–ü–æ–∑–≤–æ–Ω–∏—Ç—å</span>
                        </Button>
                      )}
                      {trip.captain.email && (
                        <Button variant="outline" size="sm" className="flex items-center space-x-2">
                          <Mail className="w-4 h-4" />
                          <span>–ù–∞–ø–∏—Å–∞—Ç—å</span>
                        </Button>
                      )}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* –£—á–∞—Å—Ç–Ω–∏–∫–∏ */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span>üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ ({trip.currentParticipants}/{trip.maxParticipants})</span>
                  <div className="text-sm text-gray-500">
                    {trip.spotsRemaining} –º–µ—Å—Ç —Å–≤–æ–±–æ–¥–Ω–æ
                  </div>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  {trip.participants.map((participant) => (
                    <div key={participant.id} className="flex items-center space-x-3 p-3 bg-gray-50 rounded-lg">
                      <img 
                        src={participant.image || '/api/placeholder/40/40'}
                        alt={participant.name}
                        className="w-10 h-10 rounded-full object-cover"
                      />
                      <div>
                        <p className="font-medium">{participant.name}</p>
                        <p className="text-sm text-gray-600 capitalize">{participant.experience}</p>
                      </div>
                    </div>
                  ))}
                  
                  {/* –ü—É—Å—Ç—ã–µ –º–µ—Å—Ç–∞ */}
                  {Array.from({ length: trip.spotsRemaining }).map((_, i) => (
                    <div key={`empty-${i}`} className="flex items-center space-x-3 p-3 bg-gray-100 rounded-lg border-2 border-dashed border-gray-300">
                      <div className="w-10 h-10 rounded-full bg-gray-200 flex items-center justify-center">
                        <Users className="w-5 h-5 text-gray-400" />
                      </div>
                      <div>
                        <p className="text-gray-500">–°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ</p>
                        <p className="text-xs text-gray-400">–û–∂–∏–¥–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞</p>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ */}
          <div className="space-y-6">
            
            {/* –î–µ–π—Å—Ç–≤–∏—è */}
            <Card>
              <CardHeader>
                <CardTitle>‚ö° –î–µ–π—Å—Ç–≤–∏—è</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                {!isParticipant && !isCaptain && (
                  <Button className="w-full" size="lg">
                    –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø–æ–µ–∑–¥–∫–µ
                  </Button>
                )}
                
                {(isParticipant || isCaptain) && (
                  <Button 
                    variant="outline" 
                    className="w-full flex items-center justify-center space-x-2"
                    onClick={() => setShowChat(!showChat)}
                  >
                    <MessageCircle className="w-4 h-4" />
                    <span>{showChat ? '–°–∫—Ä—ã—Ç—å —á–∞—Ç' : '–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç'}</span>
                  </Button>
                )}
                
                <Button variant="outline" className="w-full">
                  –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–æ–µ–∑–¥–∫–æ–π
                </Button>
              </CardContent>
            </Card>

            {/* –ü–æ–≥–æ–¥–∞ */}
            {trip.weather && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    {trip.weather.isFavorable ? <Sun className="w-5 h-5 text-yellow-500" /> : <Waves className="w-5 h-5 text-blue-500" />}
                    <span>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã</span>
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div className="flex justify-between items-center">
                    <span>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</span>
                    <span className="font-medium">{trip.weather.temperature}¬∞C</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span>–í–µ—Ç–µ—Ä:</span>
                    <span className="font-medium">{trip.weather.windSpeed} –º/—Å</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span>–£—Å–ª–æ–≤–∏—è:</span>
                    <span className="font-medium">{trip.weather.conditions}</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <span className={`w-2 h-2 rounded-full ${trip.weather.isFavorable ? 'bg-green-400' : 'bg-yellow-400'}`}></span>
                    <span className="text-sm">{trip.weather.isFavorable ? '–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è' : '–£—Å–ª–æ–≤–∏—è —Å—Ä–µ–¥–Ω–∏–µ'}</span>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ */}
            {trip.equipment && (
              <Card>
                <CardHeader>
                  <CardTitle>‚öôÔ∏è –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ</CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-2">
                    {trip.equipment.map((item, index) => (
                      <li key={index} className="flex items-center space-x-2 text-sm">
                        <span className="text-green-600">‚úì</span>
                        <span>{item}</span>
                      </li>
                    ))}
                  </ul>
                </CardContent>
              </Card>
            )}

            {/* –ü–æ–ª–∏—Ç–∏–∫–∞ –æ—Ç–º–µ–Ω—ã */}
            {trip.cancellationPolicy && (
              <Card>
                <CardHeader>
                  <CardTitle>üìÑ –£—Å–ª–æ–≤–∏—è –æ—Ç–º–µ–Ω—ã</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-gray-600">{trip.cancellationPolicy}</p>
                </CardContent>
              </Card>
            )}
          </div>
        </div>

        {/* –ß–∞—Ç —Å–∏—Å—Ç–µ–º–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏ –∫–∞–ø–∏—Ç–∞–Ω—É) */}
        {showChat && (isParticipant || isCaptain) && (
          <div className="mt-8">
            <Card className="h-[600px]">
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span className="flex items-center space-x-2">
                    <MessageCircle className="w-5 h-5" />
                    <span>–ß–∞—Ç –ø–æ–µ–∑–¥–∫–∏</span>
                  </span>
                  <Button 
                    variant="ghost" 
                    size="sm"
                    onClick={() => setShowChat(false)}
                  >
                    ‚úï
                  </Button>
                </CardTitle>
              </CardHeader>
              <CardContent className="h-full pb-0">
                <div className="h-full bg-white rounded-lg overflow-hidden">
                  <TripChatSystem
                    tripId={tripId}
                    userId={session.user.id!}
                    userToken="demo-token"
                    userName={session.user.name || undefined}
                    userImage={session.user.image || undefined}
                    features={DEFAULT_FISHING_FEATURES}
                    className="h-full"
                    onChannelReady={(channel) => {
                      console.log('‚úÖ Trip chat ready:', channel.id);
                    }}
                    onError={(error) => {
                      console.error('‚ùå Trip chat error:', error);
                    }}
                  />
                </div>
              </CardContent>
            </Card>
          </div>
        )}
      </div>
    </div>
  );
}
