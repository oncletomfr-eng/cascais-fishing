'use client';

import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useSession } from 'next-auth/react';
import { useToast } from '@/hooks/use-toast';
import { 
  Trophy, 
  Medal, 
  Crown, 
  Star, 
  Gift,
  Sparkles,
  Settings,
  TestTube,
  Zap,
  Award,
  Target,
  Calendar
} from 'lucide-react';
import { RewardCard, RewardCardHorizontal } from '@/components/rewards/RewardCard';
import { RewardInventory } from '@/components/rewards/RewardInventory';
import { RewardCeremony } from '@/components/rewards/RewardCeremony';

// Mock data for testing
const MOCK_REWARDS = [
  {
    id: '1',
    name: '–ó–æ–ª–æ—Ç–æ–π –¢—Ä–æ—Ñ–µ–π –ß–µ–º–ø–∏–æ–Ω–∞',
    description: '–ó–∞ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–∏ –ø–æ —Ä—ã–±–Ω–æ–π –ª–æ–≤–ª–µ',
    type: 'TROPHY' as const,
    tier: 'GOLD' as const,
    rarity: 'EPIC' as const,
    icon: 'üèÜ',
    color: '#FFD700',
    reason: '–ü–æ–±–µ–¥–∞ –≤ —Ç—É—Ä–Ω–∏—Ä–µ "Cascais Masters 2024"',
    rank: 1,
    score: 2850,
    sourceType: 'COMPETITION',
    sourceName: 'Cascais Masters 2024'
  },
  {
    id: '2', 
    name: '–°–µ—Ä–µ–±—Ä—è–Ω–∞—è –ú–µ–¥–∞–ª—å',
    description: '–ó–∞ –≤—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–∏',
    type: 'BADGE' as const,
    tier: 'SILVER' as const,
    rarity: 'RARE' as const,
    icon: 'ü•à',
    color: '#C0C0C0',
    reason: '–í—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–º —á–µ–º–ø–∏–æ–Ω–∞—Ç–µ',
    rank: 2,
    score: 2340,
    sourceType: 'COMPETITION',
    sourceName: 'Regional Championship'
  },
  {
    id: '3',
    name: '–ö–æ—Ä–æ–Ω–∞ –ú–∞—Å—Ç–µ—Ä–∞',
    description: '–ó–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤—ã—Å—à–µ–≥–æ —É—Ä–æ–≤–Ω—è –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞',
    type: 'TITLE' as const,
    tier: 'LEGENDARY' as const,
    rarity: 'MYTHIC' as const,
    icon: 'üëë',
    color: '#9F4F96',
    reason: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 100 —É—Ä–æ–≤–Ω—è',
    sourceType: 'MILESTONE',
    sourceName: 'Level 100 Achievement'
  },
  {
    id: '4',
    name: '–ó–≤–µ–∑–¥–∞ –£—á–∞—Å—Ç–Ω–∏–∫–∞',
    description: '–ó–∞ –∞–∫—Ç–∏–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö',
    type: 'DECORATION' as const,
    tier: 'BRONZE' as const,
    rarity: 'COMMON' as const,
    icon: '‚≠ê',
    color: '#CD7F32',
    reason: '–£—á–∞—Å—Ç–∏–µ –≤ 10 —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö',
    sourceType: 'MILESTONE',
    sourceName: 'Active Participant'
  }
];

export default function TestRewardSystemPage() {
  const { data: session } = useSession();
  const { toast } = useToast();
  
  const [showCeremony, setShowCeremony] = useState(false);
  const [ceremonyRewards, setCeremonyRewards] = useState(MOCK_REWARDS);
  const [rewards, setRewards] = useState([]);
  const [loading, setLoading] = useState(false);

  // Test functions
  const testCreateReward = async () => {
    try {
      setLoading(true);
      const response = await fetch('/api/rewards?action=create', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: `Test Reward ${Date.now()}`,
          description: 'Test reward created from UI',
          type: 'TROPHY',
          tier: 'GOLD',
          icon: 'üéØ',
          rarity: 'RARE',
        }),
      });

      if (!response.ok) throw new Error('Failed to create reward');
      
      const data = await response.json();
      toast({
        title: '–£—Å–ø–µ—à–Ω–æ',
        description: '–¢–µ—Å—Ç–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —Å–æ–∑–¥–∞–Ω–∞',
      });
      
    } catch (error) {
      console.error('Error creating reward:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  const testDistributeReward = async () => {
    if (!session?.user?.id) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É',
        variant: 'destructive',
      });
      return;
    }

    try {
      setLoading(true);
      // First create a test reward
      const createResponse = await fetch('/api/rewards?action=create', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: `Test Distribution ${Date.now()}`,
          description: 'Test reward for distribution',
          type: 'BADGE',
          tier: 'SILVER',
          icon: 'üèÖ',
          rarity: 'UNCOMMON',
        }),
      });

      if (!createResponse.ok) throw new Error('Failed to create reward');
      
      const rewardData = await createResponse.json();
      
      // Then distribute it
      const distributeResponse = await fetch('/api/rewards?action=distribute', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          rewardId: rewardData.reward.id,
          userId: session.user.id,
          sourceType: 'ADMIN_GRANT',
          reason: 'Test distribution from UI',
        }),
      });

      if (!distributeResponse.ok) throw new Error('Failed to distribute reward');
      
      toast({
        title: '–£—Å–ø–µ—à–Ω–æ',
        description: '–ù–∞–≥—Ä–∞–¥–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å',
      });
      
    } catch (error) {
      console.error('Error distributing reward:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  const testAutoDistribute = async (eventType: string) => {
    try {
      setLoading(true);
      const response = await fetch('/api/rewards/auto-distribute', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          eventType,
          dryRun: true, // Test run
        }),
      });

      if (!response.ok) throw new Error('Failed to auto-distribute');
      
      const data = await response.json();
      toast({
        title: '–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è',
        description: `${data.distributed} –Ω–∞–≥—Ä–∞–¥ –±—ã–ª–æ –±—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ`,
      });
      
    } catch (error) {
      console.error('Error auto-distributing:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  const startTestCeremony = () => {
    setCeremonyRewards(MOCK_REWARDS);
    setShowCeremony(true);
  };

  const fetchRewards = async () => {
    try {
      const response = await fetch('/api/rewards');
      if (response.ok) {
        const data = await response.json();
        setRewards(data.rewards || []);
      }
    } catch (error) {
      console.error('Error fetching rewards:', error);
    }
  };

  useEffect(() => {
    fetchRewards();
  }, []);

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-white p-4">
      <div className="max-w-7xl mx-auto space-y-6">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center py-8"
        >
          <h1 className="text-4xl font-bold text-transparent bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text mb-4">
            üèÜ –°–∏—Å—Ç–µ–º–∞ –ù–∞–≥—Ä–∞–¥ - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
          </h1>
          <p className="text-xl text-gray-600 max-w-2xl mx-auto">
            –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥–∞–º–∏
          </p>
        </motion.div>

        <Tabs defaultValue="demo" className="space-y-6">
          <TabsList className="grid w-full grid-cols-5">
            <TabsTrigger value="demo">–î–µ–º–æ</TabsTrigger>
            <TabsTrigger value="cards">–ö–∞—Ä—Ç–æ—á–∫–∏</TabsTrigger>
            <TabsTrigger value="inventory">–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å</TabsTrigger>
            <TabsTrigger value="admin">–ê–¥–º–∏–Ω</TabsTrigger>
            <TabsTrigger value="ceremony">–¶–µ—Ä–µ–º–æ–Ω–∏—è</TabsTrigger>
          </TabsList>

          {/* Demo Tab */}
          <TabsContent value="demo">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {/* Quick Actions */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Zap className="w-5 h-5" />
                    –ë—ã—Å—Ç—Ä—ã–µ –î–µ–π—Å—Ç–≤–∏—è
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <Button 
                    onClick={testCreateReward} 
                    disabled={loading}
                    className="w-full"
                    variant="outline"
                  >
                    <Gift className="w-4 h-4 mr-2" />
                    –°–æ–∑–¥–∞—Ç—å –¢–µ—Å—Ç–æ–≤—É—é –ù–∞–≥—Ä–∞–¥—É
                  </Button>
                  
                  <Button 
                    onClick={testDistributeReward} 
                    disabled={loading}
                    className="w-full"
                    variant="outline"
                  >
                    <Trophy className="w-4 h-4 mr-2" />
                    –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ù–∞–≥—Ä–∞–¥—É
                  </Button>
                  
                  <Button 
                    onClick={startTestCeremony}
                    className="w-full"
                  >
                    <Sparkles className="w-4 h-4 mr-2" />
                    –ù–∞—á–∞—Ç—å –¶–µ—Ä–µ–º–æ–Ω–∏—é
                  </Button>
                </CardContent>
              </Card>

              {/* Auto Distribution Tests */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <TestTube className="w-5 h-5" />
                    –ê–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <Button 
                    onClick={() => testAutoDistribute('COMPETITION_END')} 
                    disabled={loading}
                    className="w-full"
                    variant="outline"
                  >
                    <Target className="w-4 h-4 mr-2" />
                    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
                  </Button>
                  
                  <Button 
                    onClick={() => testAutoDistribute('SEASON_END')} 
                    disabled={loading}
                    className="w-full"
                    variant="outline"
                  >
                    <Calendar className="w-4 h-4 mr-2" />
                    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –°–µ–∑–æ–Ω–∞
                  </Button>
                  
                  <Button 
                    onClick={() => testAutoDistribute('MILESTONE_REACHED')} 
                    disabled={loading}
                    className="w-full"
                    variant="outline"
                  >
                    <Award className="w-4 h-4 mr-2" />
                    –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –í–µ—Ö–∏
                  </Button>
                </CardContent>
              </Card>

              {/* System Stats */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Settings className="w-5 h-5" />
                    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –°–∏—Å—Ç–µ–º—ã
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div className="flex justify-between">
                    <span>–í—Å–µ–≥–æ –Ω–∞–≥—Ä–∞–¥:</span>
                    <Badge variant="outline">{rewards.length}</Badge>
                  </div>
                  <div className="flex justify-between">
                    <span>–ê–∫—Ç–∏–≤–Ω—ã—Ö:</span>
                    <Badge variant="outline">
                      {rewards.filter((r: any) => r.isActive).length}
                    </Badge>
                  </div>
                  <div className="flex justify-between">
                    <span>–°–µ—Å—Å–∏—è:</span>
                    <Badge variant={session ? 'default' : 'destructive'}>
                      {session ? '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' : '–ì–æ—Å—Ç—å'}
                    </Badge>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* Cards Demo */}
          <TabsContent value="cards">
            <div className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ö–∞—Ä—Ç–æ—á–µ–∫ –ù–∞–≥—Ä–∞–¥</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-8">
                    {/* Grid View */}
                    <div>
                      <h3 className="text-lg font-semibold mb-4">–°–µ—Ç–∫–∞ –Ω–∞–≥—Ä–∞–¥ (—Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã)</h3>
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                        {MOCK_REWARDS.map((reward, index) => (
                          <RewardCard
                            key={reward.id}
                            reward={reward}
                            size={index % 2 === 0 ? 'md' : 'lg'}
                            showDetails={true}
                            interactive={true}
                            onClick={(r) => toast({ title: '–ù–∞–≥—Ä–∞–¥–∞ –≤—ã–±—Ä–∞–Ω–∞', description: r.name })}
                          />
                        ))}
                      </div>
                    </div>

                    {/* Horizontal View */}
                    <div>
                      <h3 className="text-lg font-semibold mb-4">–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –≤–∏–¥</h3>
                      <div className="space-y-3">
                        {MOCK_REWARDS.map((reward) => (
                          <RewardCardHorizontal
                            key={reward.id}
                            reward={reward}
                            showDetails={true}
                            interactive={true}
                            onClick={(r) => toast({ title: '–ù–∞–≥—Ä–∞–¥–∞ –≤—ã–±—Ä–∞–Ω–∞', description: r.name })}
                          />
                        ))}
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* Inventory Tab */}
          <TabsContent value="inventory">
            <RewardInventory userId={session?.user?.id} />
          </TabsContent>

          {/* Admin Tab */}
          <TabsContent value="admin">
            <div className="grid gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ù–∞–≥—Ä–∞–¥</CardTitle>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-4">
                      <h3 className="font-semibold">–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥</h3>
                      <div className="space-y-2">
                        <Button onClick={testCreateReward} disabled={loading} className="w-full">
                          –°–æ–∑–¥–∞—Ç—å –¢–µ—Å—Ç–æ–≤—É—é –ù–∞–≥—Ä–∞–¥—É
                        </Button>
                        <p className="text-sm text-gray-600">
                          –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –Ω–∞–≥—Ä–∞–¥—É —Å —Å–ª—É—á–∞–π–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                        </p>
                      </div>
                    </div>

                    <div className="space-y-4">
                      <h3 className="font-semibold">–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</h3>
                      <div className="space-y-2">
                        <Select onValueChange={(value) => testAutoDistribute(value)}>
                          <SelectTrigger>
                            <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="COMPETITION_END">–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è</SelectItem>
                            <SelectItem value="SEASON_END">–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞</SelectItem>
                            <SelectItem value="MILESTONE_REACHED">–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤–µ—Ö–∏</SelectItem>
                            <SelectItem value="ACHIEVEMENT_UNLOCKED">–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</SelectItem>
                          </SelectContent>
                        </Select>
                        <p className="text-sm text-gray-600">
                          –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥
                        </p>
                      </div>
                    </div>
                  </div>

                  {/* Current Rewards */}
                  <div>
                    <h3 className="font-semibold mb-4">–¢–µ–∫—É—â–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –≤ —Å–∏—Å—Ç–µ–º–µ</h3>
                    <div className="max-h-64 overflow-y-auto">
                      {rewards.length === 0 ? (
                        <p className="text-gray-500 text-center py-8">–ù–∞–≥—Ä–∞–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                      ) : (
                        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-2">
                          {rewards.slice(0, 12).map((reward: any) => (
                            <div key={reward.id} className="p-3 border rounded-lg">
                              <div className="font-medium text-sm truncate">{reward.name}</div>
                              <div className="text-xs text-gray-500 flex gap-2 mt-1">
                                <Badge variant="outline" className="text-xs">
                                  {reward.tier}
                                </Badge>
                                <Badge variant="outline" className="text-xs">
                                  {reward.type}
                                </Badge>
                              </div>
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* Ceremony Tab */}
          <TabsContent value="ceremony">
            <Card>
              <CardHeader>
                <CardTitle>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¶–µ—Ä–µ–º–æ–Ω–∏–∏ –ù–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è</CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="text-center space-y-4">
                  <p className="text-gray-600">
                    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ—Ä–µ–º–æ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è —Å –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –∏ –∑–≤—É–∫–æ–≤—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
                  </p>
                  
                  <div className="flex justify-center gap-4">
                    <Button onClick={startTestCeremony} size="lg">
                      <Sparkles className="w-5 h-5 mr-2" />
                      –ù–∞—á–∞—Ç—å –¶–µ—Ä–µ–º–æ–Ω–∏—é
                    </Button>
                  </div>
                </div>

                {/* Preview of ceremony rewards */}
                <div>
                  <h3 className="font-semibold mb-4 text-center">–ù–∞–≥—Ä–∞–¥—ã –¥–ª—è —Ü–µ—Ä–µ–º–æ–Ω–∏–∏:</h3>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    {MOCK_REWARDS.map((reward) => (
                      <RewardCard
                        key={reward.id}
                        reward={reward}
                        size="sm"
                        showDetails={false}
                      />
                    ))}
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        {/* Reward Ceremony Modal */}
        <RewardCeremony
          rewards={ceremonyRewards}
          isOpen={showCeremony}
          onClose={() => setShowCeremony(false)}
          onShare={(rewards) => {
            toast({
              title: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è',
              description: `–ü–æ–¥–µ–ª–∏–ª–∏—Å—å ${rewards.length} –Ω–∞–≥—Ä–∞–¥–∞–º–∏`,
            });
          }}
          autoPlay={true}
          soundEnabled={true}
        />
      </div>
    </div>
  );
}
