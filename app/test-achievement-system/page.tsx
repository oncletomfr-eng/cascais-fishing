/**
 * Achievement System Demo Page - Testing Achievement Grid Components
 * Part of Task 9.1: Achievement Category Grid System
 */

'use client'

import React, { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { 
  Trophy, Users, TrendingUp, Target, 
  Sparkles, Crown, Award, Medal, Zap, Star
} from 'lucide-react'
import AchievementGrid from '@/components/achievements/AchievementGrid'
import ProgressDemo from '@/components/achievements/ProgressDemo'
import CelebrationDemo from '@/components/achievements/CelebrationDemo'
import { useAchievements, getAchievementIcon } from '@/lib/hooks/useAchievements'
import { useSession } from 'next-auth/react'
import { toast } from 'sonner'

// Mock data for testing when API is not available
const MOCK_ACHIEVEMENTS = [
  // Fish Species
  {
    id: '1',
    type: 'TUNA_MASTER',
    name: '–ú–∞—Å—Ç–µ—Ä —Ç—É–Ω—Ü–∞',
    description: '–ü–æ–π–º–∞–π—Ç–µ 10 —Ç—É–Ω—Ü–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏—è—Ö',
    icon: 'üêü',
    category: 'FISH_SPECIES' as const,
    rarity: 'RARE' as const,
    maxProgress: 10,
    progressStep: 1,
    lockedVisible: true,
    lockedDescVisible: true,
    isActive: true,
    unlocked: true,
    progress: 10,
    progressPercent: 100,
    unlockedAt: new Date('2024-08-15')
  },
  {
    id: '2', 
    type: 'DORADO_HUNTER',
    name: '–û—Ö–æ—Ç–Ω–∏–∫ –Ω–∞ –¥–æ—Ä–∞–¥–æ',
    description: '–ü–æ–π–º–∞–π—Ç–µ 5 –¥–æ—Ä–∞–¥–æ –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞–∑–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏',
    icon: 'üê†',
    category: 'FISH_SPECIES' as const,
    rarity: 'UNCOMMON' as const,
    maxProgress: 5,
    progressStep: 1,
    lockedVisible: true,
    lockedDescVisible: true,
    isActive: true,
    unlocked: false,
    progress: 3,
    progressPercent: 60
  },
  {
    id: '3',
    type: 'SPECIES_COLLECTOR', 
    name: '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –≤–∏–¥–æ–≤',
    description: '–ü–æ–π–º–∞–π—Ç–µ 15 —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ —Ä—ã–±',
    icon: 'üê†',
    category: 'FISH_SPECIES' as const,
    rarity: 'EPIC' as const,
    maxProgress: 15,
    progressStep: 1,
    lockedVisible: true,
    lockedDescVisible: false,
    isActive: true,
    unlocked: false,
    progress: 7,
    progressPercent: 47
  },
  
  // Techniques
  {
    id: '4',
    type: 'TROLLING_EXPERT',
    name: '–¢—Ä–æ–ª–ª–∏–Ω–≥-—ç–∫—Å–ø–µ—Ä—Ç',
    description: '–ü—Ä–∏–º–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ –≤ 15 –ø–æ–µ–∑–¥–∫–∞—Ö —Å —Ç–µ—Ö–Ω–∏–∫–æ–π —Ç—Ä–æ–ª–ª–∏–Ω–≥–∞',
    icon: 'üé£',
    category: 'TECHNIQUE' as const,
    rarity: 'COMMON' as const,
    maxProgress: 15,
    progressStep: 1,
    lockedVisible: true,
    lockedDescVisible: true,
    isActive: true,
    unlocked: true,
    progress: 15,
    progressPercent: 100,
    unlockedAt: new Date('2024-08-20')
  },
  {
    id: '5',
    type: 'TECHNIQUE_VERSATILE',
    name: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª —Ç–µ—Ö–Ω–∏–∫',
    description: '–û—Å–≤–æ–π—Ç–µ 4 —Ä–∞–∑–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Ä—ã–±–∞–ª–∫–∏',
    icon: 'üõ†Ô∏è',
    category: 'TECHNIQUE' as const,
    rarity: 'RARE' as const,
    maxProgress: 4,
    progressStep: 1,
    lockedVisible: true,
    lockedDescVisible: true,
    isActive: true,
    unlocked: false,
    progress: 2,
    progressPercent: 50
  },
  
  // Social
  {
    id: '6',
    type: 'NEWBIE_MENTOR',
    name: '–ù–∞—Å—Ç–∞–≤–Ω–∏–∫ –Ω–æ–≤–∏—á–∫–æ–≤',
    description: '–ü–æ–º–æ–≥–∏—Ç–µ 5 –Ω–æ–≤–∏—á–∫–∞–º –Ω–∞ –∏—Ö –ø–µ—Ä–≤—ã—Ö —Ä—ã–±–∞–ª–∫–∞—Ö',
    icon: 'üë®‚Äçüè´',
    category: 'SOCIAL' as const,
    rarity: 'UNCOMMON' as const,
    maxProgress: 5,
    progressStep: 1,
    lockedVisible: true,
    lockedDescVisible: true,
    isActive: true,
    unlocked: false,
    progress: 1,
    progressPercent: 20
  },
  {
    id: '7',
    type: 'COMMUNITY_BUILDER',
    name: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞',
    description: '–°–æ–∑–¥–∞–π—Ç–µ –∏ –º–æ–¥–µ—Ä–∏—Ä—É–π—Ç–µ –∞–∫—Ç–∏–≤–Ω—É—é –≥—Ä—É–ø–ø—É —Ä—ã–±–æ–ª–æ–≤–æ–≤',
    icon: 'üèòÔ∏è',
    category: 'SOCIAL' as const,
    rarity: 'LEGENDARY' as const,
    maxProgress: 1,
    progressStep: 1,
    lockedVisible: true,
    lockedDescVisible: false,
    isActive: true,
    unlocked: false,
    progress: 0,
    progressPercent: 0
  },
  
  // Geography
  {
    id: '8',
    type: 'REEF_EXPLORER',
    name: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å —Ä–∏—Ñ–æ–≤',
    description: '–ò—Å—Å–ª–µ–¥—É–π—Ç–µ 8 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∏—Ñ–æ–≤—ã—Ö –ª–æ–∫–∞—Ü–∏–π',
    icon: 'üèùÔ∏è',
    category: 'GEOGRAPHY' as const,
    rarity: 'RARE' as const,
    maxProgress: 8,
    progressStep: 1,
    lockedVisible: true,
    lockedDescVisible: true,
    isActive: true,
    unlocked: false,
    progress: 3,
    progressPercent: 37
  },
  {
    id: '9',
    type: 'WORLD_TRAVELER',
    name: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫',
    description: '–†—ã–±–∞—á—å—Ç–µ –≤ 5 —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö',
    icon: 'üåç',
    category: 'GEOGRAPHY' as const,
    rarity: 'EPIC' as const,
    maxProgress: 5,
    progressStep: 1,
    lockedVisible: true,
    lockedDescVisible: true,
    isActive: true,
    unlocked: false,
    progress: 1,
    progressPercent: 20
  },
  
  // Achievement
  {
    id: '10',
    type: 'RELIABLE_FISHER',
    name: '–ù–∞–¥–µ–∂–Ω—ã–π —Ä—ã–±–æ–ª–æ–≤',
    description: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ 100% –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞',
    icon: 'üíØ',
    category: 'ACHIEVEMENT' as const,
    rarity: 'COMMON' as const,
    maxProgress: 30,
    progressStep: 1,
    lockedVisible: true,
    lockedDescVisible: true,
    isActive: true,
    unlocked: false,
    progress: 15,
    progressPercent: 50
  },
  
  // Milestone
  {
    id: '11',
    type: 'FIRST_CATCH',
    name: '–ü–µ—Ä–≤—ã–π —É–ª–æ–≤',
    description: '–ü–æ–π–º–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Ä—ã–±—É!',
    icon: 'üé£',
    category: 'MILESTONE' as const,
    rarity: 'COMMON' as const,
    maxProgress: 1,
    progressStep: 1,
    lockedVisible: true,
    lockedDescVisible: true,
    isActive: true,
    unlocked: true,
    progress: 1,
    progressPercent: 100,
    unlockedAt: new Date('2024-07-10')
  },
  
  // Special
  {
    id: '12',
    type: 'GOLDEN_HOOK',
    name: '–ó–æ–ª–æ—Ç–æ–π –∫—Ä—é—á–æ–∫',
    description: '–û—Å–æ–±–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –≤—ã–¥–∞—é—â–∏–µ—Å—è –∑–∞—Å–ª—É–≥–∏ –ø–µ—Ä–µ–¥ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º',
    icon: 'ü™ù',
    category: 'SPECIAL' as const,
    rarity: 'MYTHIC' as const,
    maxProgress: 1,
    progressStep: 1,
    lockedVisible: false,
    lockedDescVisible: false,
    isActive: true,
    unlocked: false,
    progress: 0,
    progressPercent: 0
  },
  
  // Seasonal
  {
    id: '13',
    type: 'SUMMER_FISHERMAN',
    name: '–õ–µ—Ç–Ω–∏–π —Ä—ã–±–æ–ª–æ–≤',
    description: '–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ 10 –ª–µ—Ç–Ω–∏—Ö —Ä—ã–±–∞–ª–∫–∞—Ö –≤ –∏—é–ª–µ-–∞–≤–≥—É—Å—Ç–µ',
    icon: '‚òÄÔ∏è',
    category: 'SEASONAL' as const,
    rarity: 'UNCOMMON' as const,
    maxProgress: 10,
    progressStep: 1,
    lockedVisible: true,
    lockedDescVisible: true,
    isActive: true,
    unlocked: false,
    progress: 6,
    progressPercent: 60
  }
]

export default function TestAchievementSystemPage() {
  const { data: session } = useSession()
  const [selectedAchievement, setSelectedAchievement] = useState<any>(null)
  const [useMockData, setUseMockData] = useState(true)

  // Real API data (when available)
  const {
    achievements: apiAchievements,
    stats: apiStats,
    loading: apiLoading,
    error: apiError,
    updateProgress,
    incrementProgress
  } = useAchievements(session?.user?.id || 'demo-user')

  // Use mock data or API data
  const achievements = useMockData ? MOCK_ACHIEVEMENTS : apiAchievements
  const loading = useMockData ? false : apiLoading
  const error = useMockData ? null : apiError

  // Calculate mock stats
  const mockStats = {
    total: MOCK_ACHIEVEMENTS.length,
    unlocked: MOCK_ACHIEVEMENTS.filter(a => a.unlocked).length,
    progress: Math.round((MOCK_ACHIEVEMENTS.filter(a => a.unlocked).length / MOCK_ACHIEVEMENTS.length) * 100)
  }

  const stats = useMockData ? mockStats : apiStats

  // Handle achievement click
  const handleAchievementClick = (achievement: any) => {
    setSelectedAchievement(achievement)
    toast.info(`–í—ã–±—Ä–∞–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${achievement.name}`, {
      description: achievement.description
    })
  }

  // Test progress updates
  const handleTestProgress = async () => {
    if (useMockData) {
      toast.success('üéØ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–º–æ–∫ –¥–∞–Ω–Ω—ã–µ)')
      return
    }

    const success = await incrementProgress('DORADO_HUNTER', 1)
    if (success) {
      toast.success('‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!')
    }
  }

  // Toggle data source
  const toggleDataSource = () => {
    setUseMockData(!useMockData)
    toast.info(useMockData ? '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ API –¥–∞–Ω–Ω—ã–µ' : '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –º–æ–∫ –¥–∞–Ω–Ω—ã–µ')
  }

  return (
    <main className="container mx-auto p-4 sm:p-6 lg:p-8 min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      {/* Header */}
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        className="mb-8"
      >
        <div className="text-center mb-6">
          <div className="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-full mb-4">
            <Trophy className="w-8 h-8 text-white" />
          </div>
          <h1 className="text-4xl font-bold text-gray-900 mb-2">
            üèÜ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
          </h1>
          <p className="text-xl text-gray-600 mb-4">
            –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Achievement Grid System
          </p>
          
          {/* Stats Cards */}
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 max-w-2xl mx-auto">
            <Card className="bg-white/80 backdrop-blur">
              <CardContent className="p-4 text-center">
                <div className="text-2xl font-bold text-blue-600">{stats.total}</div>
                <div className="text-sm text-gray-600">–í—Å–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π</div>
              </CardContent>
            </Card>
            <Card className="bg-white/80 backdrop-blur">
              <CardContent className="p-4 text-center">
                <div className="text-2xl font-bold text-green-600">{stats.unlocked}</div>
                <div className="text-sm text-gray-600">–ü–æ–ª—É—á–µ–Ω–æ</div>
              </CardContent>
            </Card>
            <Card className="bg-white/80 backdrop-blur">
              <CardContent className="p-4 text-center">
                <div className="text-2xl font-bold text-purple-600">{stats.progress}%</div>
                <div className="text-sm text-gray-600">–ü—Ä–æ–≥—Ä–µ—Å—Å</div>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Controls */}
        <div className="flex flex-wrap justify-center gap-3 mb-6">
          <Button 
            onClick={toggleDataSource}
            variant={useMockData ? "default" : "outline"}
            className="gap-2"
          >
            <Target className="w-4 h-4" />
            {useMockData ? '–ú–æ–∫ –¥–∞–Ω–Ω—ã–µ' : 'API –¥–∞–Ω–Ω—ã–µ'}
          </Button>
          
          <Button onClick={handleTestProgress} className="gap-2">
            <TrendingUp className="w-4 h-4" />
            –¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
          </Button>

          {selectedAchievement && (
            <Badge variant="secondary" className="px-3 py-1">
              –í—ã–±—Ä–∞–Ω–æ: {selectedAchievement.name}
            </Badge>
          )}
        </div>
      </motion.div>

      {/* Error State */}
      {error && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="mb-6"
        >
          <Card className="border-red-200 bg-red-50">
            <CardContent className="p-4">
              <div className="flex items-center gap-2 text-red-800">
                <Trophy className="w-5 h-5" />
                <span className="font-medium">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ API –¥–∞–Ω–Ω—ã—Ö:</span>
              </div>
              <p className="text-red-700 mt-1">{error}</p>
              <Button 
                onClick={toggleDataSource} 
                variant="outline" 
                size="sm" 
                className="mt-3"
              >
                –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –º–æ–∫ –¥–∞–Ω–Ω—ã–µ
              </Button>
            </CardContent>
          </Card>
        </motion.div>
      )}

      {/* Main Content Tabs */}
      <Tabs defaultValue="grid" className="space-y-6">
        <TabsList className="grid w-full max-w-2xl mx-auto grid-cols-5">
          <TabsTrigger value="grid" className="gap-2">
            <Trophy className="w-4 h-4" />
            –°–µ—Ç–∫–∞
          </TabsTrigger>
          <TabsTrigger value="compact" className="gap-2">
            <Award className="w-4 h-4" />
            –ö–æ–º–ø–∞–∫—Ç
          </TabsTrigger>
          <TabsTrigger value="progress" className="gap-2">
            <Zap className="w-4 h-4" />
            –ü—Ä–æ–≥—Ä–µ—Å—Å
          </TabsTrigger>
          <TabsTrigger value="celebration" className="gap-2">
            <Star className="w-4 h-4" />
            –ü—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏–µ
          </TabsTrigger>
          <TabsTrigger value="info" className="gap-2">
            <Sparkles className="w-4 h-4" />
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          </TabsTrigger>
        </TabsList>

        {/* Full Achievement Grid */}
        <TabsContent value="grid" className="space-y-6">
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
          >
            <AchievementGrid
              userId={session?.user?.id || 'demo-user'}
              achievements={achievements}
              loading={loading}
              onAchievementClick={handleAchievementClick}
              showSearch={true}
              showFilter={true}
              compact={false}
            />
          </motion.div>
        </TabsContent>

        {/* Compact Achievement Grid */}
        <TabsContent value="compact" className="space-y-6">
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
          >
            <AchievementGrid
              userId={session?.user?.id || 'demo-user'}
              achievements={achievements}
              loading={loading}
              onAchievementClick={handleAchievementClick}
              showSearch={true}
              showFilter={true}
              compact={true}
            />
          </motion.div>
        </TabsContent>

        {/* Progress Tab - Animated Progress Demonstrations */}
        <TabsContent value="progress" className="space-y-6">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            <ProgressDemo />
          </motion.div>
        </TabsContent>

        {/* Celebration Tab - Achievement Celebration Effects Demo */}
        <TabsContent value="celebration" className="space-y-6">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            <CelebrationDemo />
          </motion.div>
        </TabsContent>

        {/* Information Tab */}
        <TabsContent value="info" className="space-y-6">
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
            className="max-w-4xl mx-auto"
          >
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Implementation Status */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Crown className="w-5 h-5 text-yellow-500" />
                    –°—Ç–∞—Ç—É—Å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div className="flex items-center justify-between">
                    <span>Achievement Grid</span>
                    <Badge className="bg-green-100 text-green-800">‚úÖ –ì–æ—Ç–æ–≤–æ</Badge>
                  </div>
                  <div className="flex items-center justify-between">
                    <span>–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è</span>
                    <Badge className="bg-green-100 text-green-800">‚úÖ –ì–æ—Ç–æ–≤–æ</Badge>
                  </div>
                  <div className="flex items-center justify-between">
                    <span>–ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã</span>
                    <Badge className="bg-green-100 text-green-800">‚úÖ –ì–æ—Ç–æ–≤–æ</Badge>
                  </div>
                  <div className="flex items-center justify-between">
                    <span>API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è</span>
                    <Badge className="bg-green-100 text-green-800">‚úÖ –ì–æ—Ç–æ–≤–æ</Badge>
                  </div>
                  <div className="flex items-center justify-between">
                    <span>–ü—Ä–æ–≥—Ä–µ—Å—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã</span>
                    <Badge className="bg-green-100 text-green-800">‚úÖ –ì–æ—Ç–æ–≤–æ</Badge>
                  </div>
                  <div className="flex items-center justify-between">
                    <span>–ê–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</span>
                    <Badge className="bg-yellow-100 text-yellow-800">üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ</Badge>
                  </div>
                  <div className="flex items-center justify-between">
                    <span>Celebration —ç—Ñ—Ñ–µ–∫—Ç—ã</span>
                    <Badge className="bg-gray-100 text-gray-800">‚è≥ –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è</Badge>
                  </div>
                </CardContent>
              </Card>

              {/* Feature Highlights */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Sparkles className="w-5 h-5 text-purple-500" />
                    –ö–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div className="space-y-1">
                    <div className="font-medium">8 –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π</div>
                    <div className="text-sm text-gray-600">
                      –í–∏–¥—ã —Ä—ã–±, —Ç–µ—Ö–Ω–∏–∫–∏, —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ, –≥–µ–æ–≥—Ä–∞—Ñ–∏—è –∏ –¥—Ä.
                    </div>
                  </div>
                  <div className="space-y-1">
                    <div className="font-medium">6 —É—Ä–æ–≤–Ω–µ–π —Ä–µ–¥–∫–æ—Å—Ç–∏</div>
                    <div className="text-sm text-gray-600">
                      –û—Ç –æ–±—ã—á–Ω—ã—Ö –¥–æ –º–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
                    </div>
                  </div>
                  <div className="space-y-1">
                    <div className="font-medium">–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</div>
                    <div className="text-sm text-gray-600">
                      –í–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                    </div>
                  </div>
                  <div className="space-y-1">
                    <div className="font-medium">–ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è</div>
                    <div className="text-sm text-gray-600">
                      –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —É—Ä–æ–≤–Ω—é —Ä–µ–¥–∫–æ—Å—Ç–∏
                    </div>
                  </div>
                  <div className="space-y-1">
                    <div className="font-medium">–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω</div>
                    <div className="text-sm text-gray-600">
                      –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∏ –ø–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Technical Details */}
              <Card className="md:col-span-2">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Medal className="w-5 h-5 text-blue-500" />
                    –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div>
                      <h4 className="font-medium mb-2">–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã</h4>
                      <ul className="text-sm text-gray-600 space-y-1">
                        <li>‚Ä¢ AchievementGrid.tsx</li>
                        <li>‚Ä¢ AchievementCard</li>
                        <li>‚Ä¢ CategorySection</li>
                        <li>‚Ä¢ useAchievements hook</li>
                      </ul>
                    </div>
                    <div>
                      <h4 className="font-medium mb-2">API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è</h4>
                      <ul className="text-sm text-gray-600 space-y-1">
                        <li>‚Ä¢ GET /api/achievements</li>
                        <li>‚Ä¢ POST /api/achievements/progress</li>
                        <li>‚Ä¢ PUT /api/achievements/progress</li>
                        <li>‚Ä¢ Real-time updates</li>
                      </ul>
                    </div>
                    <div>
                      <h4 className="font-medium mb-2">–ê–Ω–∏–º–∞—Ü–∏–∏</h4>
                      <ul className="text-sm text-gray-600 space-y-1">
                        <li>‚Ä¢ Framer Motion</li>
                        <li>‚Ä¢ Progress bars</li>
                        <li>‚Ä¢ Hover effects</li>
                        <li>‚Ä¢ Staggered loading</li>
                      </ul>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </motion.div>
        </TabsContent>
      </Tabs>
    </main>
  )
}
