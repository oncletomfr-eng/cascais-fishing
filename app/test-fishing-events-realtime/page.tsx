'use client';

import React, { useState, useEffect, useCallback } from 'react';
import useWebSocket, { ReadyState } from 'react-use-websocket';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { 
  CloudRain, 
  Fish, 
  MapPin, 
  Users, 
  AlertTriangle, 
  CheckCircle,
  Clock,
  Thermometer,
  Wind,
  Waves
} from 'lucide-react';

interface FishingEvent {
  id: string;
  tripId: string;
  type: string;
  timestamp: Date;
  data: any;
}

export default function TestFishingEventsRealtime() {
  const [messageHistory, setMessageHistory] = useState<FishingEvent[]>([]);
  const [selectedEvents, setSelectedEvents] = useState<string[]>(['weather_changed', 'bite_report', 'route_changed']);
  
  const socketUrl = 'ws://localhost:3000/api/group-trips/ws';
  const { sendJsonMessage, lastMessage, readyState } = useWebSocket(socketUrl, {
    onOpen: () => {
      console.log('üîå Connected to fishing events WebSocket');
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–µ–∑–¥–∫—É
      sendJsonMessage({
        type: 'subscribe',
        tripIds: ['trip-1']
      });
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Ä—ã–±–∞–ª–∫–∏
      sendJsonMessage({
        type: 'subscribe_events',
        eventTypes: selectedEvents,
        filters: {
          weatherAlertsOnly: false,
          biteReportsMinConfidence: 'low'
        }
      });
    },
    shouldReconnect: () => true,
    reconnectAttempts: 10,
    reconnectInterval: 3000,
  });

  useEffect(() => {
    if (lastMessage !== null) {
      try {
        const data = JSON.parse(lastMessage.data);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏—è —Ä—ã–±–∞–ª–∫–∏
        if (data.type && ['weather_changed', 'bite_report', 'route_changed', 'participant_cancelled'].includes(data.type)) {
          const event: FishingEvent = {
            id: Date.now().toString(),
            tripId: data.tripId,
            type: data.type,
            timestamp: new Date(data.timestamp),
            data: data
          };
          
          setMessageHistory(prev => [event, ...prev.slice(0, 19)]); // Keep last 20 events
        }
      } catch (error) {
        console.error('‚ùå Error parsing WebSocket message:', error);
      }
    }
  }, [lastMessage]);

  const connectionStatus = {
    [ReadyState.CONNECTING]: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...',
    [ReadyState.OPEN]: '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ',
    [ReadyState.CLOSING]: '–ó–∞–∫—Ä—ã—Ç–∏–µ...',
    [ReadyState.CLOSED]: '–û—Ç–∫–ª—é—á–µ–Ω–æ',
    [ReadyState.UNINSTANTIATED]: '–ù–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ',
  }[readyState];

  const sendTestEvent = useCallback((command: string) => {
    fetch('/api/group-trips/ws', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        command,
        tripId: 'trip-1'
      })
    })
    .then(response => response.json())
    .then(data => {
      console.log(`‚úÖ ${command} event sent:`, data);
    })
    .catch(error => {
      console.error(`‚ùå Error sending ${command}:`, error);
    });
  }, []);

  const getEventIcon = (type: string) => {
    switch (type) {
      case 'weather_changed': return <CloudRain className="w-5 h-5" />;
      case 'bite_report': return <Fish className="w-5 h-5" />;
      case 'route_changed': return <MapPin className="w-5 h-5" />;
      case 'participant_cancelled': return <Users className="w-5 h-5" />;
      default: return <CheckCircle className="w-5 h-5" />;
    }
  };

  const getEventColor = (type: string) => {
    switch (type) {
      case 'weather_changed': return 'bg-blue-100 text-blue-800';
      case 'bite_report': return 'bg-green-100 text-green-800';
      case 'route_changed': return 'bg-orange-100 text-orange-800';
      case 'participant_cancelled': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const formatEventTitle = (type: string) => {
    switch (type) {
      case 'weather_changed': return 'üåä –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã';
      case 'bite_report': return 'üêü –û—Ç—á–µ—Ç –æ –∫–ª—ë–≤–µ';
      case 'route_changed': return 'üó∫Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞';
      case 'participant_cancelled': return 'üö´ –û—Ç–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞';
      default: return type;
    }
  };

  const renderEventDetails = (event: FishingEvent) => {
    const { data } = event;
    
    switch (event.type) {
      case 'weather_changed':
        return data.weatherData && (
          <div className="space-y-2">
            <div className="flex items-center space-x-4 text-sm">
              <div className="flex items-center space-x-1">
                <Thermometer className="w-4 h-4" />
                <span>{data.weatherData.temperature}¬∞C</span>
              </div>
              <div className="flex items-center space-x-1">
                <Wind className="w-4 h-4" />
                <span>{data.weatherData.windSpeed} –∫–º/—á</span>
              </div>
              <div className="flex items-center space-x-1">
                <Waves className="w-4 h-4" />
                <span>{data.weatherData.waveHeight.toFixed(1)}–º</span>
              </div>
            </div>
            <div className="text-sm">
              <strong>–£—Å–ª–æ–≤–∏—è:</strong> {data.weatherData.condition}
            </div>
            <div className="text-sm">
              <strong>–ü—Ä–æ–≥–Ω–æ–∑:</strong> {data.weatherData.forecast}
            </div>
            {data.weatherData.alertLevel !== 'info' && (
              <Alert className={data.weatherData.alertLevel === 'danger' ? 'border-red-200 bg-red-50' : 'border-yellow-200 bg-yellow-50'}>
                <AlertTriangle className="w-4 h-4" />
                <AlertDescription>{data.weatherData.alertMessage}</AlertDescription>
              </Alert>
            )}
          </div>
        );
        
      case 'bite_report':
        return data.biteReport && (
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <div className="text-sm">
                <strong>–í–∏–¥:</strong> {data.biteReport.species}
              </div>
              <Badge variant="outline" className={
                data.biteReport.confidence === 'high' ? 'bg-green-100 text-green-800' :
                data.biteReport.confidence === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                'bg-gray-100 text-gray-800'
              }>
                {data.biteReport.confidence} confidence
              </Badge>
            </div>
            <div className="grid grid-cols-2 gap-2 text-sm">
              <div><strong>–†–∞–∑–º–µ—Ä:</strong> {data.biteReport.size} —Å–º</div>
              <div><strong>–í–µ—Å:</strong> {data.biteReport.weight} –∫–≥</div>
              <div><strong>–¢–µ—Ö–Ω–∏–∫–∞:</strong> {data.biteReport.technique}</div>
              <div><strong>–ì–ª—É–±–∏–Ω–∞:</strong> {data.biteReport.depth}–º</div>
            </div>
            <div className="text-sm">
              <strong>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</strong> {data.biteReport.location}
            </div>
            <div className="text-sm">
              <strong>–ü—Ä–∏–º–∞–Ω–∫–∞:</strong> {data.biteReport.baitUsed}
            </div>
            <div className="text-sm text-gray-600">
              –û—Ç—á–µ—Ç –æ—Ç: {data.biteReport.reporterName}
            </div>
          </div>
        );
        
      case 'route_changed':
        return data.routeChange && (
          <div className="space-y-2">
            <div className="text-sm">
              <strong>–ù–æ–≤–æ–µ –º–µ—Å—Ç–æ:</strong> {data.routeChange.newLocation}
            </div>
            <div className="text-sm">
              <strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> {data.routeChange.reason}
            </div>
            {data.routeChange.coordinates && (
              <div className="text-sm">
                <strong>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong> {data.routeChange.coordinates.lat.toFixed(4)}, {data.routeChange.coordinates.lng.toFixed(4)}
              </div>
            )}
            <div className="text-sm">
              <strong>–ò–∑–º–µ–Ω–∏–ª:</strong> {data.routeChange.changedBy}
            </div>
            {data.routeChange.announcement && (
              <div className="text-sm font-medium text-blue-700">
                üí¨ {data.routeChange.announcement}
              </div>
            )}
            {data.routeChange.estimatedArrival && (
              <div className="text-sm text-gray-600">
                <Clock className="inline w-4 h-4 mr-1" />
                –ü—Ä–∏–±—ã—Ç–∏–µ: {new Date(data.routeChange.estimatedArrival).toLocaleTimeString()}
              </div>
            )}
          </div>
        );
        
      case 'participant_cancelled':
        return data.cancellationData && (
          <div className="space-y-2">
            <div className="text-sm">
              <strong>–£—á–∞—Å—Ç–Ω–∏–∫:</strong> {data.cancellationData.participantName}
            </div>
            <div className="text-sm">
              <strong>–û—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å –º–µ—Å—Ç:</strong> {data.cancellationData.spotsFreed}
            </div>
            {data.cancellationData.reason && (
              <div className="text-sm">
                <strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> {data.cancellationData.reason}
              </div>
            )}
            {data.cancellationData.refundStatus && (
              <Badge variant="outline">
                –í–æ–∑–≤—Ä–∞—Ç: {data.cancellationData.refundStatus}
              </Badge>
            )}
          </div>
        );
        
      default:
        return (
          <pre className="text-xs bg-gray-100 p-2 rounded overflow-auto max-h-32">
            {JSON.stringify(data, null, 2)}
          </pre>
        );
    }
  };

  return (
    <div className="container mx-auto p-6">
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-2">üé£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Ä—ã–±–∞–ª–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</h1>
        <p className="text-gray-600">
          –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è WebSocket —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–≥–æ–¥—ã, –∫–ª—ë–≤–∞, –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –∏ –æ—Ç–º–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Control Panel */}
        <div className="lg:col-span-1">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <div className={`w-3 h-3 rounded-full ${readyState === ReadyState.OPEN ? 'bg-green-500' : 'bg-red-500'}`} />
                <span>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</span>
              </CardTitle>
              <CardDescription>
                –°—Ç–∞—Ç—É—Å: {connectionStatus}
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <h3 className="font-semibold mb-3">üé£ –°–æ–±—ã—Ç–∏—è —Ä—ã–±–∞–ª–∫–∏</h3>
                <div className="space-y-2">
                  <Button 
                    onClick={() => sendTestEvent('weather_alert')}
                    className="w-full"
                    variant="outline"
                    disabled={readyState !== ReadyState.OPEN}
                  >
                    <CloudRain className="w-4 h-4 mr-2" />
                    –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
                  </Button>
                  <Button 
                    onClick={() => sendTestEvent('bite_report')}
                    className="w-full"
                    variant="outline"
                    disabled={readyState !== ReadyState.OPEN}
                  >
                    <Fish className="w-4 h-4 mr-2" />
                    –û—Ç—á–µ—Ç –æ –∫–ª—ë–≤–µ
                  </Button>
                  <Button 
                    onClick={() => sendTestEvent('route_change')}
                    className="w-full"
                    variant="outline"
                    disabled={readyState !== ReadyState.OPEN}
                  >
                    <MapPin className="w-4 h-4 mr-2" />
                    –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
                  </Button>
                </div>
              </div>

              <div className="pt-4 border-t">
                <div className="text-sm space-y-1">
                  <div><strong>–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:</strong> 1</div>
                  <div><strong>–ü–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –ø–æ–µ–∑–¥–∫–∏:</strong> 1</div>
                  <div><strong>–ü–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Å–æ–±—ã—Ç–∏—è:</strong> {selectedEvents.length}</div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Events Feed */}
        <div className="lg:col-span-2">
          <Card>
            <CardHeader>
              <CardTitle>üì° –õ–µ–Ω—Ç–∞ —Å–æ–±—ã—Ç–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</CardTitle>
              <CardDescription>
                –ü–æ—Å–ª–µ–¥–Ω–∏–µ {messageHistory.length} —Å–æ–±—ã—Ç–∏–π —Ä—ã–±–∞–ª–∫–∏
                {messageHistory.length === 0 && ' - –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π...'}
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4 max-h-96 overflow-y-auto">
                {messageHistory.length === 0 ? (
                  <div className="text-center text-gray-500 py-8">
                    <Fish className="w-12 h-12 mx-auto mb-2 text-gray-300" />
                    <p>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ —Å–ª–µ–≤–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π —Ä—ã–±–∞–ª–∫–∏</p>
                  </div>
                ) : (
                  messageHistory.map(event => (
                    <Card key={event.id} className="border-l-4 border-l-blue-500">
                      <CardHeader className="pb-2">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-2">
                            {getEventIcon(event.type)}
                            <span className="font-medium">
                              {formatEventTitle(event.type)}
                            </span>
                          </div>
                          <div className="flex items-center space-x-2">
                            <Badge className={getEventColor(event.type)}>
                              {event.type}
                            </Badge>
                            <span className="text-xs text-gray-500">
                              {event.timestamp.toLocaleTimeString()}
                            </span>
                          </div>
                        </div>
                      </CardHeader>
                      <CardContent className="pt-0">
                        {renderEventDetails(event)}
                      </CardContent>
                    </Card>
                  ))
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Technical Info */}
      <Card className="mt-6">
        <CardHeader>
          <CardTitle>üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</CardTitle>
        </CardHeader>
        <CardContent>
          <Tabs defaultValue="events">
            <TabsList>
              <TabsTrigger value="events">–¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π</TabsTrigger>
              <TabsTrigger value="filters">–§–∏–ª—å—Ç—Ä—ã</TabsTrigger>
              <TabsTrigger value="api">API –∫–æ–º–∞–Ω–¥—ã</TabsTrigger>
            </TabsList>
            
            <TabsContent value="events" className="mt-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <h4 className="font-semibold mb-2">üåä weather_changed</h4>
                  <p className="text-sm text-gray-600">–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ –≤–µ—Ç—Ä–µ, –≤–æ–ª–Ω–∞—Ö, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö.</p>
                </div>
                <div>
                  <h4 className="font-semibold mb-2">üêü bite_report</h4>
                  <p className="text-sm text-gray-600">–û—Ç—á–µ—Ç—ã –æ –∫–ª—ë–≤–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∏–¥–µ —Ä—ã–±—ã, —Ä–∞–∑–º–µ—Ä–µ, —Ç–µ—Ö–Ω–∏–∫–µ –ª–æ–≤–ª–∏ –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏.</p>
                </div>
                <div>
                  <h4 className="font-semibold mb-2">üó∫Ô∏è route_changed</h4>
                  <p className="text-sm text-gray-600">–ò–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –∫–∞–ø–∏—Ç–∞–Ω–æ–º —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏, –ø—Ä–∏—á–∏–Ω –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.</p>
                </div>
                <div>
                  <h4 className="font-semibold mb-2">üö´ participant_cancelled</h4>
                  <p className="text-sm text-gray-600">–û—Ç–º–µ–Ω–∞ —É—á–∞—Å—Ç–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –º–µ—Å—Ç.</p>
                </div>
              </div>
            </TabsContent>

            <TabsContent value="filters" className="mt-4">
              <div className="space-y-3">
                <div>
                  <strong>weatherAlertsOnly:</strong> —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (warning/danger)
                </div>
                <div>
                  <strong>biteReportsMinConfidence:</strong> –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–æ–≤ –æ –∫–ª—ë–≤–µ (low/medium/high)
                </div>
                <div>
                  <strong>routeChangesOnly:</strong> –ø–æ–¥–ø–∏—Å–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
                </div>
              </div>
            </TabsContent>

            <TabsContent value="api" className="mt-4">
              <div className="space-y-2 font-mono text-sm">
                <div>POST /api/group-trips/ws {"{ \"command\": \"weather_alert\" }"}</div>
                <div>POST /api/group-trips/ws {"{ \"command\": \"bite_report\" }"}</div>
                <div>POST /api/group-trips/ws {"{ \"command\": \"route_change\" }"}</div>
                <div>GET /api/group-trips/ws (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ WebSocket)</div>
              </div>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  );
}
