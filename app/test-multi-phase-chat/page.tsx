'use client'

import React, { useState, useEffect } from 'react'
import { useSession } from 'next-auth/react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'
import { 
  MessageCircle, 
  Calendar,
  Users,
  Clock,
  Cloud,
  Camera,
  MapPin,
  Lightbulb,
  Settings,
  CheckCircle,
  AlertTriangle,
  Fish,
  Waves
} from 'lucide-react'

import { MultiPhaseChatSystem } from '@/components/chat/MultiPhaseChatSystem'
import { ChatPhase, DEFAULT_PHASE_CONFIGS } from '@/lib/types/multi-phase-chat'
import { format, addDays, subDays } from 'date-fns'
import { ru } from 'date-fns/locale'

interface TestTripData {
  id: string
  name: string
  description: string
  date: Date
  participants: number
  maxParticipants: number
  status: string
}

export default function TestMultiPhaseChatPage() {
  const { data: session, status } = useSession()
  const [chatOpen, setChatOpen] = useState(false)
  const [selectedTrip, setSelectedTrip] = useState<TestTripData | null>(null)
  const [chatStats, setChatStats] = useState<any>(null)
  const [isLoading, setIsLoading] = useState(false)

  // –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–µ–∑–¥–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ–∞–∑
  const testTrips: TestTripData[] = [
    {
      id: 'test-trip-future',
      name: '–†—ã–±–∞–ª–∫–∞ –Ω–∞ –¥–æ—Ä–∞–¥—É',
      description: '–£—Ç—Ä–µ–Ω–Ω—è—è –ø–æ–µ–∑–¥–∫–∞ –∑–∞ –¥–æ—Ä–∞–¥–æ–π –≤ —Ä–∞–π–æ–Ω–µ Cascais',
      date: addDays(new Date(), 3), // –ß–µ—Ä–µ–∑ 3 –¥–Ω—è - —Ñ–∞–∑–∞ preparation
      participants: 4,
      maxParticipants: 8,
      status: 'FORMING'
    },
    {
      id: 'test-trip-today',
      name: '–ì–ª—É–±–æ–∫–æ–≤–æ–¥–Ω–∞—è —Ä—ã–±–∞–ª–∫–∞',
      description: '–û—Ö–æ—Ç–∞ –Ω–∞ –∫—Ä—É–ø–Ω—É—é —Ä—ã–±—É –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –æ–∫–µ–∞–Ω–µ',
      date: new Date(), // –°–µ–≥–æ–¥–Ω—è - —Ñ–∞–∑–∞ live
      participants: 6,
      maxParticipants: 8,
      status: 'CONFIRMED'
    },
    {
      id: 'test-trip-past',
      name: '–í–µ—á–µ—Ä–Ω—è—è –ª–æ–≤–ª—è —Ç—É–Ω—Ü–∞',
      description: '–£—Å–ø–µ—à–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞ –∑–∞ —Ç—É–Ω—Ü–æ–º –Ω–∞ –∑–∞–∫–∞—Ç–µ',
      date: subDays(new Date(), 2), // 2 –¥–Ω—è –Ω–∞–∑–∞–¥ - —Ñ–∞–∑–∞ debrief
      participants: 8,
      maxParticipants: 8,
      status: 'COMPLETED'
    }
  ]

  // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É –¥–ª—è –ø–æ–µ–∑–¥–∫–∏
  const getCurrentPhase = (tripDate: Date): ChatPhase => {
    const now = new Date()
    const daysDiff = (tripDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24)

    if (daysDiff > 0) return 'preparation'
    if (daysDiff > -1) return 'live'
    return 'debrief'
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞
  const loadChatStats = async (tripId: string) => {
    try {
      setIsLoading(true)
      const response = await fetch(`/api/chat/multi-phase?tripId=${tripId}`)
      if (response.ok) {
        const data = await response.json()
        setChatStats(data.data?.stats || null)
      }
    } catch (error) {
      console.error('Error loading chat stats:', error)
    } finally {
      setIsLoading(false)
    }
  }

  // –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç –¥–ª—è –ø–æ–µ–∑–¥–∫–∏
  const openChat = (trip: TestTripData) => {
    setSelectedTrip(trip)
    setChatOpen(true)
    loadChatStats(trip.id)
  }

  return (
    <div className="container mx-auto p-6 max-w-6xl">
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-2">
          üí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–Ω–æ–≥–æ—Ñ–∞–∑–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —á–∞—Ç–æ–≤
        </h1>
        <p className="text-gray-600">
          –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Stream Chat —Å —Ç—Ä–µ–º—è —Ñ–∞–∑–∞–º–∏: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞, –ø—Ä–æ—Ü–µ—Å—Å, –ø–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        </p>
      </div>

      {/* –°—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="flex items-center space-x-2 text-sm">
              <Users className="w-4 h-4" />
              <span>–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è</span>
            </CardTitle>
          </CardHeader>
          <CardContent>
            {status === 'loading' ? (
              <p className="text-sm text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
            ) : session?.user ? (
              <div className="flex items-center space-x-2">
                <CheckCircle className="w-4 h-4 text-green-500" />
                <span className="text-sm">{session.user.name}</span>
              </div>
            ) : (
              <div className="flex items-center space-x-2">
                <AlertTriangle className="w-4 h-4 text-red-500" />
                <span className="text-sm">–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω</span>
              </div>
            )}
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="flex items-center space-x-2 text-sm">
              <MessageCircle className="w-4 h-4" />
              <span>–°—Ç–∞—Ç—É—Å —á–∞—Ç–∞</span>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center space-x-2">
              <div className={`w-3 h-3 rounded-full ${chatOpen ? 'bg-green-500' : 'bg-gray-400'}`} />
              <span className="text-sm">{chatOpen ? '–û—Ç–∫—Ä—ã—Ç' : '–ó–∞–∫—Ä—ã—Ç'}</span>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="flex items-center space-x-2 text-sm">
              <Fish className="w-4 h-4" />
              <span>–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞</span>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <span className="text-sm">
              {selectedTrip?.name || '–ù–µ –≤—ã–±—Ä–∞–Ω–∞'}
            </span>
          </CardContent>
        </Card>
      </div>

      <Tabs defaultValue="trips" className="space-y-6">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="trips">–¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–µ–∑–¥–∫–∏</TabsTrigger>
          <TabsTrigger value="phases">–§–∞–∑—ã —á–∞—Ç–æ–≤</TabsTrigger>
          <TabsTrigger value="features">–§—É–Ω–∫—Ü–∏–∏</TabsTrigger>
          <TabsTrigger value="stats">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</TabsTrigger>
        </TabsList>

        {/* –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–µ–∑–¥–∫–∏ */}
        <TabsContent value="trips">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {testTrips.map((trip) => {
              const currentPhase = getCurrentPhase(trip.date)
              const phaseConfig = DEFAULT_PHASE_CONFIGS[currentPhase]
              
              return (
                <Card key={trip.id} className="border-l-4" style={{ borderLeftColor: phaseConfig.color }}>
                  <CardHeader>
                    <div className="flex items-center justify-between mb-2">
                      <CardTitle className="text-lg">{trip.name}</CardTitle>
                      <Badge style={{ backgroundColor: phaseConfig.color, color: 'white' }}>
                        {phaseConfig.phase}
                      </Badge>
                    </div>
                    <p className="text-sm text-gray-600">{trip.description}</p>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      <div className="flex items-center space-x-2 text-sm">
                        <Calendar className="w-4 h-4" />
                        <span>{format(trip.date, 'dd MMMM yyyy, HH:mm', { locale: ru })}</span>
                      </div>
                      
                      <div className="flex items-center space-x-2 text-sm">
                        <Users className="w-4 h-4" />
                        <span>{trip.participants}/{trip.maxParticipants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</span>
                      </div>

                      <div className="flex items-center space-x-2 text-sm">
                        <span className="text-lg">{phaseConfig.icon}</span>
                        <span className="font-medium">{phaseConfig.title}</span>
                      </div>
                      
                      <p className="text-xs text-gray-500">{phaseConfig.description}</p>

                      <Button 
                        onClick={() => openChat(trip)}
                        className="w-full mt-4"
                        style={{ backgroundColor: phaseConfig.color }}
                      >
                        <MessageCircle className="w-4 h-4 mr-2" />
                        –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç {phaseConfig.phase}
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              )
            })}
          </div>
        </TabsContent>

        {/* –§–∞–∑—ã —á–∞—Ç–æ–≤ */}
        <TabsContent value="phases">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {(['preparation', 'live', 'debrief'] as ChatPhase[]).map((phase) => {
              const config = DEFAULT_PHASE_CONFIGS[phase]
              
              return (
                <Card key={phase} className="border-l-4" style={{ borderLeftColor: config.color }}>
                  <CardHeader>
                    <CardTitle className="flex items-center space-x-2">
                      <span className="text-2xl">{config.icon}</span>
                      <span>{config.title}</span>
                    </CardTitle>
                    <p className="text-gray-600">{config.description}</p>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div>
                        <h4 className="font-semibold mb-2">–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</h4>
                        <div className="flex flex-wrap gap-2">
                          {config.allowedFeatures.map((feature) => (
                            <Badge key={feature} variant="outline" className="text-xs">
                              {feature === 'weather_updates' && 'üå§Ô∏è –ü–æ–≥–æ–¥–∞'}
                              {feature === 'catch_photos' && 'üì∏ –§–æ—Ç–æ'}
                              {feature === 'location_sharing' && 'üìç –õ–æ–∫–∞—Ü–∏—è'}
                              {feature === 'tip_sharing' && 'üí° –°–æ–≤–µ—Ç—ã'}
                              {feature === 'text_messages' && 'üí¨ –¢–µ–∫—Å—Ç'}
                              {feature === 'polls' && 'üìä –û–ø—Ä–æ—Å—ã'}
                              {feature === 'file_sharing' && 'üìé –§–∞–π–ª—ã'}
                              {feature === 'voice_messages' && 'üé§ –ì–æ–ª–æ—Å'}
                            </Badge>
                          ))}
                        </div>
                      </div>

                      <div>
                        <h4 className="font-semibold mb-2">–ê–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è:</h4>
                        <div className="text-sm space-y-1">
                          {config.autoMessages.map((msg) => (
                            <div key={msg.id} className="p-2 bg-gray-50 rounded">
                              <span className="font-medium">{msg.type}:</span> {msg.content}
                            </div>
                          ))}
                        </div>
                      </div>

                      {config.timeRestrictions && (
                        <div>
                          <h4 className="font-semibold mb-2">–í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</h4>
                          <div className="text-sm text-gray-600">
                            {config.timeRestrictions.activeBefore && 
                              <p>–ê–∫—Ç–∏–≤–µ–Ω –∑–∞ {config.timeRestrictions.activeBefore} –¥–Ω–µ–π</p>
                            }
                            {config.timeRestrictions.activeAfter && 
                              <p>–ê–∫—Ç–∏–≤–µ–Ω {config.timeRestrictions.activeAfter} –¥–Ω–µ–π –ø–æ—Å–ª–µ</p>
                            }
                            {config.timeRestrictions.autoArchive && 
                              <p>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ</p>
                            }
                          </div>
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
              )
            })}
          </div>
        </TabsContent>

        {/* –§—É–Ω–∫—Ü–∏–∏ */}
        <TabsContent value="features">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <Card className="border-l-4 border-l-blue-500">
              <CardHeader className="pb-2">
                <CardTitle className="flex items-center space-x-2 text-sm">
                  <Cloud className="w-5 h-5 text-blue-500" />
                  <span>Weather Updates</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-gray-600 mb-3">
                  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ —Ä—É—á–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                </p>
                <ul className="text-xs space-y-1 text-gray-500">
                  <li>‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç—å</li>
                  <li>‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</li>
                  <li>‚Ä¢ –í—ã—Å–æ—Ç–∞ –≤–æ–ª–Ω</li>
                  <li>‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑—ã –æ—Ç –∫–∞–ø–∏—Ç–∞–Ω–∞</li>
                </ul>
              </CardContent>
            </Card>

            <Card className="border-l-4 border-l-green-500">
              <CardHeader className="pb-2">
                <CardTitle className="flex items-center space-x-2 text-sm">
                  <Camera className="w-5 h-5 text-green-500" />
                  <span>Catch Photos</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-gray-600 mb-3">
                  –û–±–º–µ–Ω —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ —É–ª–æ–≤–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
                </p>
                <ul className="text-xs space-y-1 text-gray-500">
                  <li>‚Ä¢ –í–∏–¥ –∏ —Ä–∞–∑–º–µ—Ä —Ä—ã–±—ã</li>
                  <li>‚Ä¢ GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</li>
                  <li>‚Ä¢ –í—Ä–µ–º—è –∏ —Ç–µ—Ö–Ω–∏–∫–∞ –ª–æ–≤–ª–∏</li>
                  <li>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ø—Ä–∏–º–∞–Ω–∫–∞</li>
                </ul>
              </CardContent>
            </Card>

            <Card className="border-l-4 border-l-red-500">
              <CardHeader className="pb-2">
                <CardTitle className="flex items-center space-x-2 text-sm">
                  <MapPin className="w-5 h-5 text-red-500" />
                  <span>Location Sharing</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-gray-600 mb-3">
                  –û–±–º–µ–Ω –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                </p>
                <ul className="text-xs space-y-1 text-gray-500">
                  <li>‚Ä¢ –õ—É—á—à–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –ª–æ–≤–ª–∏</li>
                  <li>‚Ä¢ –ü–æ–∑–∏—Ü–∏—è –ª–æ–¥–∫–∏</li>
                  <li>‚Ä¢ –û–ø–∞—Å–Ω—ã–µ –∑–æ–Ω—ã</li>
                  <li>‚Ä¢ –ú–∞—Ä—à—Ä—É—Ç—ã —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è</li>
                </ul>
              </CardContent>
            </Card>

            <Card className="border-l-4 border-l-yellow-500">
              <CardHeader className="pb-2">
                <CardTitle className="flex items-center space-x-2 text-sm">
                  <Lightbulb className="w-5 h-5 text-yellow-500" />
                  <span>Tip Sharing</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-gray-600 mb-3">
                  –û–±–º–µ–Ω —Å–æ–≤–µ—Ç–∞–º–∏ –∏ —Ç–µ—Ö–Ω–∏–∫–∞–º–∏ –æ—Ç –æ–ø—ã—Ç–Ω—ã—Ö —Ä—ã–±–æ–ª–æ–≤–æ–≤
                </p>
                <ul className="text-xs space-y-1 text-gray-500">
                  <li>‚Ä¢ –¢–µ—Ö–Ω–∏–∫–∏ –ª–æ–≤–ª–∏</li>
                  <li>‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–Ω–∞—Å—Ç–µ–π</li>
                  <li>‚Ä¢ –°–æ–≤–µ—Ç—ã –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</li>
                  <li>‚Ä¢ –õ—É—á—à–∏–µ –ø—Ä–∏–º–∞–Ω–∫–∏</li>
                </ul>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <TabsContent value="stats">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Settings className="w-5 h-5" />
                <span>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞</span>
                {selectedTrip && (
                  <Badge variant="outline">{selectedTrip.name}</Badge>
                )}
              </CardTitle>
            </CardHeader>
            <CardContent>
              {isLoading ? (
                <div className="text-center py-8">
                  <Clock className="w-8 h-8 mx-auto mb-2 text-gray-400 animate-spin" />
                  <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</p>
                </div>
              ) : chatStats ? (
                <div className="space-y-4">
                  {Object.entries(chatStats).map(([phase, stats]: [string, any]) => {
                    const config = DEFAULT_PHASE_CONFIGS[phase as ChatPhase]
                    return (
                      <div key={phase} className="p-4 border rounded" style={{ borderColor: config?.color }}>
                        <h4 className="font-semibold flex items-center space-x-2 mb-2">
                          <span>{config?.icon}</span>
                          <span>{config?.title}</span>
                        </h4>
                        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                          <div>
                            <span className="text-gray-600">–°–æ–æ–±—â–µ–Ω–∏–π:</span>
                            <div className="font-bold">{stats.messagesCount || 0}</div>
                          </div>
                          <div>
                            <span className="text-gray-600">–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</span>
                            <div className="font-bold">{stats.participantsCount || 0}</div>
                          </div>
                          <div>
                            <span className="text-gray-600">–ö–∞–Ω–∞–ª:</span>
                            <div className={stats.channelExists ? 'text-green-600' : 'text-red-600'}>
                              {stats.channelExists ? '–°—É—â–µ—Å—Ç–≤—É–µ—Ç' : '–ù–µ –Ω–∞–π–¥–µ–Ω'}
                            </div>
                          </div>
                          <div>
                            <span className="text-gray-600">–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</span>
                            <div className="text-xs">
                              {stats.lastActivity ? 
                                format(new Date(stats.lastActivity), 'dd.MM HH:mm', { locale: ru }) : 
                                '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
                              }
                            </div>
                          </div>
                        </div>
                      </div>
                    )
                  })}
                </div>
              ) : (
                <div className="text-center py-8">
                  <MessageCircle className="w-12 h-12 mx-auto mb-2 text-gray-300" />
                  <p className="text-gray-600">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–µ–∑–¥–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞</p>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* –ú–Ω–æ–≥–æ—Ñ–∞–∑–Ω—ã–π —á–∞—Ç */}
      {selectedTrip && (
        <MultiPhaseChatSystem
          tripId={selectedTrip.id}
          tripDate={selectedTrip.date}
          isOpen={chatOpen}
          onToggle={() => setChatOpen(!chatOpen)}
        />
      )}
    </div>
  )
}
