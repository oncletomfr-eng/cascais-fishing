'use client';

import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { toast } from 'sonner';

import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { 
  Star,
  Award,
  Users,
  Shield,
  Heart,
  MessageSquare,
} from 'lucide-react';

// üìù –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
const RatingFormSchema = z.object({
  mentorRating: z.number().min(1).max(10).optional(),
  teamworkRating: z.number().min(1).max(10).optional(), 
  reliabilityRating: z.number().min(1).max(10).optional(),
  respectRating: z.number().min(1).max(10).optional(),
  comment: z.string().min(10).max(500).optional(),
});

type RatingFormData = z.infer<typeof RatingFormSchema>;

// üé® –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–ª–∞–π–¥–µ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
interface RatingSliderProps {
  label: string;
  description: string;
  icon: React.ReactNode;
  value: number;
  onChange: (value: number) => void;
  color: string;
}

const RatingSlider: React.FC<RatingSliderProps> = ({
  label,
  description,
  icon,
  value,
  onChange,
  color,
}) => {
  return (
    <div className="space-y-3">
      <div className="flex items-center gap-2">
        {icon}
        <div>
          <div className="font-medium">{label}</div>
          <div className="text-sm text-gray-600">{description}</div>
        </div>
      </div>
      
      <div className="flex items-center gap-3">
        <span className="text-sm font-medium min-w-[1rem]">1</span>
        <div className="flex-1 space-y-2">
          <input
            type="range"
            min="1"
            max="10"
            value={value}
            onChange={(e) => onChange(parseInt(e.target.value))}
            className={`w-full h-2 rounded-lg appearance-none cursor-pointer ${color}`}
            style={{
              background: `linear-gradient(to right, ${color} 0%, ${color} ${value * 10}%, #e5e7eb ${value * 10}%, #e5e7eb 100%)`
            }}
          />
          <div className="flex items-center gap-2">
            <Progress value={value * 10} className={`flex-1 h-2`} />
            <Badge variant="outline" className="min-w-[3rem] justify-center">
              {value}/10
            </Badge>
          </div>
        </div>
        <span className="text-sm font-medium min-w-[2rem]">10</span>
      </div>
    </div>
  );
};

// üìä –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–∏–∞–ª–æ–≥–∞ –æ—Ü–µ–Ω–∫–∏
interface RateUserDialogProps {
  userId: string;
  userName: string;
  tripId?: string;
  reviewerId: string;
  onRatingAdded?: () => void;
  trigger?: React.ReactNode;
}

export const RateUserDialog: React.FC<RateUserDialogProps> = ({
  userId,
  userName,
  tripId,
  reviewerId,
  onRatingAdded,
  trigger,
}) => {
  const [open, setOpen] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const form = useForm<RatingFormData>({
    resolver: zodResolver(RatingFormSchema),
    defaultValues: {
      mentorRating: 5,
      teamworkRating: 5,
      reliabilityRating: 5,
      respectRating: 5,
      comment: '',
    },
  });

  const onSubmit = async (data: RatingFormData) => {
    try {
      setIsSubmitting(true);

      const response = await fetch('/api/reputation', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId,
          rating: {
            mentorRating: data.mentorRating,
            teamworkRating: data.teamworkRating,
            reliabilityRating: data.reliabilityRating,
            respectRating: data.respectRating,
          },
          reviewerId,
          tripId,
          comment: data.comment,
        }),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || 'Failed to submit rating');
      }

      toast.success('–†–µ–π—Ç–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!', {
        description: `–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –¥–ª—è ${userName} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞`,
      });

      setOpen(false);
      form.reset();
      onRatingAdded?.();

    } catch (error) {
      console.error('Error submitting rating:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞', {
        description: error instanceof Error ? error.message : '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å–∞–º —Å–µ–±—è
  if (userId === reviewerId) {
    return null;
  }

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        {trigger || (
          <Button variant="outline" size="sm">
            <Star className="w-4 h-4 mr-2" />
            –û—Ü–µ–Ω–∏—Ç—å
          </Button>
        )}
      </DialogTrigger>

      <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Star className="w-5 h-5 text-orange-500" />
            –û—Ü–µ–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞: {userName}
          </DialogTitle>
          <DialogDescription>
            –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —ç—Ç–∏–º —Ä—ã–±–æ–ª–æ–≤–æ–º. 
            –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.
          </DialogDescription>
        </DialogHeader>

        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <div className="space-y-6">
              {/* –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ */}
              <FormField
                control={form.control}
                name="mentorRating"
                render={({ field }) => (
                  <FormItem>
                    <RatingSlider
                      label="–ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ"
                      description="–ö–∞–∫ —Ö–æ—Ä–æ—à–æ –æ–±—ä—è—Å–Ω—è–µ—Ç –∏ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–æ–≤–∏—á–∫–∞–º"
                      icon={<Award className="w-5 h-5 text-orange-500" />}
                      value={field.value || 5}
                      onChange={field.onChange}
                      color="bg-orange-500"
                    />
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞ */}
              <FormField
                control={form.control}
                name="teamworkRating"
                render={({ field }) => (
                  <FormItem>
                    <RatingSlider
                      label="–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞"
                      description="–ö–∞–∫ —Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∫–æ–º–∞–Ω–¥–µ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥—Ä—É–≥–∏—Ö"
                      icon={<Users className="w-5 h-5 text-blue-500" />}
                      value={field.value || 5}
                      onChange={field.onChange}
                      color="bg-blue-500"
                    />
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å */}
              <FormField
                control={form.control}
                name="reliabilityRating"
                render={({ field }) => (
                  <FormItem>
                    <RatingSlider
                      label="–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å"
                      description="–ü—Ä–∏—Ö–æ–¥–∏—Ç –≤–æ–≤—Ä–µ–º—è, –Ω–µ –æ—Ç–º–µ–Ω—è–µ—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–º–µ–Ω—Ç"
                      icon={<Shield className="w-5 h-5 text-green-500" />}
                      value={field.value || 5}
                      onChange={field.onChange}
                      color="bg-green-500"
                    />
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* –°–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª */}
              <FormField
                control={form.control}
                name="respectRating"
                render={({ field }) => (
                  <FormItem>
                    <RatingSlider
                      label="–°–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"
                      description="–°–ª–µ–¥—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º —Ä—ã–±–∞–ª–∫–∏, –∑–∞–±–æ—Ç–∏—Ç—Å—è –æ–± —ç–∫–æ–ª–æ–≥–∏–∏"
                      icon={<Heart className="w-5 h-5 text-red-500" />}
                      value={field.value || 5}
                      onChange={field.onChange}
                      color="bg-red-500"
                    />
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π */}
              <FormField
                control={form.control}
                name="comment"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="flex items-center gap-2">
                      <MessageSquare className="w-4 h-4" />
                      –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                    </FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –¥–µ—Ç–∞–ª—è–º–∏ –≤–∞—à–µ–≥–æ –æ–ø—ã—Ç–∞..."
                        className="min-h-[100px]"
                        {...field}
                      />
                    </FormControl>
                    <FormDescription>
                      –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏–ª–∏ —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <DialogFooter>
              <Button
                type="button"
                variant="outline"
                onClick={() => setOpen(false)}
                disabled={isSubmitting}
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
              <Button type="submit" disabled={isSubmitting}>
                {isSubmitting ? (
                  <>
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                    –û—Ç–ø—Ä–∞–≤–∫–∞...
                  </>
                ) : (
                  <>
                    <Star className="w-4 h-4 mr-2" />
                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É
                  </>
                )}
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
};

export default RateUserDialog;
