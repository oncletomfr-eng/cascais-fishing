'use client';

import React from 'react';
import { motion } from 'framer-motion';
import {
  Box,
  Paper,
  Typography,
  Grid,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Chip,
  Button,
  Slider,
  Switch,
  FormControlLabel,
  TextField,
  Divider,
} from '@mui/material';
import {
  FilterList as FilterIcon,
  Clear as ClearIcon,
  CalendarToday as CalendarIcon,
  Schedule as TimeIcon,
  People as PeopleIcon,
  Sort as SortIcon,
  Phishing as FishIcon,
  EmojiEvents as TrophyIcon,
  School as LearningIcon,
  Group as CommunityIcon,
  Star as SkillIcon,
  Build as EquipmentIcon,
  WbCloudy as WeatherIcon,
} from '@mui/icons-material';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { ru } from 'date-fns/locale';
import {
  TripFilters as GroupTripFilters,
  TripSortBy as SortOption,
} from '@/lib/types/group-events';

interface GroupTripsFiltersProps {
  filters: GroupTripFilters;
  onFiltersChange: (filters: Partial<GroupTripFilters>) => void;
  sortBy: SortOption;
  onSortChange: (sort: SortOption) => void;
  className?: string;
}

const containerVariants = {
  hidden: { opacity: 0, y: -20 },
  visible: {
    opacity: 1,
    y: 0,
    transition: {
      duration: 0.4,
      ease: [0.25, 0.46, 0.45, 0.94],
    },
  },
};

const sortOptions: { value: SortOption; label: string }[] = [
  { value: 'date_asc', label: '–ü–æ –¥–∞—Ç–µ (—Å–Ω–∞—á–∞–ª–∞ –±–ª–∏–∂–∞–π—à–∏–µ)' },
  { value: 'date_desc', label: '–ü–æ –¥–∞—Ç–µ (—Å–Ω–∞—á–∞–ª–∞ –¥–∞–ª—å–Ω–∏–µ)' },
  { value: 'participants_desc', label: '–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—É–±—ã–≤.)' },
  { value: 'participants_asc', label: '–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–≤–æ–∑—Ä.)' },
  { value: 'created_desc', label: '–ü–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ)' },
  { value: 'urgency_desc', label: '–ü–æ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏' },
];

const timeSlotOptions = [
  { value: 'morning', label: '–£—Ç—Ä–æ–º (9:00)' },
  { value: 'afternoon', label: '–î–Ω—ë–º (14:00)' },
];

const statusOptions = [
  { value: 'forming', label: '–ù–∞–±–∏—Ä–∞—é—Ç—Å—è' },
  { value: 'almost_full', label: '–ü–æ—á—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' },
  { value: 'confirmed', label: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã' },
];

// üé£ NEW FISHING EVENT OPTIONS
const eventTypeOptions = [
  { value: 'commercial', label: '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è' },
  { value: 'tournament', label: '–¢—É—Ä–Ω–∏—Ä' },
  { value: 'learning', label: '–û–±—É—á–µ–Ω–∏–µ' },
  { value: 'community', label: '–°–æ–æ–±—â–µ—Å—Ç–≤–æ' },
];

const skillLevelOptions = [
  { value: 'beginner', label: '–ù–æ–≤–∏—á–æ–∫' },
  { value: 'intermediate', label: '–°—Ä–µ–¥–Ω–∏–π' },
  { value: 'advanced', label: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π' },
  { value: 'expert', label: '–≠–∫—Å–ø–µ—Ä—Ç' },
];

const socialModeOptions = [
  { value: 'competitive', label: '–°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π' },
  { value: 'collaborative', label: '–°–æ–≤–º–µ—Å—Ç–Ω—ã–π' },
  { value: 'educational', label: '–û–±—É—á–∞—é—â–∏–π' },
  { value: 'recreational', label: '–û—Ç–¥—ã—Ö' },
  { value: 'family', label: '–°–µ–º–µ–π–Ω—ã–π' },
];

const equipmentOptions = [
  { value: 'provided', label: '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è' },
  { value: 'bring_own', label: '–°–≤–æ–µ' },
  { value: 'rental_available', label: '–ï—Å—Ç—å –∞—Ä–µ–Ω–¥–∞' },
  { value: 'partially_provided', label: '–ß–∞—Å—Ç–∏—á–Ω–æ' },
];

export default function GroupTripsFilters({
  filters,
  onFiltersChange,
  sortBy,
  onSortChange,
  className = '',
}: GroupTripsFiltersProps) {
  const [localFilters, setLocalFilters] = React.useState<GroupTripFilters>(filters);
  const [isAdvancedOpen, setIsAdvancedOpen] = React.useState(false);

  const hasActiveFilters = Object.keys(filters).some(key => {
    const value = filters[key as keyof GroupTripFilters];
    return value !== undefined && value !== null;
  });

  const handleFilterChange = (key: keyof GroupTripFilters, value: any) => {
    const newFilters = { ...localFilters, [key]: value };
    setLocalFilters(newFilters);
    onFiltersChange({ [key]: value });
  };

  const handleDateRangeChange = (field: 'start' | 'end', date: Date | null) => {
    const currentRange = localFilters.dateRange || { start: new Date(), end: new Date() };
    const newRange = { ...currentRange, [field]: date };
    
    if (newRange.start && newRange.end) {
      handleFilterChange('dateRange', newRange);
    }
  };

  const handleClearFilters = () => {
    const emptyFilters: GroupTripFilters = {};
    setLocalFilters(emptyFilters);
    onFiltersChange(emptyFilters);
  };

  const handleMinSpotsChange = (event: Event, newValue: number | number[]) => {
    const value = Array.isArray(newValue) ? newValue[0] : newValue;
    handleFilterChange('minAvailableSpots', value > 0 ? value : undefined);
  };

  const handleMaxDaysChange = (event: Event, newValue: number | number[]) => {
    const value = Array.isArray(newValue) ? newValue[0] : newValue;
    handleFilterChange('maxDaysAhead', value < 30 ? value : undefined);
  };

  return (
    <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={ru}>
      <motion.div
        variants={containerVariants}
        initial="hidden"
        animate="visible"
        className={className}
      >
        <Paper sx={{ p: 3, mb: 3 }}>
          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <FilterIcon color="primary" />
              <Typography variant="h6" sx={{ fontWeight: 600 }}>
                –§–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
              </Typography>
              {hasActiveFilters && (
                <Chip 
                  label="–ê–∫—Ç–∏–≤–Ω—ã" 
                  size="small" 
                  color="primary" 
                  variant="outlined" 
                />
              )}
            </Box>
            
            <Box sx={{ display: 'flex', gap: 1 }}>
              <Button
                variant="text"
                size="small"
                onClick={() => setIsAdvancedOpen(!isAdvancedOpen)}
              >
                {isAdvancedOpen ? '–ü—Ä–æ—Å—Ç—ã–µ' : '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ'}
              </Button>
              {hasActiveFilters && (
                <Button
                  variant="outlined"
                  size="small"
                  startIcon={<ClearIcon />}
                  onClick={handleClearFilters}
                >
                  –û—á–∏—Å—Ç–∏—Ç—å
                </Button>
              )}
            </Box>
          </Box>

          <Grid container spacing={3}>
            {/* –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ */}
            <Grid item xs={12} md={4}>
              <FormControl fullWidth>
                <InputLabel>–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞</InputLabel>
                <Select
                  value={sortBy}
                  label="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞"
                  onChange={(e) => onSortChange(e.target.value as SortOption)}
                  startAdornment={<SortIcon sx={{ mr: 1, color: 'text.secondary' }} />}
                >
                  {sortOptions.map((option) => (
                    <MenuItem key={option.value} value={option.value}>
                      {option.label}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>

            {/* –í—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏ */}
            <Grid item xs={12} md={4}>
              <FormControl fullWidth>
                <InputLabel>–í—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏</InputLabel>
                <Select
                  value={filters.timeSlot || ''}
                  label="–í—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏"
                  onChange={(e) => handleFilterChange('timeSlot', e.target.value || undefined)}
                  startAdornment={<TimeIcon sx={{ mr: 1, color: 'text.secondary' }} />}
                >
                  <MenuItem value="">–õ—é–±–æ–µ –≤—Ä–µ–º—è</MenuItem>
                  {timeSlotOptions.map((option) => (
                    <MenuItem key={option.value} value={option.value}>
                      {option.label}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>

            {/* –°—Ç–∞—Ç—É—Å –ø–æ–µ–∑–¥–∫–∏ */}
            <Grid item xs={12} md={4}>
              <FormControl fullWidth>
                <InputLabel>–°—Ç–∞—Ç—É—Å</InputLabel>
                <Select
                  value={filters.status || ''}
                  label="–°—Ç–∞—Ç—É—Å"
                  onChange={(e) => handleFilterChange('status', e.target.value || undefined)}
                  startAdornment={<PeopleIcon sx={{ mr: 1, color: 'text.secondary' }} />}
                >
                  <MenuItem value="">–õ—é–±–æ–π —Å—Ç–∞—Ç—É—Å</MenuItem>
                  {statusOptions.map((option) => (
                    <MenuItem key={option.value} value={option.value}>
                      {option.label}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>

            {/* –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
            {isAdvancedOpen && (
              <>
                <Grid item xs={12}>
                  <Divider sx={{ my: 2 }} />
                  <Typography variant="subtitle1" sx={{ fontWeight: 600, mb: 2 }}>
                    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
                  </Typography>
                </Grid>

                {/* –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç */}
                <Grid item xs={12} md={6}>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
                    <CalendarIcon sx={{ fontSize: 20, color: 'text.secondary' }} />
                    <Typography variant="body2" color="text.secondary">
                      –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
                    </Typography>
                  </Box>
                  <Box sx={{ display: 'flex', gap: 2 }}>
                    <DatePicker
                      label="–°"
                      value={filters.dateRange?.start || null}
                      onChange={(date) => handleDateRangeChange('start', date)}
                      slotProps={{
                        textField: { 
                          size: 'small',
                          sx: { flexGrow: 1 },
                        },
                      }}
                      minDate={new Date()}
                    />
                    <DatePicker
                      label="–ü–æ"
                      value={filters.dateRange?.end || null}
                      onChange={(date) => handleDateRangeChange('end', date)}
                      slotProps={{
                        textField: { 
                          size: 'small',
                          sx: { flexGrow: 1 },
                        },
                      }}
                      minDate={filters.dateRange?.start || new Date()}
                    />
                  </Box>
                </Grid>

                {/* –ú–∏–Ω–∏–º—É–º —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç */}
                <Grid item xs={12} md={6}>
                  <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                    –ú–∏–Ω–∏–º—É–º —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: {filters.minAvailableSpots || 1}
                  </Typography>
                  <Slider
                    value={filters.minAvailableSpots || 1}
                    onChange={handleMinSpotsChange}
                    min={1}
                    max={8}
                    step={1}
                    marks
                    valueLabelDisplay="auto"
                    sx={{ mt: 1 }}
                  />
                </Grid>

                {/* –ú–∞–∫—Å–∏–º—É–º –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥ */}
                <Grid item xs={12} md={6}>
                  <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                    –ú–∞–∫—Å–∏–º—É–º –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥: {filters.maxDaysAhead || 30}
                  </Typography>
                  <Slider
                    value={filters.maxDaysAhead || 30}
                    onChange={handleMaxDaysChange}
                    min={1}
                    max={30}
                    step={1}
                    marks={[
                      { value: 1, label: '1' },
                      { value: 7, label: '7' },
                      { value: 14, label: '14' },
                      { value: 30, label: '30' },
                    ]}
                    valueLabelDisplay="auto"
                    sx={{ mt: 1 }}
                  />
                </Grid>

                {/* üé£ FISHING EVENT FILTERS SECTION */}
                <Grid item xs={12}>
                  <Typography variant="subtitle2" sx={{ fontWeight: 600, mt: 2, mb: 1, display: 'flex', alignItems: 'center', gap: 1 }}>
                    <FishIcon sx={{ fontSize: 20, color: 'primary.main' }} />
                    –§–∏–ª—å—Ç—Ä—ã —Ä—ã–±–∞–ª–∫–∏
                  </Typography>
                </Grid>

                {/* Event Type */}
                <Grid item xs={12} md={4}>
                  <FormControl fullWidth size="small">
                    <InputLabel>–¢–∏–ø —Å–æ–±—ã—Ç–∏—è</InputLabel>
                    <Select
                      value={filters.eventType || ''}
                      label="–¢–∏–ø —Å–æ–±—ã—Ç–∏—è"
                      onChange={(e) => handleFilterChange('eventType', e.target.value || undefined)}
                      startAdornment={<FishIcon sx={{ mr: 1, color: 'text.secondary' }} />}
                    >
                      <MenuItem value="">–õ—é–±–æ–π —Ç–∏–ø</MenuItem>
                      {eventTypeOptions.map((option) => (
                        <MenuItem key={option.value} value={option.value}>
                          {option.label}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>

                {/* Skill Level */}
                <Grid item xs={12} md={4}>
                  <FormControl fullWidth size="small">
                    <InputLabel>–£—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–æ–≤</InputLabel>
                    <Select
                      value={filters.experience === 'any' ? '' : filters.experience || ''}
                      label="–£—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–æ–≤"
                      onChange={(e) => handleFilterChange('experience', e.target.value || 'any')}
                      startAdornment={<SkillIcon sx={{ mr: 1, color: 'text.secondary' }} />}
                    >
                      <MenuItem value="">–õ—é–±–æ–π</MenuItem>
                      {skillLevelOptions.map((option) => (
                        <MenuItem key={option.value} value={option.value}>
                          {option.label}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>

                {/* Social Mode */}
                <Grid item xs={12} md={4}>
                  <FormControl fullWidth size="small">
                    <InputLabel>–§–æ—Ä–º–∞—Ç</InputLabel>
                    <Select
                      value={filters.socialMode || ''}
                      label="–§–æ—Ä–º–∞—Ç"
                      onChange={(e) => handleFilterChange('socialMode', e.target.value || undefined)}
                      startAdornment={<CommunityIcon sx={{ mr: 1, color: 'text.secondary' }} />}
                    >
                      <MenuItem value="">–õ—é–±–æ–π</MenuItem>
                      {socialModeOptions.map((option) => (
                        <MenuItem key={option.value} value={option.value}>
                          {option.label}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>

                {/* Equipment */}
                <Grid item xs={12} md={4}>
                  <FormControl fullWidth size="small">
                    <InputLabel>–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ</InputLabel>
                    <Select
                      value={filters.equipment || ''}
                      label="–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ"
                      onChange={(e) => handleFilterChange('equipment', e.target.value || undefined)}
                      startAdornment={<EquipmentIcon sx={{ mr: 1, color: 'text.secondary' }} />}
                    >
                      <MenuItem value="">–õ—é–±–æ–µ</MenuItem>
                      {equipmentOptions.map((option) => (
                        <MenuItem key={option.value} value={option.value}>
                          {option.label}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>

                {/* Difficulty Range */}
                <Grid item xs={12} md={4}>
                  <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                    –°–ª–æ–∂–Ω–æ—Å—Ç—å: {filters.difficultyRange?.min || 1} - {filters.difficultyRange?.max || 5}
                  </Typography>
                  <Slider
                    value={[filters.difficultyRange?.min || 1, filters.difficultyRange?.max || 5]}
                    onChange={(e, values) => {
                      if (Array.isArray(values)) {
                        handleFilterChange('difficultyRange', {
                          min: values[0],
                          max: values[1]
                        });
                      }
                    }}
                    min={1}
                    max={5}
                    step={1}
                    marks
                    valueLabelDisplay="auto"
                    sx={{ mt: 1 }}
                  />
                </Grid>

                {/* Weather Dependency */}
                <Grid item xs={12} md={4}>
                  <FormControlLabel
                    control={
                      <Switch
                        checked={filters.weatherDependency === false}
                        onChange={(e) => handleFilterChange('weatherDependency', e.target.checked ? false : undefined)}
                      />
                    }
                    label={
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <WeatherIcon sx={{ fontSize: 18, color: 'text.secondary' }} />
                        <Typography variant="body2">–¢–æ–ª—å–∫–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –æ—Ç –ø–æ–≥–æ–¥—ã</Typography>
                      </Box>
                    }
                  />
                </Grid>
              </>
            )}
          </Grid>

          {/* Active Filters Display */}
          {hasActiveFilters && (
            <Box sx={{ mt: 3, pt: 2, borderTop: '1px solid', borderColor: 'divider' }}>
              <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
                –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:
              </Typography>
              <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
                {filters.timeSlot && (
                  <Chip
                    label={`–í—Ä–µ–º—è: ${timeSlotOptions.find(opt => opt.value === filters.timeSlot)?.label}`}
                    onDelete={() => handleFilterChange('timeSlot', undefined)}
                    size="small"
                  />
                )}
                {filters.status && (
                  <Chip
                    label={`–°—Ç–∞—Ç—É—Å: ${statusOptions.find(opt => opt.value === filters.status)?.label}`}
                    onDelete={() => handleFilterChange('status', undefined)}
                    size="small"
                  />
                )}
                {filters.dateRange && (
                  <Chip
                    label="–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤—ã–±—Ä–∞–Ω"
                    onDelete={() => handleFilterChange('dateRange', undefined)}
                    size="small"
                  />
                )}
                {filters.minAvailableSpots && filters.minAvailableSpots > 1 && (
                  <Chip
                    label={`–ú–∏–Ω. –º–µ—Å—Ç–∞: ${filters.minAvailableSpots}`}
                    onDelete={() => handleFilterChange('minAvailableSpots', undefined)}
                    size="small"
                  />
                )}
                {filters.maxDaysAhead && filters.maxDaysAhead < 30 && (
                  <Chip
                    label={`–ú–∞–∫—Å. –¥–Ω–µ–π: ${filters.maxDaysAhead}`}
                    onDelete={() => handleFilterChange('maxDaysAhead', undefined)}
                    size="small"
                  />
                )}
                {/* üé£ NEW FISHING EVENT FILTER CHIPS */}
                {filters.eventType && (
                  <Chip
                    label={`–¢–∏–ø: ${eventTypeOptions.find(opt => opt.value === filters.eventType)?.label}`}
                    onDelete={() => handleFilterChange('eventType', undefined)}
                    size="small"
                  />
                )}
                {filters.experience && filters.experience !== 'any' && (
                  <Chip
                    label={`–ù–∞–≤—ã–∫–∏: ${skillLevelOptions.find(opt => opt.value === filters.experience)?.label}`}
                    onDelete={() => handleFilterChange('experience', 'any')}
                    size="small"
                  />
                )}
                {filters.socialMode && (
                  <Chip
                    label={`–§–æ—Ä–º–∞—Ç: ${socialModeOptions.find(opt => opt.value === filters.socialMode)?.label}`}
                    onDelete={() => handleFilterChange('socialMode', undefined)}
                    size="small"
                  />
                )}
                {filters.equipment && (
                  <Chip
                    label={`–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ: ${equipmentOptions.find(opt => opt.value === filters.equipment)?.label}`}
                    onDelete={() => handleFilterChange('equipment', undefined)}
                    size="small"
                  />
                )}
                {filters.difficultyRange && (filters.difficultyRange.min > 1 || filters.difficultyRange.max < 5) && (
                  <Chip
                    label={`–°–ª–æ–∂–Ω–æ—Å—Ç—å: ${filters.difficultyRange.min}-${filters.difficultyRange.max}`}
                    onDelete={() => handleFilterChange('difficultyRange', undefined)}
                    size="small"
                  />
                )}
                {filters.weatherDependency === false && (
                  <Chip
                    label="–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –æ—Ç –ø–æ–≥–æ–¥—ã"
                    onDelete={() => handleFilterChange('weatherDependency', undefined)}
                    size="small"
                  />
                )}
              </Box>
            </Box>
          )}
        </Paper>
      </motion.div>
    </LocalizationProvider>
  );
}
