/**
 * JWT Security Audit & Secret Generator
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å JWT secrets –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç secure secrets
 */

import crypto from 'crypto';

interface JWTSecurityAnalysis {
  secret: string;
  length: number;
  entropy: number;
  hasWeakPatterns: boolean;
  isDevelopmentSecret: boolean;
  recommendations: string[];
  securityScore: number; // 0-100
  isProductionReady: boolean;
}

class JWTSecurityAuditor {
  
  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å JWT secret
   */
  analyzeSecret(secret: string): JWTSecurityAnalysis {
    const analysis: JWTSecurityAnalysis = {
      secret: secret.slice(0, 10) + '...[HIDDEN]', // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π secret
      length: secret.length,
      entropy: this.calculateEntropy(secret),
      hasWeakPatterns: this.hasWeakPatterns(secret),
      isDevelopmentSecret: this.isDevelopmentSecret(secret),
      recommendations: [],
      securityScore: 0,
      isProductionReady: false
    };

    // –ê–Ω–∞–ª–∏–∑ –¥–ª–∏–Ω—ã
    if (analysis.length < 32) {
      analysis.recommendations.push('üö® CRITICAL: Secret —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (< 32 chars)');
    } else if (analysis.length < 64) {
      analysis.recommendations.push('‚ö†Ô∏è  WARNING: Secret –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è >= 64 chars)');
    }

    // –ê–Ω–∞–ª–∏–∑ —ç–Ω—Ç—Ä–æ–ø–∏–∏
    if (analysis.entropy < 4.0) {
      analysis.recommendations.push('üö® CRITICAL: –ù–∏–∑–∫–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è - secret –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º');
    } else if (analysis.entropy < 5.0) {
      analysis.recommendations.push('‚ö†Ô∏è  WARNING: –°—Ä–µ–¥–Ω—è—è —ç–Ω—Ç—Ä–æ–ø–∏—è - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–ª—É—á—à–∏—Ç—å');
    }

    // –°–ª–∞–±—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    if (analysis.hasWeakPatterns) {
      analysis.recommendations.push('üö® CRITICAL: Secret —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–∞–±—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (repeating chars, common words)');
    }

    // Development secret
    if (analysis.isDevelopmentSecret) {
      analysis.recommendations.push('üö® CRITICAL: Development secret –ù–ï –ü–û–î–•–û–î–ò–¢ –¥–ª—è production');
    }

    // –í—ã—á–∏—Å–ª—è–µ–º security score
    analysis.securityScore = this.calculateSecurityScore(analysis);
    analysis.isProductionReady = analysis.securityScore >= 80 && 
                                !analysis.isDevelopmentSecret && 
                                !analysis.hasWeakPatterns &&
                                analysis.length >= 32;

    return analysis;
  }

  private calculateEntropy(secret: string): number {
    const charCounts: { [key: string]: number } = {};
    
    // –ü–æ–¥—Å—á–µ—Ç —á–∞—Å—Ç–æ—Ç—ã —Å–∏–º–≤–æ–ª–æ–≤
    for (const char of secret) {
      charCounts[char] = (charCounts[char] || 0) + 1;
    }

    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —ç–Ω—Ç—Ä–æ–ø–∏–∏ –®–µ–Ω–Ω–æ–Ω–∞
    let entropy = 0;
    for (const count of Object.values(charCounts)) {
      const probability = count / secret.length;
      entropy -= probability * Math.log2(probability);
    }

    return entropy;
  }

  private hasWeakPatterns(secret: string): boolean {
    const weakPatterns = [
      /(.)\1{3,}/, // 4+ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–∞
      /(012|123|234|345|456|567|678|789|890)/, // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞
      /(abc|def|ghi|jkl|mno|pqr|stu|vwx|yz)/i, // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –±—É–∫–≤—ã
      /(password|secret|key|token|auth|admin|test|dev)/i, // –û–±—â–∏–µ —Å–ª–æ–≤–∞
      /^(.{1,4})\1+$/ // –ü—Ä–æ—Å—Ç—ã–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    ];

    return weakPatterns.some(pattern => pattern.test(secret));
  }

  private isDevelopmentSecret(secret: string): boolean {
    const devIndicators = [
      'development',
      'dev',
      'test',
      'demo',
      'localhost',
      'example',
      'sample',
      'default'
    ];

    return devIndicators.some(indicator => 
      secret.toLowerCase().includes(indicator.toLowerCase())
    );
  }

  private calculateSecurityScore(analysis: JWTSecurityAnalysis): number {
    let score = 0;

    // –î–ª–∏–Ω–∞ (0-30 points)
    if (analysis.length >= 64) score += 30;
    else if (analysis.length >= 32) score += 20;
    else if (analysis.length >= 16) score += 10;

    // –≠–Ω—Ç—Ä–æ–ø–∏—è (0-30 points)  
    if (analysis.entropy >= 5.5) score += 30;
    else if (analysis.entropy >= 5.0) score += 25;
    else if (analysis.entropy >= 4.5) score += 20;
    else if (analysis.entropy >= 4.0) score += 15;
    else if (analysis.entropy >= 3.0) score += 10;

    // –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–ª–∞–±—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (0-20 points)
    if (!analysis.hasWeakPatterns) score += 20;

    // –ù–µ development secret (0-20 points)
    if (!analysis.isDevelopmentSecret) score += 20;

    return Math.min(100, score);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç cryptographically secure JWT secret
   */
  generateSecureSecret(length: number = 64): string {
    return crypto.randomBytes(Math.ceil(length / 2)).toString('hex').slice(0, length);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç human-friendly –Ω–æ secure secret
   */
  generateReadableSecret(): string {
    const adjectives = ['swift', 'secure', 'robust', 'stealth', 'quantum', 'cipher', 'vault', 'shield'];
    const nouns = ['falcon', 'guardian', 'fortress', 'phoenix', 'nexus', 'matrix', 'prism', 'beacon'];
    const symbols = '!@#$%^&*+=';
    
    const randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];
    const randomNoun = nouns[Math.floor(Math.random() * nouns.length)];
    const randomNumber = Math.floor(Math.random() * 9000) + 1000; // 4-digit number
    const randomSymbol = symbols[Math.floor(Math.random() * symbols.length)];
    
    const baseSecret = `${randomAdjective}-${randomNoun}-${randomNumber}${randomSymbol}`;
    const randomSuffix = crypto.randomBytes(16).toString('hex');
    
    return `${baseSecret}-${randomSuffix}`;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç environment variables –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤
 */
function auditEnvironmentSecrets(): void {
  console.log('üîç Environment Variables Security Audit...\n');

  const secretVars = [
    'AUTH_SECRET',
    'NEXTAUTH_SECRET', 
    'AUTH_GITHUB_SECRET',
    'AUTH_GOOGLE_SECRET',
    'STRIPE_SECRET_KEY',
    'STREAM_CHAT_API_SECRET'
  ];

  const auditor = new JWTSecurityAuditor();
  let overallSecure = true;

  secretVars.forEach(varName => {
    const value = process.env[varName];
    
    if (!value) {
      console.log(`‚ùå ${varName}: NOT SET`);
      overallSecure = false;
      return;
    }

    if (varName === 'AUTH_SECRET' || varName === 'NEXTAUTH_SECRET') {
      const analysis = auditor.analyzeSecret(value);
      
      console.log(`üîê ${varName}:`);
      console.log(`   Length: ${analysis.length}`);
      console.log(`   Entropy: ${analysis.entropy.toFixed(2)}`);
      console.log(`   Security Score: ${analysis.securityScore}/100`);
      console.log(`   Production Ready: ${analysis.isProductionReady ? '‚úÖ' : '‚ùå'}`);
      
      if (analysis.recommendations.length > 0) {
        console.log('   Recommendations:');
        analysis.recommendations.forEach(rec => console.log(`     ${rec}`));
        overallSecure = false;
      }
      console.log();
    } else {
      console.log(`üîë ${varName}: SET (${value.length} chars)`);
    }
  });

  console.log(`\nüéØ Overall Security Status: ${overallSecure ? '‚úÖ SECURE' : '‚ùå NEEDS IMPROVEMENT'}\n`);
}

// Main execution
if (require.main === module) {
  console.log('üõ°Ô∏è  JWT Security Audit & Secret Generator\n');

  // Audit current secrets
  auditEnvironmentSecrets();

  const auditor = new JWTSecurityAuditor();

  // Generate secure secrets
  console.log('üîê Generated Secure Secrets for Production:\n');
  
  console.log('AUTH_SECRET (Hex):');
  console.log(`${auditor.generateSecureSecret(64)}\n`);
  
  console.log('AUTH_SECRET (Human-Readable):');
  console.log(`${auditor.generateReadableSecret()}\n`);

  // Test current secret if available
  const currentSecret = process.env.AUTH_SECRET || process.env.NEXTAUTH_SECRET;
  if (currentSecret) {
    console.log('üìä Current Secret Analysis:');
    const analysis = auditor.analyzeSecret(currentSecret);
    console.log(`Security Score: ${analysis.securityScore}/100`);
    console.log(`Production Ready: ${analysis.isProductionReady ? '‚úÖ' : '‚ùå'}`);
    
    if (analysis.recommendations.length > 0) {
      console.log('\nüö® Security Issues Found:');
      analysis.recommendations.forEach(rec => console.log(`  ${rec}`));
    }
  }
}

export { JWTSecurityAuditor, auditEnvironmentSecrets };
