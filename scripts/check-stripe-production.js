#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Stripe –∫ Production Mode
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Context7 –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∏ Stripe Node.js best practices
 */

require('dotenv').config({ path: '.env.local' });
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bright: '\x1b[1m'
};

console.log(`${colors.blue}${colors.bright}üîç –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò STRIPE –ö PRODUCTION MODE${colors.reset}\n`);

let allChecks = [];
let errors = [];
let warnings = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
function check(name, condition, errorMsg, warningMsg = null) {
  const status = condition ? '‚úÖ' : '‚ùå';
  const color = condition ? colors.green : colors.red;
  
  console.log(`${status} ${color}${name}${colors.reset}`);
  
  allChecks.push({ name, passed: condition });
  
  if (!condition && errorMsg) {
    errors.push(`‚ùå ${name}: ${errorMsg}`);
  }
  
  if (!condition && warningMsg) {
    warnings.push(`‚ö†Ô∏è ${name}: ${warningMsg}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
function info(message) {
  console.log(`${colors.blue}   ‚ÑπÔ∏è ${message}${colors.reset}`);
}

console.log(`${colors.bright}üìä –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ò–• API –ö–õ–Æ–ß–ï–ô:${colors.reset}`);

// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–π
const publishableKey = process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY;
const secretKey = process.env.STRIPE_SECRET_KEY;
const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;

check('Publishable Key –∑–∞–≥—Ä—É–∂–µ–Ω', !!publishableKey, 'NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env.local');
check('Secret Key –∑–∞–≥—Ä—É–∂–µ–Ω', !!secretKey, 'STRIPE_SECRET_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env.local');
check('Webhook Secret –∑–∞–≥—Ä—É–∂–µ–Ω', !!webhookSecret, 'STRIPE_WEBHOOK_SECRET –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env.local');

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –∫–ª—é—á–µ–π
if (publishableKey) {
  const isLive = publishableKey.startsWith('pk_live_');
  const isTest = publishableKey.startsWith('pk_test_');
  
  if (isLive) {
    info(`LIVE Publishable Key: ${publishableKey.substring(0, 12)}...`);
  } else if (isTest) {
    info(`TEST Publishable Key: ${publishableKey.substring(0, 12)}...`);
  }
  
  check('Publishable Key —Ñ–æ—Ä–º–∞—Ç', isLive || isTest, 
    'Publishable key –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å pk_live_ –∏–ª–∏ pk_test_');
}

if (secretKey) {
  const isLive = secretKey.startsWith('sk_live_');
  const isTest = secretKey.startsWith('sk_test_');
  
  if (isLive) {
    info(`LIVE Secret Key: ${secretKey.substring(0, 12)}...`);
  } else if (isTest) {
    info(`TEST Secret Key: ${secretKey.substring(0, 12)}...`);
  }
  
  check('Secret Key —Ñ–æ—Ä–º–∞—Ç', isLive || isTest, 
    'Secret key –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å sk_live_ –∏–ª–∏ sk_test_');
}

if (webhookSecret) {
  const isValid = webhookSecret.startsWith('whsec_');
  const isPlaceholder = webhookSecret.includes('YOUR_WEBHOOK_SECRET');
  
  if (isPlaceholder) {
    info(`Webhook Secret: PLACEHOLDER (—Ç—Ä–µ–±—É–µ—Ç –∑–∞–º–µ–Ω—ã)`);
  } else if (isValid) {
    info(`Webhook Secret: ${webhookSecret.substring(0, 12)}...`);
  }
  
  check('Webhook Secret —Ñ–æ—Ä–º–∞—Ç', isValid && !isPlaceholder, 
    'Webhook secret –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å whsec_ –∏ –Ω–µ –±—ã—Ç—å placeholder');
}

console.log('\n' + `${colors.bright}üéØ –ü–†–û–í–ï–†–ö–ê –†–ï–ñ–ò–ú–ê –†–ê–ë–û–¢–´:${colors.reset}`);

// 3. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
const isProductionKeys = publishableKey?.startsWith('pk_live_') && secretKey?.startsWith('sk_live_');
const isTestKeys = publishableKey?.startsWith('pk_test_') && secretKey?.startsWith('sk_test_');
const isMixedKeys = (publishableKey?.startsWith('pk_live_') && secretKey?.startsWith('sk_test_')) ||
                   (publishableKey?.startsWith('pk_test_') && secretKey?.startsWith('sk_live_'));

if (isProductionKeys) {
  console.log(`${colors.green}${colors.bright}üöÄ PRODUCTION MODE –ê–ö–¢–ò–í–ï–ù${colors.reset}`);
  info('–í—Å–µ –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è production');
} else if (isTestKeys) {
  console.log(`${colors.yellow}${colors.bright}üß™ TEST MODE –ê–ö–¢–ò–í–ï–ù${colors.reset}`);
  info('–í—Å–µ –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
} else if (isMixedKeys) {
  console.log(`${colors.red}${colors.bright}‚ö†Ô∏è –°–ú–ï–®–ê–ù–ù–´–ï –ö–õ–Æ–ß–ò - –û–®–ò–ë–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò${colors.reset}`);
  errors.push('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–º–µ—à–∞–Ω–Ω—ã–µ live/test –∫–ª—é—á–∏ - —ç—Ç–æ –æ–ø–∞—Å–Ω–æ!');
}

check('–†–µ–∂–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', !isMixedKeys, 
  '–°–º–µ—à–∞–Ω–Ω—ã–µ live/test –∫–ª—é—á–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã');

console.log('\n' + `${colors.bright}üîß –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:${colors.reset}`);

// 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
const fs = require('fs');
const path = require('path');

const stripeLibExists = fs.existsSync(path.join(process.cwd(), 'lib/stripe.ts'));
const webhookHandlerExists = fs.existsSync(path.join(process.cwd(), 'app/api/stripe-webhooks/route.ts'));
const paymentsHandlerExists = fs.existsSync(path.join(process.cwd(), 'app/api/payments/route.ts'));

check('Stripe Library —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', stripeLibExists, '–§–∞–π–ª lib/stripe.ts –Ω–µ –Ω–∞–π–¥–µ–Ω');
check('Webhook Handler —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', webhookHandlerExists, '–§–∞–π–ª app/api/stripe-webhooks/route.ts –Ω–µ –Ω–∞–π–¥–µ–Ω');
check('Payments Handler —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', paymentsHandlerExists, '–§–∞–π–ª app/api/payments/route.ts –Ω–µ –Ω–∞–π–¥–µ–Ω');

console.log('\n' + `${colors.bright}üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:${colors.reset}`);

const passedChecks = allChecks.filter(c => c.passed).length;
const totalChecks = allChecks.length;
const percentage = Math.round((passedChecks / totalChecks) * 100);

console.log(`\n${colors.bright}–ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${passedChecks}/${totalChecks} (${percentage}%)${colors.reset}`);

if (percentage === 100) {
  console.log(`${colors.green}${colors.bright}üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!${colors.reset}`);
} else if (percentage >= 80) {
  console.log(`${colors.yellow}${colors.bright}‚ö†Ô∏è –ë–û–õ–¨–®–ò–ù–°–¢–í–û –ü–†–û–í–ï–†–û–ö –ü–†–û–ô–î–ï–ù–û${colors.reset}`);
} else {
  console.log(`${colors.red}${colors.bright}‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–û–ö${colors.reset}`);
}

// –í—ã–≤–æ–¥ –æ—à–∏–±–æ–∫ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
if (errors.length > 0) {
  console.log(`\n${colors.red}${colors.bright}üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò:${colors.reset}`);
  errors.forEach(error => console.log(`   ${error}`));
}

if (warnings.length > 0) {
  console.log(`\n${colors.yellow}${colors.bright}‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:${colors.reset}`);
  warnings.forEach(warning => console.log(`   ${warning}`));
}

// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
console.log(`\n${colors.bright}üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:${colors.reset}`);

if (isTestKeys) {
  console.log('   üìã –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ production:');
  console.log('   1. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ñ–∏–ª—å –≤ Stripe Dashboard');
  console.log('   2. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –≤ Live mode');
  console.log('   3. –ü–æ–ª—É—á–∏—Ç–µ live API keys');
  console.log('   4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ live webhooks');
  console.log('   5. –û–±–Ω–æ–≤–∏—Ç–µ .env.local —Å live –∫–ª—é—á–∞–º–∏');
  console.log(`   üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: ${colors.blue}STRIPE_PRODUCTION_MODE_GUIDE.md${colors.reset}`);
}

if (isProductionKeys) {
  console.log('   üîí Production —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω:');
  console.log('   ‚Ä¢ –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –±—É–¥—É—Ç —Ä–µ–∞–ª—å–Ω—ã–º–∏');
  console.log('   ‚Ä¢ –û–±–µ—Å–ø–µ—á—å—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–π');
  console.log('   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥');
  console.log('   ‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã refund');
}

if (webhookSecret?.includes('YOUR_WEBHOOK_SECRET')) {
  console.log('   üîó –ù–∞—Å—Ç—Ä–æ–π—Ç–µ webhook secret:');
  console.log('   1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Stripe Dashboard ‚Üí Webhooks');
  console.log('   2. –°–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ webhook endpoint');
  console.log('   3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ signing secret');
  console.log('   4. –û–±–Ω–æ–≤–∏—Ç–µ STRIPE_WEBHOOK_SECRET –≤ .env.local');
}

console.log(`\n${colors.bright}üéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:${colors.reset}`);
if (percentage < 100) {
  console.log('   1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏');
  console.log('   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ: node scripts/check-stripe-production.js');
  console.log('   3. –ü—Ä–∏ 100% –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ production');
} else {
  if (isTestKeys) {
    console.log('   1. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ STRIPE_PRODUCTION_MODE_GUIDE.md');
    console.log('   2. –ü–æ–ª—É—á–∏—Ç–µ live keys –∏–∑ Stripe Dashboard');
    console.log('   3. –û–±–Ω–æ–≤–∏—Ç–µ .env.local');
    console.log('   4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏');
  } else {
    console.log('   1. ‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production!');
    console.log('   2. üöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏');
    console.log('   3. üìä –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ alerts');
  }
}

console.log(`\n${colors.blue}${colors.bright}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${colors.reset}`);
console.log(`${colors.blue}${colors.bright}  CASCAIS FISHING - STRIPE PRODUCTION READINESS CHECK COMPLETE  ${colors.reset}`);
console.log(`${colors.blue}${colors.bright}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${colors.reset}\n`);

// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –¥–ª—è CI/CD
process.exit(percentage === 100 ? 0 : 1);
