/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ–± —É–ª–æ–≤–∞—Ö
 * –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–æ–≥–æ —Ä—ã–±–æ–ª–æ–≤—Å—Ç–≤–∞ –≤ –ê—Ç–ª–∞–Ω—Ç–∏–∫–µ
 */

import { PrismaClient, FishSpecies, LunarPhaseType, FishingTechnique, CatchDataSource } from '@prisma/client';

const prisma = new PrismaClient();

// –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä—ã–±–æ–ª–æ–≤—Å—Ç–≤–µ –≤ –ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏—Ö –≤–æ–¥–∞—Ö
const PORTUGUESE_FISHING_DATA = {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –≤–∏–¥—ã –≤ —Ä–∞–π–æ–Ω–µ Cascais
  PRIMARY_SPECIES: [
    FishSpecies.SARDINE,    // –°–∞—Ä–¥–∏–Ω–∞ - –æ—Å–Ω–æ–≤–Ω–æ–π —É–ª–æ–≤
    FishSpecies.MACKEREL,   // –°–∫—É–º–±—Ä–∏—è - –ø–æ–ø—É–ª—è—Ä–Ω–∞—è
    FishSpecies.SEABASS,    // –ú–æ—Ä—Å–∫–æ–π –æ–∫—É–Ω—å
    FishSpecies.SEABREAM,   // –ú–æ—Ä—Å–∫–æ–π –ª–µ—â  
    FishSpecies.TUNA,       // –¢—É–Ω–µ—Ü - —Å–µ–∑–æ–Ω–Ω—ã–π
    FishSpecies.DORADO      // –î–æ—Ä–∞–¥–æ
  ],
  
  // –°–µ–∑–æ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (0-1)
  SEASONAL_ACTIVITY: {
    [FishSpecies.SARDINE]: { spring: 0.9, summer: 1.0, autumn: 0.8, winter: 0.3 },
    [FishSpecies.MACKEREL]: { spring: 0.8, summer: 0.9, autumn: 1.0, winter: 0.4 },
    [FishSpecies.SEABASS]: { spring: 0.7, summer: 0.8, autumn: 0.9, winter: 0.6 },
    [FishSpecies.SEABREAM]: { spring: 0.6, summer: 0.8, autumn: 0.7, winter: 0.5 },
    [FishSpecies.TUNA]: { spring: 0.4, summer: 1.0, autumn: 0.8, winter: 0.1 },
    [FishSpecies.DORADO]: { spring: 0.6, summer: 0.9, autumn: 0.8, winter: 0.3 }
  },

  // –¢–∏–ø–∏—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏ –≤–µ—Å–∞ —Ä—ã–± (–≤ –≥—Ä–∞–º–º–∞—Ö)
  FISH_WEIGHTS: {
    [FishSpecies.SARDINE]: { min: 80, max: 200, avg: 120 },
    [FishSpecies.MACKEREL]: { min: 250, max: 800, avg: 450 },
    [FishSpecies.SEABASS]: { min: 400, max: 3000, avg: 1200 },
    [FishSpecies.SEABREAM]: { min: 300, max: 2000, avg: 800 },
    [FishSpecies.TUNA]: { min: 2000, max: 15000, avg: 5000 },
    [FishSpecies.DORADO]: { min: 500, max: 8000, avg: 2000 }
  },

  // –ì–ª—É–±–∏–Ω—ã –ª–æ–≤–ª–∏ (–≤ –º–µ—Ç—Ä–∞—Ö)
  FISHING_DEPTHS: {
    [FishSpecies.SARDINE]: { min: 10, max: 80, avg: 40 },
    [FishSpecies.MACKEREL]: { min: 20, max: 200, avg: 100 },
    [FishSpecies.SEABASS]: { min: 5, max: 100, avg: 30 },
    [FishSpecies.SEABREAM]: { min: 10, max: 200, avg: 80 },
    [FishSpecies.TUNA]: { min: 50, max: 500, avg: 200 },
    [FishSpecies.DORADO]: { min: 20, max: 300, avg: 120 }
  }
};

// –†–µ–∞–ª—å–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ –≤ —Ä–∞–π–æ–Ω–µ Cascais
const FISHING_LOCATIONS = [
  {
    name: "–ö–∞—Å–∫–∞–π—à—Å–∫–∏–π –∑–∞–ª–∏–≤",
    latitude: 38.6979,
    longitude: -9.4215,
    depth: 30,
    distanceFromShore: 2,
    bottomType: "sandy"
  },
  {
    name: "–ú—ã—Å –†–æ–∫–∞",
    latitude: 38.7803,
    longitude: -9.4990,
    depth: 80,
    distanceFromShore: 8,
    bottomType: "rocky"
  },
  {
    name: "–ì–∏–Ω—á–æ –ë–∞–Ω–∫",
    latitude: 38.7342,
    longitude: -9.4692,
    depth: 45,
    distanceFromShore: 5,
    bottomType: "mixed"
  },
  {
    name: "–≠—à—Ç–æ—Ä–∏–ª –ö–æ—É—Å—Ç",
    latitude: 38.7057,
    longitude: -9.3968,
    depth: 25,
    distanceFromShore: 1.5,
    bottomType: "sandy"
  },
  {
    name: "–°–∏–Ω—Ç—Ä–∞ –®–µ–ª—å—Ñ",
    latitude: 38.8157,
    longitude: -9.5231,
    depth: 120,
    distanceFromShore: 15,
    bottomType: "rocky"
  }
];

// –õ—É–Ω–Ω—ã–µ —Ñ–∞–∑—ã –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —É–ª–æ–≤
const LUNAR_INFLUENCE = {
  [LunarPhaseType.NEW_MOON]: 1.2,        // –ù–æ–≤–æ–ª—É–Ω–∏–µ - –æ—Ç–ª–∏—á–Ω—ã–π –∫–ª—ë–≤
  [LunarPhaseType.WAXING_CRESCENT]: 0.9, // –†–∞—Å—Ç—É—â–∏–π –º–µ—Å—è—Ü - —Ö–æ—Ä–æ—à–æ
  [LunarPhaseType.FIRST_QUARTER]: 0.8,   // –ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å - —Å—Ä–µ–¥–Ω–µ
  [LunarPhaseType.WAXING_GIBBOUS]: 0.7,  // –†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞ - –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
  [LunarPhaseType.FULL_MOON]: 1.1,       // –ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ - —Ö–æ—Ä–æ—à–æ
  [LunarPhaseType.WANING_GIBBOUS]: 0.8,  // –£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞ - —Å—Ä–µ–¥–Ω–µ
  [LunarPhaseType.LAST_QUARTER]: 0.9,    // –ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å - —Ö–æ—Ä–æ—à–æ
  [LunarPhaseType.WANING_CRESCENT]: 1.0  // –£–±—ã–≤–∞—é—â–∏–π –º–µ—Å—è—Ü - –Ω–æ—Ä–º–∞–ª—å–Ω–æ
};

// –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–æ –±–µ–∑ enum)
const WEATHER_CONDITIONS = ['—è—Å–Ω–æ', '–æ–±–ª–∞—á–Ω–æ', '–¥–æ–∂–¥—å', '–≤–µ—Ç—Ä–µ–Ω–æ', '—Ç—É–º–∞–Ω'];
const WEATHER_INFLUENCE: Record<string, number> = {
  '—è—Å–Ω–æ': 1.0,
  '–æ–±–ª–∞—á–Ω–æ': 0.9,
  '–¥–æ–∂–¥—å': 0.7,
  '–≤–µ—Ç—Ä–µ–Ω–æ': 0.6,
  '—Ç—É–º–∞–Ω': 0.8
};

function getRandomFloat(min: number, max: number): number {
  return Math.random() * (max - min) + min;
}

function getRandomInt(min: number, max: number): number {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function getRandomItem<T>(array: T[]): T {
  return array[Math.floor(Math.random() * array.length)];
}

function getSeason(month: number): 'spring' | 'summer' | 'autumn' | 'winter' {
  if (month >= 3 && month <= 5) return 'spring';
  if (month >= 6 && month <= 8) return 'summer'; 
  if (month >= 9 && month <= 11) return 'autumn';
  return 'winter';
}

function generateCatchWeight(species: FishSpecies): number {
  const weights = PORTUGUESE_FISHING_DATA.FISH_WEIGHTS[species as keyof typeof PORTUGUESE_FISHING_DATA.FISH_WEIGHTS];
  if (!weights) return 500; // fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≤–∏–¥–æ–≤

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –≤–µ—Å–æ–≤
  const stdDev = (weights.max - weights.min) / 6;
  let weight = weights.avg + (Math.random() - 0.5) * stdDev * 2;
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–µ–¥–µ–ª–∞–º–∏
  return Math.max(weights.min, Math.min(weights.max, Math.round(weight)));
}

function generateFishingDepth(species: FishSpecies): number {
  const depths = PORTUGUESE_FISHING_DATA.FISHING_DEPTHS[species as keyof typeof PORTUGUESE_FISHING_DATA.FISHING_DEPTHS];
  if (!depths) return 50; // fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≤–∏–¥–æ–≤

  return Math.round(getRandomFloat(depths.min, depths.max));
}

async function createCatchRecords() {
  console.log('üé£ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ–± —É–ª–æ–≤–∞—Ö...');

  // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª—É–Ω–Ω—ã–µ —Ñ–∞–∑—ã –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ
  console.log('üåô –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª—É–Ω–Ω—ã–µ —Ñ–∞–∑—ã...');
  let lunarPhases = await prisma.lunarPhase.findMany();
  
  if (lunarPhases.length === 0) {
    console.log('–°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ª—É–Ω–Ω—ã–µ —Ñ–∞–∑—ã...');
    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª—É–Ω–Ω—ã—Ö —Ñ–∞–∑ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const phaseTypes = Object.values(LunarPhaseType);
    for (let i = 0; i < 20; i++) { // 20 —Ñ–∞–∑ –∑–∞ —Ä–∞–∑–Ω—ã–µ –¥–∞—Ç—ã
      const date = new Date('2023-01-01');
      date.setDate(date.getDate() + i * 14); // –ö–∞–∂–¥—ã–µ 14 –¥–Ω–µ–π
      
      await prisma.lunarPhase.create({
        data: {
          date: date,
          type: phaseTypes[i % phaseTypes.length],
          angle: (i * 18) % 360,
          illumination: Math.random() * 100,
          distanceKm: 380000 + Math.random() * 20000,
          apparentDiameter: 0.5 + Math.random() * 0.1
        }
      });
    }
    
    lunarPhases = await prisma.lunarPhase.findMany();
  }

  console.log(`‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ ${lunarPhases.length} –ª—É–Ω–Ω—ã—Ö —Ñ–∞–∑`);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± —É–ª–æ–≤–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –≥–æ–¥–∞
  console.log('üêü –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –æ–± —É–ª–æ–≤–∞—Ö...');
  
  const startDate = new Date('2023-01-01');
  const endDate = new Date('2024-12-31');
  let totalRecords = 0;
  
  const techniques = Object.values(FishingTechnique);

  for (let date = new Date(startDate); date <= endDate; date.setDate(date.getDate() + 1)) {
    const month = date.getMonth();
    const season = getSeason(month);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç 0 –¥–æ 5 –∑–∞–ø–∏—Å–µ–π –æ–± —É–ª–æ–≤–∞—Ö –≤ –¥–µ–Ω—å
    const numCatches = getRandomInt(0, 5);
    
    for (let i = 0; i < numCatches; i++) {
      const species = getRandomItem(PORTUGUESE_FISHING_DATA.PRIMARY_SPECIES);
      const location = getRandomItem(FISHING_LOCATIONS);
      const lunarPhase = getRandomItem(lunarPhases) as any; // Temporary type fix
      const weather = getRandomItem(WEATHER_CONDITIONS) as string;
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
      const seasonalMod = PORTUGUESE_FISHING_DATA.SEASONAL_ACTIVITY[species as keyof typeof PORTUGUESE_FISHING_DATA.SEASONAL_ACTIVITY]?.[season] || 0.5;
      const lunarMod = LUNAR_INFLUENCE[lunarPhase?.type as LunarPhaseType] || 1.0;
      const weatherMod = WEATHER_INFLUENCE[weather] || 1.0;
      
      // –û–±—â–∏–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å–ø–µ—Ö–∞ (–≤–ª–∏—è–µ—Ç –Ω–∞ –≤–µ—Å —Ä—ã–±—ã)
      const successMod = seasonalMod * lunarMod * weatherMod;
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–ª–æ–≤ –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –æ—á–µ–Ω—å –ø–ª–æ—Ö–∏–µ
      if (successMod < 0.3 && Math.random() > 0.4) continue;

      const numFish = getRandomInt(1, 4); // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—ã–± –≤ —É–ª–æ–≤–µ
      const catches = [];
      let totalWeight = 0;
      
      // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–∂–¥–æ–π —Ä—ã–±–µ –≤ —É–ª–æ–≤–µ
      for (let fishIndex = 0; fishIndex < numFish; fishIndex++) {
        const baseWeight = generateCatchWeight(species);
        const finalWeight = Math.round(baseWeight * (0.8 + successMod * 0.4));
        const length = Math.round(Math.pow(finalWeight / 15, 0.33) * 10); // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –¥–ª–∏–Ω–∞-–≤–µ—Å
        
        catches.push({
          species: species,
          weight: finalWeight / 1000, // –í –∫–≥
          length: length,
          timeOfCatch: new Date(date.getTime() + getRandomInt(6, 20) * 60 * 60 * 1000)
        });
        
        totalWeight += finalWeight / 1000; // –í –∫–≥
      }
      
      try {
        await prisma.catchRecord.create({
          data: {
            date: new Date(date),
            location: {
              name: location.name,
              latitude: location.latitude,
              longitude: location.longitude,
              depth: location.depth,
              distanceFromShore: location.distanceFromShore,
              bottomType: location.bottomType
            },
            lunarPhaseId: lunarPhase.id,
            catches: catches,
            totalWeight: totalWeight,
            totalCount: catches.length,
            weatherData: {
              condition: weather as string,
              temperature: getRandomFloat(15, 25),
              windSpeed: getRandomFloat(0, 15),
              pressure: getRandomFloat(1010, 1030)
            },
            tackleUsed: [
              {
                type: getRandomItem(['—Å–ø–∏–Ω–Ω–∏–Ω–≥', '—É–¥–æ—á–∫–∞', '—Ç—Ä–æ–ª–ª–∏–Ω–≥']),
                bait: getRandomItem(['—Å–∞—Ä–¥–∏–Ω–∞', '–∫–∞–ª—å–º–∞—Ä', '–∫—Ä–µ–≤–µ—Ç–∫–∞', '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–∏–º–∞–Ω–∫–∞'])
              }
            ],
            techniques: [getRandomItem(techniques)],
            duration: getRandomInt(120, 480), // 2-8 —á–∞—Å–æ–≤ –≤ –º–∏–Ω—É—Ç–∞—Ö
            success: successMod > 0.4,
            notes: `–†—ã–±–∞–ª–∫–∞ –≤ —Ä–∞–π–æ–Ω–µ ${location.name}. –ü–æ–π–º–∞–Ω–æ ${catches.length} —Ä—ã–±. –ü–æ–≥–æ–¥–∞: ${weather}`,
            verified: Math.random() > 0.1, // 90% –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã
            dataSource: CatchDataSource.HISTORICAL
          }
        });
        
        totalRecords++;
        
        if (totalRecords % 50 === 0) {
          console.log(`üìà –°–æ–∑–¥–∞–Ω–æ ${totalRecords} –∑–∞–ø–∏—Å–µ–π...`);
        }
        
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏:`, error);
      }
    }
  }

  console.log(`üéâ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°–æ–∑–¥–∞–Ω–æ ${totalRecords} –∑–∞–ø–∏—Å–µ–π –æ–± —É–ª–æ–≤–∞—Ö`);
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∏–¥–∞–º
  console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–ø–∏—Å—è–º:');
  const totalCount = await prisma.catchRecord.count();
  console.log(`  –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${totalCount}`);
  
  const avgWeight = await prisma.catchRecord.aggregate({
    _avg: {
      totalWeight: true
    }
  });
  console.log(`  –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å —É–ª–æ–≤–∞: ${avgWeight._avg.totalWeight?.toFixed(2)} –∫–≥`);
}

async function main() {
  try {
    await createCatchRecords();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main();
}

export { createCatchRecords };
