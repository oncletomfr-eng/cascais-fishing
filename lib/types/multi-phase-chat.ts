import { Channel } from 'stream-chat'

/**
 * üí¨ –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —á–∞—Ç–æ–≤ –¥–ª—è —Ä—ã–±–æ–ª–æ–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
 * –°–æ–≥–ª–∞—Å–Ω–æ –¢–ó: —á–∞—Ç—ã –¥–æ, –≤–æ –≤—Ä–µ–º—è –∏ –ø–æ—Å–ª–µ —Å–æ–±—ã—Ç–∏—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
 */

// –§–∞–∑—ã —á–∞—Ç–∞ –¥–ª—è —Ä—ã–±–æ–ª–æ–≤–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
export type ChatPhase = 'preparation' | 'live' | 'debrief'

// –¢–∏–ø —á–∞—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–∑ –¢–ó
export interface EventChat {
  phases: {
    preparation: Chat  // –ó–∞ –Ω–µ–¥–µ–ª—é –¥–æ —Å–æ–±—ã—Ç–∏—è 
    live: Chat        // –í–æ –≤—Ä–µ–º—è —Ä—ã–±–∞–ª–∫–∏
    debrief: Chat     // –ü–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è
  }
  
  features: {
    weatherUpdates: boolean    // –ü–æ–≥–æ–¥–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    catchPhotos: boolean       // –§–æ—Ç–æ —É–ª–æ–≤–∞
    locationSharing: boolean   // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –ª–æ–∫–∞—Ü–∏–∏
    tipSharing: boolean        // –°–æ–≤–µ—Ç—ã –ø–æ —Ä—ã–±–∞–ª–∫–µ
  }
}

// –û—Ç–¥–µ–ª—å–Ω—ã–π —á–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ–∞–∑—ã
export interface Chat {
  channelId: string
  phase: ChatPhase
  channel: Channel | null
  isActive: boolean
  startDate?: Date
  endDate?: Date
  
  // Stream Chat channel reference
  streamChannel?: any
  
  // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ñ–∞–∑—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  phaseConfig: ChatPhaseConfig
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ–∞–∑—ã —á–∞—Ç–∞
export interface ChatPhaseConfig {
  phase: ChatPhase
  title: string
  description: string
  icon: string
  color: string
  
  // –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —ç—Ç–æ–π —Ñ–∞–∑–µ
  allowedFeatures: ChatFeature[]
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  autoMessages: AutoMessage[]
  
  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  timeRestrictions?: {
    activeBefore?: number // –¥–Ω–µ–π –¥–æ —Å–æ–±—ã—Ç–∏—è
    activeAfter?: number  // –¥–Ω–µ–π –ø–æ—Å–ª–µ —Å–æ–±—ã—Ç–∏—è
    autoArchive?: boolean // –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  }
}

// –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞
export type ChatFeature = 
  | 'text_messages'
  | 'weather_updates' 
  | 'catch_photos'
  | 'location_sharing'
  | 'tip_sharing'
  | 'polls'
  | 'file_sharing'
  | 'voice_messages'
  | 'video_calls'

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
export interface AutoMessage {
  id: string
  type: 'welcome' | 'reminder' | 'weather_alert' | 'phase_transition'
  trigger: 'phase_start' | 'time_based' | 'weather_change' | 'event_based'
  content: string
  delay?: number // –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –ø–æ—Å–ª–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞
  conditions?: Record<string, any> // —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
}

// –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
export type CustomMessageType = 
  | 'weather_update'
  | 'catch_photo'
  | 'location_share'
  | 'fishing_tip'
  | 'gear_recommendation'
  | 'route_update'
  | 'safety_alert'

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
export interface CustomMessageData {
  type: CustomMessageType
  payload: WeatherUpdatePayload | CatchPhotoPayload | LocationSharePayload | FishingTipPayload
  timestamp: Date
  phase: ChatPhase
  tripId: string
  authorId: string
}

// Payloads –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π

export interface WeatherUpdatePayload {
  condition: string
  temperature: number
  windSpeed: number
  waveHeight: number
  visibility: number
  forecast: string
  severity: 'low' | 'medium' | 'high'
  source: 'automatic' | 'captain' | 'weather_service'
  coordinates?: {
    lat: number
    lng: number
  }
}

export interface CatchPhotoPayload {
  imageUrl: string
  fishSpecies?: string
  fishSize?: number
  fishWeight?: number
  location?: {
    lat: number
    lng: number
    name?: string
  }
  technique?: string
  bait?: string
  depth?: number
  timeOfCatch: Date
  notes?: string
}

export interface LocationSharePayload {
  coordinates: {
    lat: number
    lng: number
  }
  locationName?: string
  locationType: 'fishing_spot' | 'boat_position' | 'meeting_point' | 'harbor' | 'danger_zone'
  accuracy?: number
  heading?: number
  speed?: number
  timestamp: Date
  notes?: string
}

export interface FishingTipPayload {
  category: 'technique' | 'bait' | 'equipment' | 'location' | 'weather' | 'safety'
  title: string
  description: string
  difficulty: 'beginner' | 'intermediate' | 'advanced'
  species?: string[]
  conditions?: string[]
  images?: string[]
  author: {
    id: string
    name: string
    experienceLevel: 'novice' | 'experienced' | 'expert' | 'captain'
  }
  rating?: number
  verified?: boolean
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ñ–∞–∑ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export const DEFAULT_PHASE_CONFIGS: Record<ChatPhase, ChatPhaseConfig> = {
  preparation: {
    phase: 'preparation',
    title: 'üé£ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–æ–µ–∑–¥–∫–µ',
    description: '–û–±—Å—É–∂–¥–µ–Ω–∏–µ —Å–Ω–∞—Å—Ç–µ–π, –ø–ª–∞–Ω–æ–≤, –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏',
    icon: 'üìã',
    color: '#3B82F6', // blue
    allowedFeatures: [
      'text_messages',
      'weather_updates',
      'tip_sharing',
      'file_sharing',
      'polls'
    ],
    autoMessages: [
      {
        id: 'welcome',
        type: 'welcome',
        trigger: 'phase_start',
        content: 'üé£ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ä—ã–±–æ–ª–æ–≤–Ω–æ–π –ø–æ–µ–∑–¥–∫–µ! –ó–¥–µ—Å—å –º—ã –æ–±—Å—É–¥–∏–º —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ, –ø–ª–∞–Ω—ã –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º.'
      },
      {
        id: 'weather_reminder', 
        type: 'reminder',
        trigger: 'time_based',
        content: 'üå§Ô∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –ø–µ—Ä–µ–¥ –ø–æ–µ–∑–¥–∫–æ–π!',
        delay: 86400 // 24 —á–∞—Å–∞
      }
    ],
    timeRestrictions: {
      activeBefore: 7, // –∞–∫—Ç–∏–≤–µ–Ω –∑–∞ –Ω–µ–¥–µ–ª—é
      autoArchive: false
    }
  },
  
  live: {
    phase: 'live',
    title: 'üö§ –í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä—ã–±–∞–ª–∫–∏',
    description: '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è, —Å–æ–≤–µ—Ç—ã, —Ñ–æ—Ç–æ —É–ª–æ–≤–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏',
    icon: 'üé£',
    color: '#10B981', // green
    allowedFeatures: [
      'text_messages',
      'catch_photos',
      'location_sharing',
      'weather_updates',
      'tip_sharing',
      'voice_messages'
    ],
    autoMessages: [
      {
        id: 'trip_start',
        type: 'welcome',
        trigger: 'phase_start',
        content: 'üö§ –ü–æ–µ–∑–¥–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ —É–ª–æ–≤–∞–º–∏, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –ª—É—á—à–∏—Ö –º–µ—Å—Ç –∏ —Å–æ–≤–µ—Ç–∞–º–∏.'
      }
    ],
    timeRestrictions: {
      activeBefore: 0,
      activeAfter: 1,
      autoArchive: false
    }
  },
  
  debrief: {
    phase: 'debrief',
    title: 'üì∏ –ü–æ—Å–ª–µ –ø–æ–µ–∑–¥–∫–∏',
    description: '–û–±–º–µ–Ω –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏, —Ñ–æ—Ç–æ, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–µ–∑–¥–æ–∫',
    icon: 'üåÖ',
    color: '#F59E0B', // amber
    allowedFeatures: [
      'text_messages',
      'catch_photos',
      'tip_sharing',
      'file_sharing',
      'polls'
    ],
    autoMessages: [
      {
        id: 'debrief_start',
        type: 'welcome',
        trigger: 'phase_start',
        content: 'üåÖ –ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏, –ª—É—á—à–∏–º–∏ —Ñ–æ—Ç–æ –∏ –ø–ª–∞–Ω–∞–º–∏ –Ω–∞ –±—É–¥—É—â–µ–µ.'
      },
      {
        id: 'next_trip',
        type: 'reminder',
        trigger: 'time_based',
        content: 'üé£ –ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –ø–æ–µ–∑–¥–∫—É? –û–±—Å—É–¥–∏–º!',
        delay: 172800 // 48 —á–∞—Å–æ–≤
      }
    ],
    timeRestrictions: {
      activeBefore: 0,
      activeAfter: 30, // –∞–∫—Ç–∏–≤–µ–Ω –º–µ—Å—è—Ü –ø–æ—Å–ª–µ
      autoArchive: true
    }
  }
}

// –°–æ–±—ã—Ç–∏—è –º–Ω–æ–≥–æ—Ñ–∞–∑–Ω–æ–≥–æ —á–∞—Ç–∞
export interface MultiPhaseChatEvent {
  type: 'phase_changed' | 'message_sent' | 'feature_used' | 'auto_message_triggered'
  phase: ChatPhase
  tripId: string
  userId?: string
  data?: any
  timestamp: Date
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞
export interface ChatPhaseStats {
  phase: ChatPhase
  messagesCount: number
  participantsCount: number
  customMessagesCount: Record<CustomMessageType, number>
  averageResponseTime: number
  mostActiveUsers: string[]
  peakActivityTime?: Date
}

// –ú–µ–Ω–µ–¥–∂–µ—Ä –º–Ω–æ–≥–æ—Ñ–∞–∑–Ω–æ–≥–æ —á–∞—Ç–∞  
export interface MultiPhaseChatManager {
  tripId: string
  currentPhase: ChatPhase
  phases: Record<ChatPhase, Chat>
  features: EventChat['features']
  
  // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  switchPhase(phase: ChatPhase): Promise<void>
  getCurrentChat(): Chat | null
  sendCustomMessage(type: CustomMessageType, payload: any): Promise<void>
  getPhaseStats(phase: ChatPhase): ChatPhaseStats
  
  // –°–æ–±—ã—Ç–∏—è
  onPhaseChange?: (phase: ChatPhase) => void
  onCustomMessage?: (message: CustomMessageData) => void
}
