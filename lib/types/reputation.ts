// üéØ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ —Ä—ã–±–æ–ª–æ–≤–∞ - TypeScript —Ç–∏–ø—ã
// –ù–∞ –æ—Å–Ω–æ–≤–µ Context7 –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ Prisma –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö

export interface CatchRecord {
  id: string;
  species: string;
  weight?: number; // –∫–≥
  length?: number; // —Å–º
  location: string;
  date: Date;
  technique: string;
  photo?: string;
  verified: boolean;
  verifiedBy?: string;
}

export interface TechniqueSkill {
  technique: string; // "—Ç—Ä–æ–ª–ª–∏–Ω–≥", "–¥–∂–∏–≥", "—Å–ø–∏–Ω–Ω–∏–Ω–≥" –∏ —Ç.–¥.
  level: 'BEGINNER' | 'INTERMEDIATE' | 'ADVANCED' | 'EXPERT';
  experience: number; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö —Ä—ã–±–∞–ª–æ–∫ —Å —ç—Ç–æ–π —Ç–µ—Ö–Ω–∏–∫–æ–π
  firstUsed: Date;
  lastUsed: Date;
  successRate: number; // –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ä—ã–±–∞–ª–æ–∫
  avgCatchWeight?: number;
  specialties: string[]; // –≤–∏–¥—ã —Ä—ã–±, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω
}

export interface Certificate {
  id: string;
  name: string;
  issuer: string; // –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è-–≤—ã–¥–∞—Ç–µ–ª—å
  dateIssued: Date;
  expiryDate?: Date;
  level?: string;
  category: 'SAFETY' | 'TECHNIQUE' | 'GUIDE' | 'CAPTAIN' | 'MARINE' | 'ECOLOGY';
  verified: boolean;
  certificateNumber?: string;
  description?: string;
}

export interface FishingPreferences {
  preferredTechniques: string[];
  preferredSpecies: string[];
  preferredLocations: string[];
  preferredTimeSlots: ('EARLY_MORNING' | 'MORNING' | 'AFTERNOON' | 'EVENING')[];
  preferredWeather: string[];
  groupSize: 'SOLO' | 'SMALL_GROUP' | 'LARGE_GROUP' | 'ANY';
  experienceLevel: 'BEGINNER' | 'INTERMEDIATE' | 'ADVANCED' | 'EXPERT';
  equipment: 'BRING_OWN' | 'RENTAL' | 'PROVIDED' | 'FLEXIBLE';
  budget: {
    min: number;
    max: number;
    currency: string;
  };
}

export interface SocialRatings {
  mentorRating: number; // 1-10, –∫–∞–∫ —É—á–∏—Ç –Ω–æ–≤–∏—á–∫–æ–≤
  teamworkRating: number; // 1-10, —Ä–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ  
  reliabilityRating: number; // 1-10, –Ω–µ –æ—Ç–º–µ–Ω—è–µ—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–º–µ–Ω—Ç
  respectRating: number; // 1-10, —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª/—ç–∫–æ–ª–æ–≥–∏–∏
  totalReviews: number;
  reviewBreakdown: {
    excellent: number; // 9-10
    good: number;      // 7-8
    average: number;   // 5-6
    poor: number;      // 3-4
    terrible: number;  // 1-2
  };
}

export interface ExperienceStats {
  totalTrips: number;
  speciesCount: number; // —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∏–¥–æ–≤ –ø–æ–π–º–∞–Ω–æ
  biggestCatch: CatchRecord[];
  techniques: TechniqueSkill[];
  totalFishCaught: number;
  totalWeightCaught: number; // –∫–≥
  averageTripDuration: number; // —á–∞—Å–æ–≤
  successRate: number; // –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫
  favoriteLocations: string[];
  seasonalActivity: {
    spring: number;
    summer: number;
    autumn: number;
    winter: number;
  };
}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Ä—ã–±–æ–ª–æ–≤–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export interface FisherProfileExtended {
  id: string;
  userId: string;
  
  // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  bio?: string;
  experienceLevel: 'BEGINNER' | 'INTERMEDIATE' | 'ADVANCED' | 'EXPERT';
  specialties: string[]; // –æ–±–ª–∞—Å—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  
  // üéØ Experience - –æ–ø—ã—Ç —Ä—ã–±–æ–ª–æ–≤–∞
  experience: ExperienceStats;
  
  // ü§ù Social - —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
  social: SocialRatings;
  
  // üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  certifications: Certificate[];
  
  // ‚öôÔ∏è –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
  preferences: FishingPreferences;
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏
  rating: number; // –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ 1-10
  level: number; // —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞
  experiencePoints: number;
  activeDays: number;
  lastActiveAt: Date;
  
  // –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
  country?: string;
  city?: string;
  latitude?: number;
  longitude?: number;
  
  // –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–ª—è
  isActive: boolean;
  createdAt: Date;
  updatedAt: Date;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è API
export interface UpdateReputationRequest {
  userId: string;
  ratings?: Partial<SocialRatings>;
  experience?: Partial<ExperienceStats>;
  newCertificate?: Omit<Certificate, 'id'>;
  preferences?: Partial<FishingPreferences>;
}

export interface ReputationSummary {
  overallRating: number;
  strongPoints: string[];
  improvementAreas: string[];
  recommendationLevel: 'HIGHLY_RECOMMENDED' | 'RECOMMENDED' | 'NEUTRAL' | 'CAUTION';
  trustScore: number;
}
