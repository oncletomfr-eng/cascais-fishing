/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ —Ä—ã–±–æ–ª–æ–≤–∞
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

import { prisma } from '@/lib/generated/prisma';
import { 
  AchievementTrigger,
  SetAchievementProgressRequest,
  SetAchievementProgressResponse,
} from '@/lib/types/achievements';

// ============================================================================
// –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –°–ï–†–í–ò–°–ê
// ============================================================================

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
 */
export async function processAchievementTrigger(trigger: AchievementTrigger): Promise<void> {
  try {
    console.log(`üéØ Processing achievement trigger: ${trigger.event} for user ${trigger.userId}`);

    switch (trigger.event) {
      case 'trip_completed':
        await handleTripCompleted(trigger);
        break;
      
      case 'fish_caught':
        await handleFishCaught(trigger);
        break;
      
      case 'technique_used':
        await handleTechniqueUsed(trigger);
        break;
      
      case 'review_left':
        await handleReviewLeft(trigger);
        break;
      
      case 'event_created':
        await handleEventCreated(trigger);
        break;
      
      case 'user_helped':
        await handleUserHelped(trigger);
        break;
      
      default:
        console.log(`Unknown achievement trigger event: ${trigger.event}`);
    }
  } catch (error) {
    console.error('Error processing achievement trigger:', error);
  }
}

// ============================================================================
// –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
// ============================================================================

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏
 */
async function handleTripCompleted(trigger: AchievementTrigger) {
  const { userId, data } = trigger;
  const { 
    tripId, 
    fishingTechniques = [], 
    targetSpecies = [], 
    location, 
    isDeepSea = false,
    isReef = false,
    isCoastal = false,
    fishCaught = 0, // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—ã–±—ã –≤ –∫–≥
  } = data;

  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ–∏–ª—è
    await updateProfileStats(userId, {
      completedTrips: 1,
      totalFishCaught: fishCaught,
      activeDays: 1,
    });

    // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è - —É—á–∞—Å—Ç–∏–µ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ
    await incrementAchievement(userId, 'COMMUNITY_BUILDER', 1);
    
    // –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if (isDeepSea) {
      await incrementAchievement(userId, 'DEEP_SEA_ADVENTURER', 1);
    }
    if (isReef) {
      await incrementAchievement(userId, 'REEF_EXPLORER', 1);
    }
    if (isCoastal) {
      await incrementAchievement(userId, 'COASTAL_SPECIALIST', 1);
    }

    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ú–µ—Å—Ç–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç" - –º–Ω–æ–≥–æ –ø–æ–µ–∑–¥–æ–∫ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
    if (location) {
      await checkLocalExpertProgress(userId, location);
    }

    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫" - —Ä—ã–±–∞–ª–∫–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
    await checkWorldTravelerProgress(userId, location);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏
    for (const technique of fishingTechniques) {
      await processAchievementTrigger({
        event: 'technique_used',
        userId,
        data: { technique, tripId },
      });
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–π–º–∞–Ω–Ω—É—é —Ä—ã–±—É
    for (const species of targetSpecies) {
      await processAchievementTrigger({
        event: 'fish_caught',
        userId,
        data: { species, count: 1, tripId },
      });
    }

    console.log(`‚úÖ Trip completion processed for user ${userId}`);
  } catch (error) {
    console.error('Error handling trip completed:', error);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏–º–∫–∏ —Ä—ã–±—ã
 */
async function handleFishCaught(trigger: AchievementTrigger) {
  const { userId, data } = trigger;
  const { species, count = 1 } = data;

  try {
    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –≤–∏–¥–∞–º —Ä—ã–±
    switch (species) {
      case 'TUNA':
        await incrementAchievement(userId, 'TUNA_MASTER', count);
        break;
      case 'DORADO':
        await incrementAchievement(userId, 'DORADO_HUNTER', count);
        break;
      case 'SEABASS':
        await incrementAchievement(userId, 'SEABASS_EXPERT', count);
        break;
      case 'BLUE_MARLIN':
      case 'WHITE_MARLIN':
        await incrementAchievement(userId, 'MARLIN_LEGEND', count);
        break;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∏–¥–æ–≤ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
    await updateUniqueSpecies(userId, species);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –≤–∏–¥–æ–≤"
    await checkSpeciesCollectorProgress(userId);

    console.log(`üêü Fish caught processed: ${species} x${count} for user ${userId}`);
  } catch (error) {
    console.error('Error handling fish caught:', error);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫–∏ —Ä—ã–±–∞–ª–∫–∏
 */
async function handleTechniqueUsed(trigger: AchievementTrigger) {
  const { userId, data } = trigger;
  const { technique } = data;

  try {
    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Ç–µ—Ö–Ω–∏–∫–∞–º
    switch (technique) {
      case 'TROLLING':
        await incrementAchievement(userId, 'TROLLING_EXPERT', 1);
        break;
      case 'JIGGING':
        await incrementAchievement(userId, 'JIGGING_MASTER', 1);
        break;
      case 'BOTTOM_FISHING':
        await incrementAchievement(userId, 'BOTTOM_FISHING_PRO', 1);
        break;
      case 'FLY_FISHING':
        await incrementAchievement(userId, 'FLY_FISHING_ARTIST', 1);
        break;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–£–Ω–∏–≤–µ—Ä—Å–∞–ª —Ç–µ—Ö–Ω–∏–∫"
    await checkTechniqueVersatileProgress(userId, technique);

    console.log(`üé£ Technique used processed: ${technique} for user ${userId}`);
  } catch (error) {
    console.error('Error handling technique used:', error);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
 */
async function handleReviewLeft(trigger: AchievementTrigger) {
  const { userId, data } = trigger;
  const { rating = 5, isPositive = true } = data;

  try {
    // –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ - –º–∞—Å—Ç–µ—Ä –æ—Ç–∑—ã–≤–æ–≤
    await incrementAchievement(userId, 'REVIEW_MASTER', 1);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–∑—ã–≤–æ–≤ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
    await updateProfileStats(userId, {
      totalReviews: 1,
      positiveReviews: isPositive ? 1 : 0,
    });

    console.log(`‚≠ê Review left processed for user ${userId}`);
  } catch (error) {
    console.error('Error handling review left:', error);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
 */
async function handleEventCreated(trigger: AchievementTrigger) {
  const { userId, data } = trigger;

  try {
    // –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ - –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –≥—Ä—É–ø–ø
    await incrementAchievement(userId, 'GROUP_ORGANIZER', 1);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫
    await updateProfileStats(userId, {
      createdTrips: 1,
    });

    console.log(`üë• Event created processed for user ${userId}`);
  } catch (error) {
    console.error('Error handling event created:', error);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–º–æ—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ)
 */
async function handleUserHelped(trigger: AchievementTrigger) {
  const { userId, data } = trigger;

  try {
    // –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ - –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –Ω–æ–≤–∏—á–∫–æ–≤
    await incrementAchievement(userId, 'NEWBIE_MENTOR', 1);

    console.log(`üë®‚Äçüè´ User helped processed for user ${userId}`);
  } catch (error) {
    console.error('Error handling user helped:', error);
  }
}

// ============================================================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ============================================================================

/**
 * –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –≤–µ–ª–∏—á–∏–Ω—É
 */
async function incrementAchievement(
  userId: string, 
  achievementType: string, 
  increment: number
): Promise<void> {
  try {
    const response = await fetch(`${process.env.NEXTAUTH_URL}/api/achievements/progress`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        userId,
        achievementType,
        increment,
      }),
    });

    if (!response.ok) {
      console.error(`Failed to increment achievement ${achievementType} for user ${userId}`);
    } else {
      const result: SetAchievementProgressResponse = await response.json();
      if (result.achievement?.unlocked) {
        console.log(`üèÜ Achievement unlocked: ${result.achievement.name} for user ${userId}`);
      }
    }
  } catch (error) {
    console.error('Error incrementing achievement:', error);
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function updateProfileStats(
  userId: string,
  stats: {
    completedTrips?: number;
    createdTrips?: number;
    totalFishCaught?: number;
    activeDays?: number;
    totalReviews?: number;
    positiveReviews?: number;
  }
): Promise<void> {
  try {
    await prisma.fisherProfile.upsert({
      where: { userId },
      update: {
        ...(stats.completedTrips && { completedTrips: { increment: stats.completedTrips } }),
        ...(stats.createdTrips && { createdTrips: { increment: stats.createdTrips } }),
        ...(stats.totalFishCaught && { totalFishCaught: { increment: stats.totalFishCaught } }),
        ...(stats.activeDays && { activeDays: { increment: stats.activeDays } }),
        ...(stats.totalReviews && { totalReviews: { increment: stats.totalReviews } }),
        ...(stats.positiveReviews && { positiveReviews: { increment: stats.positiveReviews } }),
        lastActiveAt: new Date(),
      },
      create: {
        userId,
        completedTrips: stats.completedTrips || 0,
        createdTrips: stats.createdTrips || 0,
        totalFishCaught: stats.totalFishCaught || 0,
        activeDays: stats.activeDays || 1,
        totalReviews: stats.totalReviews || 0,
        positiveReviews: stats.positiveReviews || 0,
        experienceLevel: 'BEGINNER',
        lastActiveAt: new Date(),
      },
    });
  } catch (error) {
    console.error('Error updating profile stats:', error);
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∏–¥–æ–≤ —Ä—ã–± –≤ –ø—Ä–æ—Ñ–∏–ª–µ
 */
async function updateUniqueSpecies(userId: string, species: string): Promise<void> {
  try {
    const profile = await prisma.fisherProfile.findUnique({
      where: { userId },
    });

    if (profile && !profile.uniqueSpecies.includes(species)) {
      await prisma.fisherProfile.update({
        where: { userId },
        data: {
          uniqueSpecies: [...profile.uniqueSpecies, species],
        },
      });
    }
  } catch (error) {
    console.error('Error updating unique species:', error);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –≤–∏–¥–æ–≤"
 */
async function checkSpeciesCollectorProgress(userId: string): Promise<void> {
  try {
    const profile = await prisma.fisherProfile.findUnique({
      where: { userId },
    });

    if (profile) {
      const uniqueSpeciesCount = profile.uniqueSpecies.length;
      await incrementAchievement(userId, 'SPECIES_COLLECTOR', 0); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–≤–Ω—ã–π –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∏–¥–æ–≤
      const response = await fetch(`${process.env.NEXTAUTH_URL}/api/achievements/progress`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId,
          achievementType: 'SPECIES_COLLECTOR',
          progress: uniqueSpeciesCount,
        }),
      });
    }
  } catch (error) {
    console.error('Error checking species collector progress:', error);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è "–£–Ω–∏–≤–µ—Ä—Å–∞–ª —Ç–µ—Ö–Ω–∏–∫"
 */
async function checkTechniqueVersatileProgress(userId: string, newTechnique: string): Promise<void> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–µ–∑–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–µ—Ö–Ω–∏–∫–∞–º–∏
    const trips = await prisma.groupTrip.findMany({
      where: {
        participants: {
          some: { userId },
        },
        status: 'COMPLETED',
      },
      select: {
        fishingTechniques: true,
      },
    });

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏
    const uniqueTechniques = new Set<string>();
    trips.forEach(trip => {
      trip.fishingTechniques.forEach(technique => {
        uniqueTechniques.add(technique);
      });
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const techniqueCount = uniqueTechniques.size;
    if (techniqueCount >= 2) { // –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å 2 —Ç–µ—Ö–Ω–∏–∫
      await incrementAchievement(userId, 'TECHNIQUE_VERSATILE', 0);
      
      const response = await fetch(`${process.env.NEXTAUTH_URL}/api/achievements/progress`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId,
          achievementType: 'TECHNIQUE_VERSATILE',
          progress: techniqueCount,
        }),
      });
    }
  } catch (error) {
    console.error('Error checking technique versatile progress:', error);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è "–ú–µ—Å—Ç–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç"
 */
async function checkLocalExpertProgress(userId: string, location: string): Promise<void> {
  try {
    // –°—á–∏—Ç–∞–µ–º –ø–æ–µ–∑–¥–∫–∏ –≤ —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏
    const tripsInLocation = await prisma.groupTrip.count({
      where: {
        participants: {
          some: { userId },
        },
        status: 'COMPLETED',
        departureLocation: location,
      },
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å, –µ—Å–ª–∏ —ç—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø–æ–µ–∑–¥–æ–∫ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
    if (tripsInLocation >= 5) { // –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å 5 –ø–æ–µ–∑–¥–æ–∫
      const response = await fetch(`${process.env.NEXTAUTH_URL}/api/achievements/progress`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId,
          achievementType: 'LOCAL_EXPERT',
          progress: tripsInLocation,
        }),
      });
    }
  } catch (error) {
    console.error('Error checking local expert progress:', error);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è "–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫"
 */
async function checkWorldTravelerProgress(userId: string, newLocation?: string): Promise<void> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const trips = await prisma.groupTrip.findMany({
      where: {
        participants: {
          some: { userId },
        },
        status: 'COMPLETED',
        departureLocation: { not: null },
      },
      select: {
        departureLocation: true,
      },
      distinct: ['departureLocation'],
    });

    const uniqueLocations = trips
      .map(trip => trip.departureLocation)
      .filter(location => location !== null);

    if (uniqueLocations.length >= 2) { // –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å 2 –ª–æ–∫–∞—Ü–∏–π
      const response = await fetch(`${process.env.NEXTAUTH_URL}/api/achievements/progress`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId,
          achievementType: 'WORLD_TRAVELER',
          progress: uniqueLocations.length,
        }),
      });
    }
  } catch (error) {
    console.error('Error checking world traveler progress:', error);
  }
}

// ============================================================================
// –ü–£–ë–õ–ò–ß–ù–´–ï –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
// ============================================================================

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏–∑ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export const AchievementTriggers = {
  /**
   * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏
   */
  tripCompleted: (userId: string, tripData: any) => 
    processAchievementTrigger({
      event: 'trip_completed',
      userId,
      data: tripData,
    }),

  /**
   * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
   */
  eventCreated: (userId: string, eventData: any) => 
    processAchievementTrigger({
      event: 'event_created', 
      userId,
      data: eventData,
    }),

  /**
   * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞
   */
  reviewLeft: (userId: string, reviewData: any) => 
    processAchievementTrigger({
      event: 'review_left',
      userId,
      data: reviewData,
    }),

  /**
   * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –Ω–æ–≤–∏—á–∫—É
   */
  userHelped: (userId: string, helpData: any) => 
    processAchievementTrigger({
      event: 'user_helped',
      userId,
      data: helpData,
    }),
};
