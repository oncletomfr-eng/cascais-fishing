/**
 * Achievement Tracker Service - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
 * Task 21.1: Achievement Progress Tracking API - Service Layer
 * 
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
 * –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
 */

import { AchievementTrigger } from '@/lib/types/achievements';

interface TrackingOptions {
  notify?: boolean;
  immediate?: boolean; // –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ vs –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
}

export class AchievementTracker {
  private static instance: AchievementTracker;
  private trackingQueue: AchievementTrigger[] = [];
  private isProcessing = false;

  private constructor() {}

  static getInstance(): AchievementTracker {
    if (!AchievementTracker.instance) {
      AchievementTracker.instance = new AchievementTracker();
    }
    return AchievementTracker.instance;
  }

  /**
   * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
   */
  async trackTripCompleted(userId: string, tripData: {
    tripId: string;
    locationType?: 'reef' | 'deep_sea' | 'coastal';
    wasReliable?: boolean;
    techniquesUsed?: string[];
    fishCaught?: Array<{
      species: string;
      isNewSpecies?: boolean;
    }>;
    isNewLocation?: boolean;
    locationId?: string;
  }, options: TrackingOptions = {}) {
    
    console.log(`üéØ Tracking trip completion for user ${userId}`);
    
    const triggers: AchievementTrigger[] = [];
    
    // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏
    triggers.push({
      event: 'trip_completed',
      userId,
      data: {
        tripId: tripData.tripId,
        locationType: tripData.locationType,
        wasReliable: tripData.wasReliable,
        isNewLocation: tripData.isNewLocation,
        locationId: tripData.locationId
      }
    });

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–æ–π–º–∞–Ω–Ω—É—é —Ä—ã–±—É
    if (tripData.fishCaught) {
      for (const fish of tripData.fishCaught) {
        triggers.push({
          event: 'fish_caught',
          userId,
          data: {
            fishSpecies: fish.species,
            isNewSpecies: fish.isNewSpecies,
            tripId: tripData.tripId
          }
        });
      }
    }

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏
    if (tripData.techniquesUsed) {
      const uniqueTechniques = [...new Set(tripData.techniquesUsed)];
      for (const technique of uniqueTechniques) {
        triggers.push({
          event: 'technique_used',
          userId,
          data: {
            technique,
            tripId: tripData.tripId,
            isNewTechnique: await this.isNewTechniqueForUser(userId, technique)
          }
        });
      }
    }

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ—Å–µ—â–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
    if (tripData.locationId) {
      triggers.push({
        event: 'location_visited',
        userId,
        data: {
          locationId: tripData.locationId,
          isNewLocation: tripData.isNewLocation,
          tripId: tripData.tripId
        }
      });
    }

    const result = await this.processTriggers(triggers, options);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º badges –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏
    try {
      const { checkBadgesAfterTripCompletion } = await import('./badge-integration');
      await checkBadgesAfterTripCompletion(userId, tripData, {
        notify: options.notify !== false,
        reason: `Trip completed: ${tripData.tripId}`
      });
    } catch (error) {
      console.error('‚ùå Error checking badges after trip completion:', error);
    }

    return result;
  }

  /**
   * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
   */
  async trackReviewLeft(userId: string, reviewData: {
    reviewId: string;
    tripId: string;
    rating: number;
  }, options: TrackingOptions = {}) {
    
    const trigger: AchievementTrigger = {
      event: 'review_left',
      userId,
      data: {
        reviewId: reviewData.reviewId,
        tripId: reviewData.tripId,
        rating: reviewData.rating
      }
    };

    return this.processTriggers([trigger], options);
  }

  /**
   * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
   */
  async trackEventCreated(userId: string, eventData: {
    eventId: string;
    eventType: 'group' | 'solo' | 'competition';
    participantLimit?: number;
  }, options: TrackingOptions = {}) {
    
    const trigger: AchievementTrigger = {
      event: 'event_created',
      userId,
      data: {
        eventId: eventData.eventId,
        eventType: eventData.eventType,
        participantLimit: eventData.participantLimit
      }
    };

    return this.processTriggers([trigger], options);
  }

  /**
   * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ–º–æ—â—å –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async trackUserHelped(userId: string, helpData: {
    helpedUserId: string;
    helpType: 'newbie_mentoring' | 'technical_advice' | 'equipment_sharing';
    tripId?: string;
  }, options: TrackingOptions = {}) {
    
    const trigger: AchievementTrigger = {
      event: 'user_helped',
      userId,
      data: {
        helpedUserId: helpData.helpedUserId,
        helpType: helpData.helpType,
        tripId: helpData.tripId
      }
    };

    return this.processTriggers([trigger], options);
  }

  /**
   * –†—É—á–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
   */
  async trackManual(userId: string, achievementType: string, increment: number = 1, options: TrackingOptions = {}) {
    try {
      const response = await fetch('/api/achievements/track', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          userId,
          achievementType,
          increment,
          notify: options.notify !== false
        })
      });

      const result = await response.json();
      
      if (!result.success) {
        console.error(`‚ùå Manual achievement tracking failed:`, result.error);
        return { success: false, error: result.error };
      }

      console.log(`‚úÖ Manual achievement tracked: ${achievementType} +${increment}`);
      return { 
        success: true, 
        achievement: result.achievement,
        newlyUnlocked: result.newlyUnlocked
      };
    } catch (error) {
      console.error('‚ùå Error in manual achievement tracking:', error);
      return { success: false, error: 'network_error' };
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
   */
  private async processTriggers(triggers: AchievementTrigger[], options: TrackingOptions = {}) {
    if (options.immediate) {
      // –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
      return this.sendTriggersToAPI(triggers);
    } else {
      // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
      this.trackingQueue.push(...triggers);
      this.processQueueAsync();
      return { success: true, queued: triggers.length };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä—ã –Ω–∞ API
   */
  private async sendTriggersToAPI(triggers: AchievementTrigger[]) {
    const results = [];
    
    for (const trigger of triggers) {
      try {
        const response = await fetch('/api/achievements/track', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(trigger)
        });

        const result = await response.json();
        results.push({
          trigger: trigger.event,
          success: result.success,
          updated: result.updated?.length || 0,
          newlyUnlocked: result.newlyUnlocked || 0
        });

        if (!result.success) {
          console.error(`‚ùå Achievement tracking failed for ${trigger.event}:`, result.error);
        }
      } catch (error) {
        console.error(`‚ùå Network error tracking ${trigger.event}:`, error);
        results.push({
          trigger: trigger.event,
          success: false,
          error: 'network_error'
        });
      }
    }

    return {
      success: true,
      results,
      totalProcessed: triggers.length
    };
  }

  /**
   * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏
   */
  private async processQueueAsync() {
    if (this.isProcessing || this.trackingQueue.length === 0) {
      return;
    }

    this.isProcessing = true;
    
    try {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ –±–∞—Ç—á–∞–º
      const batchSize = 5;
      while (this.trackingQueue.length > 0) {
        const batch = this.trackingQueue.splice(0, batchSize);
        await this.sendTriggersToAPI(batch);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
        if (this.trackingQueue.length > 0) {
          await new Promise(resolve => setTimeout(resolve, 100));
        }
      }
    } catch (error) {
      console.error('‚ùå Error processing achievement queue:', error);
    } finally {
      this.isProcessing = false;
    }
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏
   */
  private async isNewTechniqueForUser(userId: string, technique: string): Promise<boolean> {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    return false;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
   */
  getQueueStatus() {
    return {
      queueLength: this.trackingQueue.length,
      isProcessing: this.isProcessing
    };
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  clearQueue() {
    this.trackingQueue = [];
    this.isProcessing = false;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const achievementTracker = AchievementTracker.getInstance();

// Convenience —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export const trackTripCompleted = (userId: string, tripData: Parameters<typeof achievementTracker.trackTripCompleted>[1], options?: TrackingOptions) => 
  achievementTracker.trackTripCompleted(userId, tripData, options);

export const trackReviewLeft = (userId: string, reviewData: Parameters<typeof achievementTracker.trackReviewLeft>[1], options?: TrackingOptions) => 
  achievementTracker.trackReviewLeft(userId, reviewData, options);

export const trackEventCreated = (userId: string, eventData: Parameters<typeof achievementTracker.trackEventCreated>[1], options?: TrackingOptions) => 
  achievementTracker.trackEventCreated(userId, eventData, options);

export const trackUserHelped = (userId: string, helpData: Parameters<typeof achievementTracker.trackUserHelped>[1], options?: TrackingOptions) => 
  achievementTracker.trackUserHelped(userId, helpData, options);

export const trackManual = (userId: string, achievementType: string, increment?: number, options?: TrackingOptions) => 
  achievementTracker.trackManual(userId, achievementType, increment, options);
