/**
 * Smart Recommendations Service v2.0
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ OpenAI API
 * –û—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä—ã–±–æ–ª–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ö–∞—à–∫–∞–π—à
 */

import { OpenAI } from 'openai';
import {
  FishSpecies,
  FishingTechnique,
  WindDirection,
  SkillLevelRequired,
  UserRole,
  WeatherCondition,
  PrismaClient,
  RecommendationType
} from '@prisma/client';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä—ã–±–æ–ª–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
const FISHING_CONFIG = {
  // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C) - –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –≤–∏–¥–æ–≤ —Ä—ã–± —É –±–µ—Ä–µ–≥–æ–≤ –ö–∞—à–∫–∞–π—à
  SPECIES_TEMPERATURE_RANGES: {
    SEABASS: [12, 22],        // –ú–æ—Ä—Å–∫–æ–π –æ–∫—É–Ω—å
    DORADO: [18, 26],         // –î–æ—Ä–∞–¥–æ
    TUNA: [20, 28],           // –¢—É–Ω–µ—Ü
    SARDINE: [14, 20],        // –°–∞—Ä–¥–∏–Ω–∞
    MACKEREL: [12, 18],       // –°–∫—É–º–±—Ä–∏—è
    SOLE: [8, 16],            // –ö–∞–º–±–∞–ª–∞
    BREAM: [15, 23],          // –õ–µ—â
    GROUPER: [16, 24],        // –ì—Ä—É–ø–µ—Ä
    BASS: [14, 20],           // –ë–∞—Å
    COD: [6, 14],             // –¢—Ä–µ—Å–∫–∞
    ANCHOVY: [16, 22],        // –ê–Ω—á–æ—É—Å
    SALMON: [8, 16],          // –õ–æ—Å–æ—Å—å
    MULLET: [14, 22],         // –ö–µ—Ñ–∞–ª—å
    FLOUNDER: [8, 18],        // –ö–∞–º–±–∞–ª–∞-—Ñ–ª–∞—É–Ω–¥–µ—Ä
    WHITING: [10, 16]         // –ü—É—Ç–∞—Å—Å—É
  },
  
  // –í–µ—Ç–µ—Ä (–º/—Å) - –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä—ã–±
  WIND_CONDITIONS: {
    CALM: [0, 3],             // –®—Ç–∏–ª—å - –æ—Ç–ª–∏—á–Ω–æ –¥–ª—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ–π —Ä—ã–±—ã
    LIGHT: [3, 7],            // –õ–µ–≥–∫–∏–π –≤–µ—Ç–µ—Ä - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ —Ö–æ—Ä–æ—à–æ
    MODERATE: [7, 12],        // –£–º–µ—Ä–µ–Ω–Ω—ã–π - —Ö–æ—Ä–æ—à–æ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≤–æ–¥–Ω–æ–π —Ä—ã–±—ã
    STRONG: [12, 18],         // –°–∏–ª—å–Ω—ã–π - —Ç–æ–ª—å–∫–æ –æ–ø—ã—Ç–Ω—ã–º —Ä—ã–±–∞–∫–∞–º
    STORM: [18, 999]          // –®—Ç–æ—Ä–º - –æ–ø–∞—Å–Ω–æ
  },
  
  // –î–∞–≤–ª–µ–Ω–∏–µ (–≥–ü–∞) - –∫—Ä–∏—Ç–∏—á–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä –∫–ª–µ–≤–∞
  PRESSURE_RANGES: {
    HIGH: [1020, 1040],       // –í—ã—Å–æ–∫–æ–µ - —Å–ª–∞–±—ã–π –∫–ª–µ–≤
    NORMAL: [1000, 1020],     // –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ - —Ö–æ—Ä–æ—à–∏–π –∫–ª–µ–≤
    LOW: [980, 1000],         // –ù–∏–∑–∫–æ–µ - –æ—Ç–ª–∏—á–Ω—ã–π –∫–ª–µ–≤ –ø–µ—Ä–µ–¥ –Ω–µ–ø–æ–≥–æ–¥–æ–π
    VERY_LOW: [950, 980]      // –û—á–µ–Ω—å –Ω–∏–∑–∫–æ–µ - –±—É—Ä—è, –Ω–µ —Ä—ã–±–∞—á–∏—Ç—å
  }
};

const prisma = new PrismaClient();

export class SmartRecommendationsServiceV2 {

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–≥–æ–¥–Ω—ã–µ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ OpenAI API best practices
   */
  async generateWeatherAIRecommendations(weatherData: {
    temperature: number;
    windSpeed: number;
    windDirection: WindDirection;
    pressure: number;
    humidity: number;
    cloudCover: number;
    location: { lat: number; lon: number };
  }): Promise<{
    recommendation: string;
    recommendedSpecies: FishSpecies[];
    recommendedTechniques: FishingTechnique[];
    confidenceLevel: number;
    reasoning: string;
    optimalTime: { start: number; end: number };
    recommendedDepth: number;
  }> {

    // –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —á–µ—Ç–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const systemPrompt = `–í—ã - –æ–ø—ã—Ç–Ω—ã–π –ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π –∫–∞–ø–∏—Ç–∞–Ω —Ä—ã–±–æ–ª–æ–≤–Ω–æ–≥–æ —Å—É–¥–Ω–∞ —Å 25-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º —Ä–∞–±–æ—Ç—ã –≤ –≤–æ–¥–∞—Ö —É –ö–∞—à–∫–∞–π—à, –ê—Ç–ª–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–∫–µ–∞–Ω–∞. 

–í–ê–®–ê –≠–ö–°–ü–ï–†–¢–ò–ó–ê:
- –ó–Ω–∞–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è —Ä—ã–± –≤ –ê—Ç–ª–∞–Ω—Ç–∏–∫–µ —É –±–µ—Ä–µ–≥–æ–≤ –ü–æ—Ä—Ç—É–≥–∞–ª–∏–∏
- –ü–æ–Ω–∏–º–∞–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è –ø–æ–≥–æ–¥—ã –Ω–∞ –∫–ª–µ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∏–¥–æ–≤ —Ä—ã–±
- –û–ø—ã—Ç —Ä—ã–±–∞–ª–∫–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
- –ó–Ω–∞–Ω–∏–µ –ª—É—á—à–∏—Ö —Ç–µ—Ö–Ω–∏–∫ –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ —Ä—ã–±

–î–û–°–¢–£–ü–ù–´–ï –í–ò–î–´ –†–´–ë: ${Object.values(FishSpecies).join(', ')}
–î–û–°–¢–£–ü–ù–´–ï –¢–ï–•–ù–ò–ö–ò: ${Object.values(FishingTechnique).join(', ')}

–û–¢–í–ï–ß–ê–ô–¢–ï –°–¢–†–û–ì–û –í JSON –§–û–†–ú–ê–¢–ï –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:
{
  "recommendation": "–ö—Ä–∞—Ç–∫–∏–π —Å–æ–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)",
  "species": ["–í–ò–î–ê1", "–í–ò–î–ê2"], 
  "techniques": ["–¢–ï–•–ù–ò–ö–ê1"],
  "reasoning": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ (200-300 —Å–∏–º–≤–æ–ª–æ–≤)",
  "confidence": 0.85,
  "optimal_depth": 12.5,
  "optimal_time_start": 6,
  "optimal_time_end": 10
}`;

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const userPrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä—ã–±–∞–ª–∫–∏:

–ü–û–ì–û–î–ê –°–ï–ô–ß–ê–° (–ö–∞—à–∫–∞–π—à, –ê—Ç–ª–∞–Ω—Ç–∏–∫–∞):
üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${weatherData.temperature}¬∞C
üí® –í–µ—Ç–µ—Ä: ${weatherData.windSpeed} –º/—Å, ${weatherData.windDirection}
üìà –î–∞–≤–ª–µ–Ω–∏–µ: ${weatherData.pressure} –≥–ü–∞
üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${weatherData.humidity}%
‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: ${Math.round(weatherData.cloudCover * 100)}%

–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö —É—Å–ª–æ–≤–∏–π –¥–∞–π—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é.`;

    try {
      const response = await openai.chat.completions.create({
        model: 'gpt-4o-mini', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —ç–∫–æ–Ω–æ–º–∏—á–Ω—É—é –º–æ–¥–µ–ª—å
        messages: [
          {
            role: 'system',
            content: systemPrompt
          },
          {
            role: 'user', 
            content: userPrompt
          }
        ],
        temperature: 0.3, // –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        max_tokens: 400,
        response_format: { type: "json_object" }, // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π JSON
        presence_penalty: 0.1, // –ù–µ–±–æ–ª—å—à–æ–π —à—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        frequency_penalty: 0.1,
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º prompt caching –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
        // user: `fishing_weather_${weatherData.location.lat}_${weatherData.location.lon}`
      });

      const result = response.choices[0].message.content;
      if (!result) {
        throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI');
      }

      const parsed = JSON.parse(result);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –º–∞–ø–ø–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞
      const recommendation = {
        recommendation: parsed.recommendation || '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
        recommendedSpecies: (parsed.species || []).filter((s: string) => 
          Object.values(FishSpecies).includes(s as FishSpecies)
        ) as FishSpecies[],
        recommendedTechniques: (parsed.techniques || []).filter((t: string) => 
          Object.values(FishingTechnique).includes(t as FishingTechnique)
        ) as FishingTechnique[],
        confidenceLevel: Math.max(0.1, Math.min(0.95, parsed.confidence || 0.5)),
        reasoning: parsed.reasoning || '–ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π',
        optimalTime: {
          start: Math.max(0, Math.min(23, parsed.optimal_time_start || 6)),
          end: Math.max(1, Math.min(24, parsed.optimal_time_end || 18))
        },
        recommendedDepth: Math.max(0, parsed.optimal_depth || 10)
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ –ë–î –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      await this.saveWeatherRecommendation({
        weatherData,
        recommendation: recommendation.recommendation,
        species: recommendation.recommendedSpecies,
        techniques: recommendation.recommendedTechniques,
        confidence: recommendation.confidenceLevel,
        tokensUsed: response.usage?.total_tokens || 0
      });

      return recommendation;

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', error);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫ OpenAI
      if (error?.code === 'insufficient_quota') {
        throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ OpenAI API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ platform.openai.com');
      }
      
      if (error?.code === 'rate_limit_exceeded') {
        throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }

      // Fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–∞–≤–∏–ª
      return this.generateFallbackRecommendation(weatherData);
    }
  }

  /**
   * Fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ OpenAI API
   */
  private generateFallbackRecommendation(weatherData: any): any {
    console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...');
    
    let species: FishSpecies[] = [];
    let techniques: FishingTechnique[] = [];
    let recommendation = '';
    let confidence = 0.6;
    
    // –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    if (weatherData.temperature >= 20) {
      species = [FishSpecies.DORADO, FishSpecies.TUNA];
      techniques = [FishingTechnique.TROLLING];
      recommendation = '–ü—Ä–∏ —Ç–µ–ø–ª–æ–π –≤–æ–¥–µ —Ö–æ—Ä–æ—à–æ –∏–¥–µ—Ç –¥–æ—Ä–∞–¥–æ –Ω–∞ —Ç—Ä–æ–ª–ª–∏–Ω–≥';
    } else if (weatherData.temperature >= 15) {
      species = [FishSpecies.SEABASS, FishSpecies.MACKEREL];
      techniques = [FishingTechnique.JIGGING];
      recommendation = '–ü—Ä–∏ —É–º–µ—Ä–µ–Ω–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–∫—É–Ω—è –Ω–∞ –¥–∂–∏–≥';
    } else {
      species = [FishSpecies.COD, FishSpecies.FLOUNDER];
      techniques = [FishingTechnique.BOTTOM_FISHING];
      recommendation = '–í –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ–π –≤–æ–¥–µ –ª—É—á—à–µ –¥–æ–Ω–Ω–∞—è —Ä—ã–±–∞–ª–∫–∞';
    }

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–µ—Ç—Ä—É
    if (weatherData.windSpeed > 10) {
      techniques = [FishingTechnique.BOTTOM_FISHING];
      recommendation += ' (—Å–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä - –ª—É—á—à–µ –¥–æ–Ω–Ω—ã–µ —Å–Ω–∞—Å—Ç–∏)';
      confidence = 0.4;
    }

    return {
      recommendation,
      recommendedSpecies: species,
      recommendedTechniques: techniques,
      confidenceLevel: confidence,
      reasoning: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –±–∞–∑–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª–∞—Ö (AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)',
      optimalTime: { start: 6, end: 12 },
      recommendedDepth: 8
    };
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –ë–î –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —É–ª—É—á—à–µ–Ω–∏—è
   */
  private async saveWeatherRecommendation(data: {
    weatherData: any;
    recommendation: string;
    species: FishSpecies[];
    techniques: FishingTechnique[];
    confidence: number;
    tokensUsed: number;
  }): Promise<void> {
    try {
      await prisma.smartRecommendation.create({
        data: {
          type: 'WEATHER_AI',
          title: '–ü–æ–≥–æ–¥–Ω–∞—è AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è',
          description: data.recommendation,
          aiGeneratedText: data.recommendation,
          recommendedSpecies: data.species,
          recommendedTechniques: data.techniques,
          confidenceScore: data.confidence,
          weatherConditions: {
            temperature: data.weatherData.temperature,
            windSpeed: data.weatherData.windSpeed,
            windDirection: data.weatherData.windDirection,
            pressure: data.weatherData.pressure,
            humidity: data.weatherData.humidity,
            cloudCover: data.weatherData.cloudCover,
            location: data.weatherData.location,
            tokensUsed: data.tokensUsed,
            timestamp: new Date().toISOString()
          },
          triggerContext: {
            service: 'SmartRecommendationsServiceV2',
            version: '2.0',
            model: 'gpt-4o-mini'
          },
          validFrom: new Date(),
          isActive: true
        }
      });
    } catch (error) {
      console.error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ –ë–î:', error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ë–î
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è OpenAI API
   */
  async getUsageStats(): Promise<{
    totalRecommendations: number;
    totalTokensUsed: number;
    averageConfidence: number;
    lastWeekUsage: number;
  }> {
    try {
      const stats = await prisma.smartRecommendation.aggregate({
        where: {
          type: 'WEATHER_AI',
          createdAt: {
            gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) // –ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è
          }
        },
        _count: true,
        _avg: {
          confidenceScore: true
        }
      });

      const weeklyStats = await prisma.smartRecommendation.count({
        where: {
          type: 'WEATHER_AI',
          createdAt: {
            gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)
          }
        }
      });

      // –ü–æ–¥—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ metadata
      const recommendations = await prisma.smartRecommendation.findMany({
        where: {
          type: 'WEATHER_AI',
          createdAt: {
            gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)
          }
        },
        select: {
          weatherConditions: true
        }
      });

      const totalTokensUsed = recommendations.reduce((total, rec) => {
        const tokens = (rec.weatherConditions as any)?.tokensUsed || 0;
        return total + tokens;
      }, 0);

      return {
        totalRecommendations: stats._count || 0,
        totalTokensUsed,
        averageConfidence: stats._avg.confidenceScore || 0,
        lastWeekUsage: weeklyStats
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return {
        totalRecommendations: 0,
        totalTokensUsed: 0,
        averageConfidence: 0,
        lastWeekUsage: 0
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è OpenAI API –∏ –∫–≤–æ—Ç—ã
   */
  async checkAPIHealth(): Promise<{
    status: 'healthy' | 'quota_exceeded' | 'rate_limited' | 'error';
    message: string;
    canMakeRequests: boolean;
  }> {
    try {
      const testResponse = await openai.chat.completions.create({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'user',
            content: '–°–∫–∞–∂–∏ –ø—Ä–æ—Å—Ç–æ "OK"'
          }
        ],
        max_tokens: 5,
        temperature: 0
      });

      if (testResponse.choices[0].message.content) {
        return {
          status: 'healthy',
          message: 'OpenAI API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ',
          canMakeRequests: true
        };
      }

      return {
        status: 'error',
        message: '–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI',
        canMakeRequests: false
      };

    } catch (error: any) {
      console.error('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API:', error);

      if (error?.code === 'insufficient_quota') {
        return {
          status: 'quota_exceeded',
          message: '–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ OpenAI. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ platform.openai.com',
          canMakeRequests: false
        };
      }

      if (error?.code === 'rate_limit_exceeded') {
        return {
          status: 'rate_limited',
          message: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
          canMakeRequests: false
        };
      }

      return {
        status: 'error',
        message: `–û—à–∏–±–∫–∞ API: ${error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
        canMakeRequests: false
      };
    }
  }
}

export const smartRecommendationsServiceV2 = new SmartRecommendationsServiceV2();
