import OpenAI from 'openai';
import prisma from '@/lib/prisma';
import { 
  FishSpecies, 
  FishingTechnique, 
  SkillLevelRequired,
  UserRole,
  RecommendationType,
  CaptainRecommendationCategory,
  WindDirection
} from '@prisma/client';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
const openaiApiKey = process.env.OPENAI_API_KEY;

if (!openaiApiKey) {
  console.warn('‚ö†Ô∏è OPENAI_API_KEY is not set in environment variables (smart-recommendations-service)');
  console.warn('üí° OpenAI service will use fallback recommendations only');
}

const openai = new OpenAI({
  apiKey: openaiApiKey || 'sk-placeholder-for-build-only',
});

export class SmartRecommendationsService {

  // =========================================================================
  // –ü–û–ì–û–î–ù–´–ô AI: "–ü—Ä–∏ —Ç–∞–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö –ª—É—á—à–µ –∏–¥—ë—Ç –º–æ—Ä—Å–∫–æ–π –æ–∫—É–Ω—å –Ω–∞ –¥–∂–∏–≥"
  // =========================================================================
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
   */
  async generateWeatherAIRecommendations(weatherData: {
    temperature: number;
    windSpeed: number;
    windDirection: WindDirection;
    pressure: number;
    humidity: number;
    cloudCover: number;
    location: { lat: number; lon: number };
  }): Promise<{
    recommendation: string;
    recommendedSpecies: FishSpecies[];
    recommendedTechniques: FishingTechnique[];
    confidenceLevel: number;
    reasoning: string;
  }> {
    
    const prompt = `
–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –∫–∞–ø–∏—Ç–∞–Ω —Ä—ã–±–æ–ª–æ–≤–Ω–æ–≥–æ —Å—É–¥–Ω–∞ –≤ –ö–∞—à–∫–∞–π—à, –ü–æ—Ä—Ç—É–≥–∞–ª–∏—è. 
–ù–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–∞–π —É–º–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è —Ä—ã–±–∞–ª–∫–∏.

–¢–ï–ö–£–©–ò–ï –ü–û–ì–û–î–ù–´–ï –£–°–õ–û–í–ò–Ø:
- –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${weatherData.temperature}¬∞C
- –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: ${weatherData.windSpeed} –º/—Å
- –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: ${weatherData.windDirection}
- –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: ${weatherData.pressure} –≥–ü–∞
- –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${weatherData.humidity}%
- –û–±–ª–∞—á–Ω–æ—Å—Ç—å: ${Math.round(weatherData.cloudCover * 100)}%
- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${weatherData.location.lat}, ${weatherData.location.lon}

–î–û–°–¢–£–ü–ù–´–ï –í–ò–î–´ –†–´–ë: ${Object.values(FishSpecies).join(', ')}
–î–û–°–¢–£–ü–ù–´–ï –¢–ï–•–ù–ò–ö–ò: ${Object.values(FishingTechnique).join(', ')}

–î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "recommendation": "–ö—Ä–∞—Ç–∫–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º (–¥–æ 150 —Å–∏–º–≤–æ–ª–æ–≤)",
  "species": ["SEABASS", "DORADO"], // 1-3 –≤–∏–¥–∞ —Ä—ã–± –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
  "techniques": ["TROLLING", "JIGGING"], // 1-2 —Ç–µ—Ö–Ω–∏–∫–∏ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö  
  "reasoning": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–∏ –≤–∏–¥—ã –∏ —Ç–µ—Ö–Ω–∏–∫–∏ –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—Ç –ø—Ä–∏ –¥–∞–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö",
  "confidence": 0.85, // —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç 0.1 –¥–æ 0.95
  "depth_recommendation": 15.5, // —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –≥–ª—É–±–∏–Ω–∞ –≤ –º–µ—Ç—Ä–∞—Ö
  "time_of_day": [6, 10] // –ª—É—á—à–µ–µ –≤—Ä–µ–º—è [–Ω–∞—á–∞–ª—å–Ω—ã–π_—á–∞—Å, –∫–æ–Ω–µ—á–Ω—ã–π_—á–∞—Å]
}

–ë–∞–∑–∏—Ä—É–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–Ω–∞–Ω–∏—è—Ö –æ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ —Ä—ã–± –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.
`;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenAI API
    if (!openaiApiKey) {
      console.log('‚ö†Ô∏è OpenAI API key not available, using fallback recommendations');
      return this.generateFallbackWeatherRecommendation(weatherData);
    }

    try {
      const completion = await openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–æ—Ä—Å–∫–æ–π —Ä—ã–±–∞–ª–∫–µ –≤ –ü–æ—Ä—Ç—É–≥–∞–ª–∏–∏. –û—Ç–≤–µ—á–∞–π –≤—Å–µ–≥–¥–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º JSON —Ñ–æ—Ä–º–∞—Ç–µ.'
          },
          { role: 'user', content: prompt }
        ],
        temperature: 0.7,
        max_tokens: 800,
      });

      const response = completion.choices[0]?.message?.content;
      if (!response) throw new Error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI');

      // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
      const aiData = JSON.parse(response);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await prisma.weatherRecommendation.create({
        data: {
          weatherConditions: weatherData,
          windSpeed: weatherData.windSpeed,
          windDirection: weatherData.windDirection,
          temperature: weatherData.temperature,
          pressure: weatherData.pressure,
          humidity: weatherData.humidity,
          cloudCover: weatherData.cloudCover,
          recommendedSpecies: aiData.species || [],
          recommendedTechniques: aiData.techniques || [],
          recommendedTimeOfDay: aiData.time_of_day || null,
          recommendedDepth: aiData.depth_recommendation || null,
          aiAnalysis: aiData.recommendation,
          aiReasoning: aiData.reasoning,
          confidenceLevel: aiData.confidence || 0.5,
          location: weatherData.location,
          validFor: new Date(Date.now() + 6 * 60 * 60 * 1000), // –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 6 —á–∞—Å–æ–≤
          usageCount: 0,
          successRate: 0.0,
        },
      });

      return {
        recommendation: aiData.recommendation,
        recommendedSpecies: aiData.species || [],
        recommendedTechniques: aiData.techniques || [],
        confidenceLevel: aiData.confidence || 0.5,
        reasoning: aiData.reasoning,
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–≥–æ–¥–Ω–æ–π AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', error);
      
      // Fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
      return {
        recommendation: '–ü—Ä–∏ —Ç–µ–∫—É—â–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–æ—Ä—Å–∫–∞—è —Ä—ã–±–∞–ª–∫–∞ —Å —É–º–µ—Ä–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é.',
        recommendedSpecies: [FishSpecies.SEABASS],
        recommendedTechniques: [FishingTechnique.TROLLING],
        confidenceLevel: 0.3,
        reasoning: '–ë–∞–∑–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ AI –∞–Ω–∞–ª–∏–∑–∞.',
      };
    }
  }

  // =========================================================================
  // –ò–°–¢–û–†–ò–Ø: "–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ—Ö–æ–∂–∏—Ö –ø–æ–µ–∑–¥–æ–∫ —Ç–∞–∫–∂–µ —Ö–æ–¥–∏–ª–∏ –Ω–∞..."
  // =========================================================================

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Ö–æ–∂–∏—Ö –ø–æ–µ–∑–¥–æ–∫
   */
  async generateHistoryBasedRecommendations(userId: string, currentTripId?: string): Promise<{
    recommendations: Array<{
      tripId: string;
      title: string;
      reason: string;
      similarity: number;
      participants: number;
    }>;
  }> {
    
    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userBookings = await prisma.groupBooking.findMany({
      where: { 
        userId,
        status: 'CONFIRMED'
      },
      include: {
        trip: {
          include: {
            captain: true,
            bookings: true,
          }
        }
      },
      orderBy: { createdAt: 'desc' },
      take: 10, // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–µ–∑–¥–æ–∫
    });

    if (userBookings.length === 0) {
      return { recommendations: [] };
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userPreferences = this.analyzeUserPreferences(userBookings);

    // –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –ø–æ–µ–∑–¥–∫–∏
    const similarTrips = await prisma.groupTrip.findMany({
      where: {
        id: currentTripId ? { not: currentTripId } : undefined,
        status: 'OPEN',
        date: { gte: new Date() }, // –¢–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –ø–æ–µ–∑–¥–∫–∏
        OR: [
          { targetSpecies: { hasSome: userPreferences.preferredSpecies } },
          { fishingTechniques: { hasSome: userPreferences.preferredTechniques } },
          { skillLevel: { in: userPreferences.suitableSkillLevels } },
        ],
      },
      include: {
        captain: true,
        bookings: true,
        reviews: true,
      },
      take: 20,
    });

    // –í—ã—á–∏—Å–ª—è–µ–º similarity score –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–µ–∑–¥–∫–∏
    const recommendations = similarTrips.map(trip => {
      const similarity = this.calculateTripSimilarity(userPreferences, trip);
      
      const participantsWhoBookedSimilar = this.getParticipantsWhoBookedSimilar(
        userBookings.map(b => b.tripId),
        trip.id
      );

      return {
        tripId: trip.id,
        title: trip.title,
        reason: this.generateHistoryReason(userPreferences, trip, similarity),
        similarity: similarity,
        participants: participantsWhoBookedSimilar,
      };
    })
    .filter(r => r.similarity > 0.3) // –¢–æ–ª—å–∫–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ—Ö–æ–∂–∏–µ
    .sort((a, b) => b.similarity - a.similarity)
    .slice(0, 5); // –¢–æ–ø 5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    for (const rec of recommendations) {
      await prisma.smartRecommendation.create({
        data: {
          type: RecommendationType.HISTORY_BASED,
          targetUserId: userId,
          title: `–ü–æ—Ö–æ–∂–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ç–∞–∫–∂–µ –≤—ã–±–∏—Ä–∞—é—Ç: ${rec.title}`,
          description: rec.reason,
          recommendedTripId: rec.tripId,
          relevanceScore: rec.similarity,
          confidenceScore: rec.similarity * 0.8,
          priority: Math.round(rec.similarity * 10),
          triggerContext: {
            userBookingsCount: userBookings.length,
            preferences: userPreferences,
          },
          validUntil: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 –¥–Ω–µ–π
        },
      });
    }

    return { recommendations };
  }

  // =========================================================================
  // –°–û–¶–ò–ê–õ–¨–ù–´–ï: "–ö–∞–ø–∏—Ç–∞–Ω –ú–∞–Ω—É—ç–ª –æ—Å–æ–±–µ–Ω–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –Ω–æ–≤–∏—á–∫–∞–º"
  // =========================================================================

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –∫–∞–ø–∏—Ç–∞–Ω–æ–≤
   */
  async generateSocialRecommendations(userSkillLevel: SkillLevelRequired, userRole: UserRole): Promise<{
    recommendations: Array<{
      id: string;
      captainName: string;
      title: string;
      content: string;
      category: CaptainRecommendationCategory;
      helpfulVotes: number;
    }>;
  }> {

    const recommendations = await prisma.captainRecommendation.findMany({
      where: {
        isActive: true,
        moderationStatus: 'APPROVED',
        OR: [
          { targetSkillLevel: { has: userSkillLevel } },
          { targetSkillLevel: { has: SkillLevelRequired.ANY } },
        ],
      },
      include: {
        captain: true,
      },
      orderBy: [
        { helpfulVotes: 'desc' },
        { endorsements: 'desc' },
        { createdAt: 'desc' },
      ],
      take: 10,
    });

    const result = recommendations.map(rec => ({
      id: rec.id,
      captainName: rec.captain?.name || '–ö–∞–ø–∏—Ç–∞–Ω',
      title: rec.title,
      content: rec.content,
      category: rec.category,
      helpfulVotes: rec.helpfulVotes,
    }));

    // –°–æ–∑–¥–∞–µ–º —É–º–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª—É—á—à–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤
    if (recommendations.length > 0) {
      const bestRecommendation = recommendations[0];
      
      await prisma.smartRecommendation.create({
        data: {
          type: RecommendationType.SOCIAL_CAPTAIN,
          targetUserRole: [userRole],
          skillLevel: [userSkillLevel],
          title: `${bestRecommendation.captain?.name} —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç`,
          description: bestRecommendation.content,
          fromCaptainId: bestRecommendation.captainId,
          relevanceScore: Math.min(bestRecommendation.helpfulVotes / 100, 1.0),
          confidenceScore: bestRecommendation.isVerified ? 0.9 : 0.7,
          priority: bestRecommendation.helpfulVotes > 10 ? 8 : 6,
          metadata: {
            originalRecommendationId: bestRecommendation.id,
            category: bestRecommendation.category,
          },
          validUntil: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 –¥–Ω–µ–π
        },
      });
    }

    return { recommendations: result };
  }

  // =========================================================================
  // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  // =========================================================================

  private analyzeUserPreferences(bookings: any[]) {
    const speciesCount: Record<string, number> = {};
    const techniquesCount: Record<string, number> = {};
    const skillLevels: SkillLevelRequired[] = [];

    bookings.forEach(booking => {
      const trip = booking.trip;
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –≤–∏–¥–∞–º —Ä—ã–±
      trip.targetSpecies?.forEach((species: FishSpecies) => {
        speciesCount[species] = (speciesCount[species] || 0) + 1;
      });

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Ç–µ—Ö–Ω–∏–∫–∞–º
      trip.fishingTechniques?.forEach((technique: FishingTechnique) => {
        techniquesCount[technique] = (techniquesCount[technique] || 0) + 1;
      });

      // –°–æ–±–∏—Ä–∞–µ–º —É—Ä–æ–≤–Ω–∏ –Ω–∞–≤—ã–∫–æ–≤
      if (trip.skillLevel) {
        skillLevels.push(trip.skillLevel);
      }
    });

    return {
      preferredSpecies: Object.entries(speciesCount)
        .sort(([,a], [,b]) => b - a)
        .slice(0, 5)
        .map(([species]) => species as FishSpecies),
      
      preferredTechniques: Object.entries(techniquesCount)
        .sort(([,a], [,b]) => b - a)
        .slice(0, 3)
        .map(([technique]) => technique as FishingTechnique),
        
      suitableSkillLevels: [...new Set(skillLevels)],
      totalTrips: bookings.length,
    };
  }

  private calculateTripSimilarity(userPrefs: any, trip: any): number {
    let score = 0;
    let factors = 0;

    // –°—Ö–æ–¥—Å—Ç–≤–æ –ø–æ –≤–∏–¥–∞–º —Ä—ã–± (–≤–µ—Å 40%)
    const speciesOverlap = trip.targetSpecies?.filter((species: FishSpecies) => 
      userPrefs.preferredSpecies.includes(species)
    ).length || 0;
    
    if (trip.targetSpecies?.length > 0) {
      score += (speciesOverlap / Math.max(trip.targetSpecies.length, 1)) * 0.4;
      factors += 0.4;
    }

    // –°—Ö–æ–¥—Å—Ç–≤–æ –ø–æ —Ç–µ—Ö–Ω–∏–∫–∞–º (–≤–µ—Å 30%)
    const techniqueOverlap = trip.fishingTechniques?.filter((technique: FishingTechnique) =>
      userPrefs.preferredTechniques.includes(technique)  
    ).length || 0;

    if (trip.fishingTechniques?.length > 0) {
      score += (techniqueOverlap / Math.max(trip.fishingTechniques.length, 1)) * 0.3;
      factors += 0.3;
    }

    // –°—Ö–æ–¥—Å—Ç–≤–æ –ø–æ —É—Ä–æ–≤–Ω—é –Ω–∞–≤—ã–∫–æ–≤ (–≤–µ—Å 20%)
    if (userPrefs.suitableSkillLevels.includes(trip.skillLevel)) {
      score += 0.2;
    }
    factors += 0.2;

    // –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ (–≤–µ—Å 10%)
    const popularity = Math.min((trip.bookings?.length || 0) / 10, 1);
    score += popularity * 0.1;
    factors += 0.1;

    return factors > 0 ? score / factors : 0;
  }

  private generateHistoryReason(userPrefs: any, trip: any, similarity: number): string {
    const reasons = [];

    const commonSpecies = trip.targetSpecies?.filter((species: FishSpecies) =>
      userPrefs.preferredSpecies.includes(species)
    ) || [];

    const commonTechniques = trip.fishingTechniques?.filter((technique: FishingTechnique) =>
      userPrefs.preferredTechniques.includes(technique)
    ) || [];

    if (commonSpecies.length > 0) {
      reasons.push(`–≤—ã —á–∞—Å—Ç–æ –ª–æ–≤–∏—Ç–µ ${commonSpecies.join(', ')}`);
    }

    if (commonTechniques.length > 0) {
      reasons.push(`–∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ ${commonTechniques.join(', ')}`);
    }

    if (similarity > 0.7) {
      reasons.push('–≤—ã—Å–æ–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ —Å –≤–∞—à–∏–º–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏');
    }

    return reasons.length > 0 
      ? `–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è, –ø–æ—Å–∫–æ–ª—å–∫—É ${reasons.join(' –∏ ')}.`
      : '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ–µ–∑–¥–æ–∫.';
  }

  private async getParticipantsWhoBookedSimilar(userTripIds: string[], tripId: string): Promise<number> {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –ø–æ—Ö–æ–∂–∏–µ –ø–æ–µ–∑–¥–∫–∏
    const similarBookings = await prisma.groupBooking.findMany({
      where: {
        tripId: { in: userTripIds },
        status: 'CONFIRMED',
      },
      select: { userId: true },
      distinct: ['userId'],
    });

    const userIds = similarBookings.map(b => b.userId);

    if (userIds.length === 0) return 0;

    // –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –∏–∑ –Ω–∏—Ö —Ç–∞–∫–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ —Ç–µ–∫—É—â—É—é –ø–æ–µ–∑–¥–∫—É
    const count = await prisma.groupBooking.count({
      where: {
        tripId: tripId,
        userId: { in: userIds },
        status: 'CONFIRMED',
      },
    });

    return count;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getPersonalizedRecommendations(
    userId: string, 
    limit: number = 5,
    types?: RecommendationType[]
  ) {
    const where: any = {
      OR: [
        { targetUserId: userId },
        { targetUserId: null }, // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      ],
      isActive: true,
      validFrom: { lte: new Date() },
      OR: [
        { validUntil: null },
        { validUntil: { gte: new Date() } },
      ],
    };

    if (types && types.length > 0) {
      where.type = { in: types };
    }

    return await prisma.smartRecommendation.findMany({
      where,
      include: {
        recommendedTrip: {
          include: {
            captain: true,
            bookings: true,
          },
        },
        fromCaptain: true,
      },
      orderBy: [
        { priority: 'desc' },
        { relevanceScore: 'desc' },
        { createdAt: 'desc' },
      ],
      take: limit,
    });
  }

  /**
   * Fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ OpenAI API
   */
  private generateFallbackWeatherRecommendation(weatherData: any): Promise<{
    recommendation: string;
    recommendedSpecies: FishSpecies[];
    recommendedTechniques: FishingTechnique[];
    confidenceLevel: number;
    reasoning: string;
  }> {
    console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (smart-recommendations-service)...');
    
    let species: FishSpecies[] = [];
    let techniques: FishingTechnique[] = [];
    let recommendation = '';
    let confidence = 0.6;
    
    // –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    if (weatherData.temperature >= 20) {
      species = [FishSpecies.DORADO, FishSpecies.TUNA];
      techniques = [FishingTechnique.TROLLING];
      recommendation = '–ü—Ä–∏ —Ç–µ–ø–ª–æ–π –≤–æ–¥–µ —Ö–æ—Ä–æ—à–æ –∏–¥–µ—Ç –¥–æ—Ä–∞–¥–æ –Ω–∞ —Ç—Ä–æ–ª–ª–∏–Ω–≥';
    } else if (weatherData.temperature >= 15) {
      species = [FishSpecies.SEABASS, FishSpecies.MACKEREL];
      techniques = [FishingTechnique.JIGGING];
      recommendation = '–ü—Ä–∏ —É–º–µ—Ä–µ–Ω–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–∫—É–Ω—è –Ω–∞ –¥–∂–∏–≥';
    } else {
      species = [FishSpecies.COD, FishSpecies.FLOUNDER];
      techniques = [FishingTechnique.BOTTOM_FISHING];
      recommendation = '–í –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ–π –≤–æ–¥–µ –ª—É—á—à–µ –¥–æ–Ω–Ω–∞—è —Ä—ã–±–∞–ª–∫–∞';
    }

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–µ—Ç—Ä—É
    if (weatherData.windSpeed > 10) {
      techniques = [FishingTechnique.BOTTOM_FISHING];
      recommendation += ' (—Å–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä - –ª—É—á—à–µ –¥–æ–Ω–Ω—ã–µ —Å–Ω–∞—Å—Ç–∏)';
      confidence = 0.4;
    }

    return Promise.resolve({
      recommendation,
      recommendedSpecies: species,
      recommendedTechniques: techniques,
      confidenceLevel: confidence,
      reasoning: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –±–∞–∑–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª–∞—Ö (OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)'
    });
  }
}

export const smartRecommendationsService = new SmartRecommendationsService();
