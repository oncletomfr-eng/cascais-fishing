/**
 * Collaborative Filtering Service
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
 * –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ RecBole –∏ best practices –¥–ª—è recommendation systems
 */

import prisma from '@/lib/prisma';

interface UserItemMatrix {
  userId: string;
  itemId: string;
  rating: number;
  timestamp?: Date;
}

interface UserSimilarity {
  userId1: string;
  userId2: string;
  similarity: number;
}

interface CollaborativeRecommendation {
  userId: string;
  itemId: string;
  score: number;
  reason: string;
  similarUsers: string[];
}

export class CollaborativeFilteringService {
  private userItemMatrix: Map<string, Map<string, number>> = new Map();
  private itemUserMatrix: Map<string, Map<string, number>> = new Map();
  private userSimilarities: Map<string, UserSimilarity[]> = new Map();

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å—Ç—Ä–æ–∏—Ç –º–∞—Ç—Ä–∏—Ü—É user-item
   */
  async loadUserItemMatrix(): Promise<void> {
    console.log('üîÑ Loading user-item interaction matrix...');

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      const bookings = await prisma.groupBooking.findMany({
        where: {
          status: {
            in: ['CONFIRMED', 'COMPLETED']
          }
        },
        include: {
          trip: true,
          user: true
        }
      });

      console.log(`üìä Processing ${bookings.length} confirmed/completed bookings...`);

      // –û—á–∏—â–∞–µ–º –º–∞—Ç—Ä–∏—Ü—ã
      this.userItemMatrix.clear();
      this.itemUserMatrix.clear();

      // –°—Ç—Ä–æ–∏–º –º–∞—Ç—Ä–∏—Ü—ã user-item –∏ item-user
      for (const booking of bookings) {
        const userId = booking.userId;
        const tripId = booking.tripId;
        
        // –í—ã—á–∏—Å–ª—è–µ–º implicit rating –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        let rating = 1.0; // –±–∞–∑–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥
        if (booking.status === 'COMPLETED') rating = 1.5; // –±–æ–Ω—É—Å –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –ø–æ–µ–∑–¥–∫—É
        if (booking.participants > 1) rating += 0.2; // –±–æ–Ω—É—Å –∑–∞ –≥—Ä—É–ø–ø–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        
        // User-Item matrix
        if (!this.userItemMatrix.has(userId)) {
          this.userItemMatrix.set(userId, new Map());
        }
        this.userItemMatrix.get(userId)!.set(tripId, rating);

        // Item-User matrix (—Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
        if (!this.itemUserMatrix.has(tripId)) {
          this.itemUserMatrix.set(tripId, new Map());
        }
        this.itemUserMatrix.get(tripId)!.set(userId, rating);
      }

      console.log(`‚úÖ Matrix built: ${this.userItemMatrix.size} users √ó ${this.itemUserMatrix.size} items`);
    } catch (error) {
      console.error('‚ùå Error loading user-item matrix:', error);
      throw error;
    }
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç cosine similarity –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
   * –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ñ–æ—Ä–º—É–ª–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Faiss –¥–ª—è cosine similarity
   */
  private cosineSimilarity(user1Items: Map<string, number>, user2Items: Map<string, number>): number {
    const commonItems = new Set([...user1Items.keys()].filter(x => user2Items.has(x)));
    
    if (commonItems.size === 0) return 0;

    let dotProduct = 0;
    let norm1 = 0;
    let norm2 = 0;

    // –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –æ–±—â–∏–º items –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    for (const itemId of commonItems) {
      const rating1 = user1Items.get(itemId) || 0;
      const rating2 = user2Items.get(itemId) || 0;
      
      dotProduct += rating1 * rating2;
      norm1 += rating1 * rating1;
      norm2 += rating2 * rating2;
    }

    if (norm1 === 0 || norm2 === 0) return 0;

    return dotProduct / (Math.sqrt(norm1) * Math.sqrt(norm2));
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –º–∞—Ç—Ä–∏—Ü—É similarity –º–µ–∂–¥—É –≤—Å–µ–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç user-based collaborative filtering –ø–æ–¥—Ö–æ–¥
   */
  async calculateUserSimilarities(): Promise<void> {
    console.log('üîÑ Calculating user similarities...');

    this.userSimilarities.clear();
    const users = Array.from(this.userItemMatrix.keys());
    
    let comparisons = 0;
    const totalComparisons = (users.length * (users.length - 1)) / 2;

    for (let i = 0; i < users.length; i++) {
      const user1 = users[i];
      const user1Items = this.userItemMatrix.get(user1)!;

      for (let j = i + 1; j < users.length; j++) {
        const user2 = users[j];
        const user2Items = this.userItemMatrix.get(user2)!;

        const similarity = this.cosineSimilarity(user1Items, user2Items);
        
        if (similarity > 0.1) { // Threshold –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–ª–∞–±—ã—Ö —Å–≤—è–∑–µ–π
          // –î–æ–±–∞–≤–ª—è–µ–º similarity –¥–ª—è user1
          if (!this.userSimilarities.has(user1)) {
            this.userSimilarities.set(user1, []);
          }
          this.userSimilarities.get(user1)!.push({
            userId1: user1,
            userId2: user2,
            similarity
          });

          // –î–æ–±–∞–≤–ª—è–µ–º similarity –¥–ª—è user2 (—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ)
          if (!this.userSimilarities.has(user2)) {
            this.userSimilarities.set(user2, []);
          }
          this.userSimilarities.get(user2)!.push({
            userId1: user2,
            userId2: user1,
            similarity
          });
        }

        comparisons++;
        if (comparisons % 10 === 0) {
          const progress = ((comparisons / totalComparisons) * 100).toFixed(1);
          console.log(`  Progress: ${progress}% (${comparisons}/${totalComparisons})`);
        }
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º similarities –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    for (const [userId, similarities] of this.userSimilarities.entries()) {
      similarities.sort((a, b) => b.similarity - a.similarity);
      // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-5 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      this.userSimilarities.set(userId, similarities.slice(0, 5));
    }

    console.log(`‚úÖ User similarities calculated for ${this.userSimilarities.size} users`);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ collaborative filtering –∞–ª–≥–æ—Ä–∏—Ç–º–µ –∏–∑ RecBole
   */
  async generateRecommendationsForUser(targetUserId: string, limit: number = 5): Promise<CollaborativeRecommendation[]> {
    console.log(`üéØ Generating recommendations for user ${targetUserId}...`);

    const recommendations: CollaborativeRecommendation[] = [];
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ö–æ–∂–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const similarUsers = this.userSimilarities.get(targetUserId) || [];
    
    if (similarUsers.length === 0) {
      console.log(`‚ö†Ô∏è No similar users found for ${targetUserId}`);
      return [];
    }

    // –ü–æ–ª—É—á–∞–µ–º items, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const targetUserItems = this.userItemMatrix.get(targetUserId) || new Map();
    const alreadyBooked = new Set(targetUserItems.keys());

    // –°–æ–±–∏—Ä–∞–µ–º scores –¥–ª—è –∫–∞–∂–¥–æ–≥–æ item –Ω–∞ –æ—Å–Ω–æ–≤–µ preferences –ø–æ—Ö–æ–∂–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const itemScores = new Map<string, {score: number, contributors: string[], count: number}>();

    for (const {userId2: similarUserId, similarity} of similarUsers) {
      const similarUserItems = this.userItemMatrix.get(similarUserId) || new Map();
      
      for (const [itemId, rating] of similarUserItems.entries()) {
        if (alreadyBooked.has(itemId)) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ

        if (!itemScores.has(itemId)) {
          itemScores.set(itemId, {score: 0, contributors: [], count: 0});
        }

        const itemData = itemScores.get(itemId)!;
        itemData.score += similarity * rating;
        itemData.contributors.push(similarUserId);
        itemData.count += 1;
      }
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    const sortedItems = Array.from(itemScores.entries())
      .map(([itemId, data]) => ({
        itemId,
        score: data.score / data.count, // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É contributing users
        contributors: data.contributors,
        reason: `Based on ${data.count} similar users' preferences`
      }))
      .sort((a, b) => b.score - a.score)
      .slice(0, limit);

    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    for (const item of sortedItems) {
      recommendations.push({
        userId: targetUserId,
        itemId: item.itemId,
        score: item.score,
        reason: item.reason,
        similarUsers: item.contributors
      });
    }

    console.log(`‚úÖ Generated ${recommendations.length} recommendations for user ${targetUserId}`);
    return recommendations;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   */
  async saveRecommendations(recommendations: CollaborativeRecommendation[]): Promise<void> {
    console.log('üíæ Saving recommendations to database...');

    try {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userIds = [...new Set(recommendations.map(r => r.userId))];
      
      for (const userId of userIds) {
        await prisma.smartRecommendation.deleteMany({
          where: {
            targetUserId: userId,
            type: 'COLLABORATIVE'
          }
        });
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      for (const rec of recommendations) {
        await prisma.smartRecommendation.create({
          data: {
            targetUserId: rec.userId,
            type: 'COLLABORATIVE',
            title: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π',
            description: rec.reason,
            recommendedTripId: rec.itemId,
            priority: Math.round(rec.score * 10),
            relevanceScore: rec.score,
            confidenceScore: rec.score,
            isActive: true,
            validFrom: new Date(),
            metadata: {
              similarUsers: rec.similarUsers,
              algorithm: 'user_based_collaborative_filtering',
              generatedAt: new Date().toISOString(),
              score: rec.score
            }
          }
        });
      }

      console.log(`‚úÖ Saved ${recommendations.length} recommendations to database`);
    } catch (error) {
      console.error('‚ùå Error saving recommendations:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ collaborative filtering
   */
  async processCollaborativeFiltering(): Promise<void> {
    console.log('üöÄ Starting Collaborative Filtering process...\n');

    try {
      // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      await this.loadUserItemMatrix();
      
      // 2. –í—ã—á–∏—Å–ª—è–µ–º similarities
      await this.calculateUserSimilarities();
      
      // 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const allRecommendations: CollaborativeRecommendation[] = [];
      const users = Array.from(this.userItemMatrix.keys());
      
      for (const userId of users) {
        const userRecs = await this.generateRecommendationsForUser(userId, 3);
        allRecommendations.push(...userRecs);
      }

      // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      if (allRecommendations.length > 0) {
        await this.saveRecommendations(allRecommendations);
      }

      console.log('\nüéâ Collaborative Filtering process completed successfully!');
      console.log(`üìä Total recommendations generated: ${allRecommendations.length}`);
      console.log(`üë• Users with recommendations: ${new Set(allRecommendations.map(r => r.userId)).size}`);
      
    } catch (error) {
      console.error('‚ùå Collaborative Filtering process failed:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async getRecommendationsForUser(userId: string): Promise<any[]> {
    try {
      const recommendations = await prisma.smartRecommendation.findMany({
        where: {
          targetUserId: userId,
          type: 'COLLABORATIVE'
        },
        include: {
          recommendedTrip: {
            select: {
              id: true,
              description: true,
              pricePerPerson: true,
              maxParticipants: true,
              status: true,
              date: true,
              difficultyRating: true,
              targetSpecies: true
            }
          }
        },
        orderBy: {
          relevanceScore: 'desc'
        },
        take: 5
      });

      return recommendations;
    } catch (error) {
      console.error('‚ùå Error fetching recommendations:', error);
      return [];
    }
  }
}

export const collaborativeFilteringService = new CollaborativeFilteringService();
