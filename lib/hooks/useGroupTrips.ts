'use client';

import { useState, useCallback, useMemo, useRef } from 'react';
import { useQuery, useQueryClient } from '@tanstack/react-query';
import {
  GroupTripDisplay,
  GroupTripStats,
  TripFilters,
  TripSortBy,
  UseGroupTripsReturn,
} from '@/lib/types/group-events';

// API Response Interface
interface GroupTripsAPIResponse {
  success: boolean;
  data: {
    trips: any[];
    pagination: {
      total: number;
      limit: number;
      offset: number;
      hasMore: boolean;
    };
  };
  error?: string;
}

// API —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –ø–æ–µ–∑–¥–æ–∫
async function fetchGroupTrips(
  filters?: TripFilters,
  sortBy?: TripSortBy,
  limit?: number,
  offset?: number
): Promise<GroupTripsAPIResponse> {
  const params = new URLSearchParams();
  
  if (limit) params.append('limit', limit.toString());
  if (offset) params.append('offset', offset.toString());
  if (sortBy) params.append('sort', sortBy);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
  if (filters?.timeSlot && filters.timeSlot !== 'any') params.append('timeSlot', filters.timeSlot);
  if (filters?.status && filters.status !== 'any') params.append('status', filters.status);
  if (filters?.experience && filters.experience !== 'any') params.append('experience', filters.experience);
  if (filters?.dateRange) {
    params.append('startDate', filters.dateRange.start.toISOString());
    params.append('endDate', filters.dateRange.end.toISOString());
  }
  
  // üé£ NEW FISHING EVENT FILTERS
  if (filters?.eventType && filters.eventType !== 'any') params.append('eventType', filters.eventType);
  if (filters?.socialMode && filters.socialMode !== 'any') params.append('socialMode', filters.socialMode);
  if (filters?.equipment && filters.equipment !== 'any') params.append('equipment', filters.equipment);
  if (filters?.weatherDependency && filters.weatherDependency !== 'any') {
    params.append('weatherDependency', filters.weatherDependency.toString());
  }
  
  // Array filters
  if (filters?.targetSpecies && filters.targetSpecies.length > 0) {
    params.append('targetSpecies', filters.targetSpecies.join(','));
  }
  if (filters?.fishingTechniques && filters.fishingTechniques.length > 0) {
    params.append('fishingTechniques', filters.fishingTechniques.join(','));
  }
  
  // Range filters
  if (filters?.difficultyRange) {
    params.append('difficultyMin', filters.difficultyRange.min.toString());
    params.append('difficultyMax', filters.difficultyRange.max.toString());
  }
  if (filters?.priceRange) {
    params.append('priceMin', filters.priceRange.min.toString());
    params.append('priceMax', filters.priceRange.max.toString());
  }

  const url = `/api/group-trips${params.toString() ? `?${params.toString()}` : ''}`;
  
  const response = await fetch(url);
  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }
  
  return response.json();
}

/**
 * –†–µ–∞–ª—å–Ω—ã–π —Ö—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–æ–≤—ã–º–∏ –ø–æ–µ–∑–¥–∫–∞–º–∏ —á–µ—Ä–µ–∑ TanStack Query
 * –ó–∞–º–µ–Ω—è–µ—Ç mockGroupTrips.ts –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ API calls
 */
export function useGroupTrips(
  initialFilters?: TripFilters,
  initialSort: TripSortBy = 'chronological',
  limit: number = 20
): UseGroupTripsReturn {
  const queryClient = useQueryClient();
  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const [filters, setFilters] = useState<TripFilters>(initialFilters || {
    experience: 'any',
    timeSlot: 'any',
    status: 'any',
    spotsLeft: 0,
  });
  const [sortBy, setSortBy] = useState<TripSortBy>(initialSort);
  const [offset, setOffset] = useState<number>(0);
  const allTripsRef = useRef<GroupTripDisplay[]>([]);
  const [isLoadingMore, setIsLoadingMore] = useState<boolean>(false);

  // –û—Å–Ω–æ–≤–Ω–æ–π query –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  const {
    data,
    isLoading,
    isError,
    error,
    refetch,
  } = useQuery({
    queryKey: ['group-trips', filters, sortBy, limit, offset],
    queryFn: () => fetchGroupTrips(filters, sortBy, limit, offset),
    staleTime: 30 * 1000, // 30 —Å–µ–∫—É–Ω–¥ - –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    refetchInterval: 2 * 60 * 1000, // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
    refetchOnWindowFocus: true, // –û–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –æ–∫–Ω–∞
    refetchOnReconnect: true, // –û–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    retry: 3,
    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),
  });

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
  const trips = useMemo(() => {
    if (!data?.success || !data.data?.trips) return offset === 0 ? [] : allTripsRef.current;
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API –≤ –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç GroupTripDisplay
    const newTrips = data.data.trips.map((trip: any): GroupTripDisplay => {
      const now = new Date();
      const tripDate = new Date(trip.date);
      const daysUntilTrip = Math.ceil((tripDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timeSlot –∏–∑ API —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
      let timeSlot: 'MORNING_9AM' | 'AFTERNOON_2PM' = 'MORNING_9AM';
      if (trip.timeSlot === 'AFTERNOON_2PM' || trip.timeSlot === 'afternoon') {
        timeSlot = 'AFTERNOON_2PM';
      }
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      const progress = trip.maxParticipants > 0 ? Math.round((trip.currentParticipants / trip.maxParticipants) * 100) : 0;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º urgency level
      let urgencyLevel: 'low' | 'medium' | 'high' = 'low';
      if (daysUntilTrip <= 1) urgencyLevel = 'high';
      else if (daysUntilTrip <= 3) urgencyLevel = 'medium';
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      let status: 'forming' | 'almost_full' | 'confirmed' = 'forming';
      if (progress >= 90) status = 'confirmed';
      else if (progress >= 70) status = 'almost_full';
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∞–≤–∞—Ç–∞—Ä—ã
      const participantAvatars = (trip.participants || []).map((participant: any, index: number) => ({
        id: participant.id || `participant-${index}`,
        initials: participant.name?.split(' ').map((n: string) => n[0]).join('').toUpperCase() || 'UN',
        joinedAt: new Date(participant.joinedAt || participant.createdAt || trip.createdAt),
        participantCount: participant.participantCount || 1,
        countryCode: participant.countryCode,
      }));
      
      return {
        tripId: trip.tripId,
        date: tripDate,
        timeSlot,
        timeDisplay: timeSlot === 'MORNING_9AM' ? '09:00' : '14:00',
        
        // Trip Configuration  
        maxParticipants: trip.maxParticipants || 8,
        minRequired: trip.minRequired || 6,
        pricePerPerson: trip.pricePerPerson || 95,
        
        // Current State
        currentParticipants: trip.currentParticipants || 0,
        spotsRemaining: (trip.maxParticipants || 8) - (trip.currentParticipants || 0),
        status,
        
        // Social Elements
        participants: participantAvatars,
        socialProof: trip.socialProof,
        recentActivity: trip.recentActivity,
        urgencyLevel,
        
        // Trip Details
        description: trip.description || '–ì—Ä—É–ø–ø–æ–≤–∞—è —Ä—ã–±–∞–ª–∫–∞',
        meetingPoint: trip.meetingPoint || 'Cascais Marina',
        specialNotes: trip.specialNotes,
        
        // üé£ FISHING EVENT FIELDS
        eventType: trip.eventType || 'COMMERCIAL',
        skillLevel: trip.skillLevel || 'ANY', 
        socialMode: trip.socialMode || 'COLLABORATIVE',
        fishingTechniques: trip.fishingTechniques || [],
        targetSpecies: trip.targetSpecies || [],
        equipment: trip.equipment || 'PROVIDED',
        weatherDependency: trip.weatherDependency ?? true,
        difficultyRating: trip.difficultyRating || 3,
        estimatedFishCatch: trip.estimatedFishCatch,
        maxGroupSize: trip.maxGroupSize,
        departureLocation: trip.departureLocation || trip.meetingPoint || 'Cascais Marina',
        fishingZones: trip.fishingZones || [],
        minimumWeatherScore: trip.minimumWeatherScore || 6,
        recommendedFor: trip.recommendedFor || [],
        approvalMode: trip.approvalMode || 'MANUAL',
        
        // Timestamps
        createdAt: new Date(trip.createdAt),
        updatedAt: new Date(trip.updatedAt),
      };
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ accumulated trips –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if (offset === 0) {
      // –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - –∑–∞–º–µ–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
      allTripsRef.current = newTrips;
      return newTrips;
    } else {
      // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
      const updatedTrips = [...allTripsRef.current, ...newTrips];
      allTripsRef.current = updatedTrips;
      return updatedTrips;
    }
  }, [data, offset]);

  const stats = useMemo((): GroupTripStats => {
    if (!data?.success || !data.data?.trips) {
      return {
        totalActiveTrips: 0,
        totalParticipants: 0,
        confirmedTrips: 0,
        formingTrips: 0,
        averageParticipants: 0,
        countriesRepresented: 0,
      };
    }

    const trips = data.data.trips;
    const totalActiveTrips = trips.length;
    const totalParticipants = trips.reduce((sum: number, trip: any) => sum + (trip.currentParticipants || 0), 0);
    const confirmedTrips = trips.filter((trip: any) => {
      const progress = (trip.currentParticipants || 0) / (trip.maxParticipants || 8) * 100;
      return progress >= 90;
    }).length;
    const formingTrips = totalActiveTrips - confirmedTrips;
    const averageParticipants = totalActiveTrips > 0 ? Math.round(totalParticipants / totalActiveTrips) : 0;
    
    // –ü–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–∞–Ω (–∑–∞–≥–ª—É—à–∫–∞, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∞—Ö)
    const countriesSet = new Set();
    trips.forEach((trip: any) => {
      (trip.participants || []).forEach((participant: any) => {
        if (participant.countryCode) {
          countriesSet.add(participant.countryCode);
        }
      });
    });
    
    return {
      totalActiveTrips,
      totalParticipants,
      confirmedTrips,
      formingTrips,
      averageParticipants,
      countriesRepresented: countriesSet.size || 1, // –ú–∏–Ω–∏–º—É–º 1, —Ç–∞–∫ –∫–∞–∫ –µ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏
    };
  }, [data]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const handleSetFilters = useCallback((newFilters: Partial<TripFilters>) => {
    setFilters(prev => ({ ...prev, ...newFilters }));
    setOffset(0); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    allTripsRef.current = []; // –û—á–∏—â–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  }, []);

  const handleSetSort = useCallback((newSort: TripSortBy) => {
    setSortBy(newSort);
    setOffset(0); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    allTripsRef.current = []; // –û—á–∏—â–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  const refresh = useCallback(async () => {
    await refetch();
  }, [refetch]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)
  const loadMore = useCallback(async () => {
    if (isLoadingMore || !data?.data?.pagination?.hasMore) return;
    
    try {
      setIsLoadingMore(true);
      const newOffset = offset + limit;
      setOffset(newOffset);
      
      console.log(`üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: offset=${newOffset}, limit=${limit}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    } finally {
      setIsLoadingMore(false);
    }
  }, [isLoadingMore, data?.data?.pagination?.hasMore, offset, limit]);

  const hasMore = useMemo(() => {
    return data?.data?.pagination?.hasMore || false;
  }, [data?.data?.pagination?.hasMore]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫—ç—à–µ–π group-trips
  const invalidateGroupTrips = useCallback(async () => {
    await queryClient.invalidateQueries({ 
      queryKey: ['group-trips'],
      refetchType: 'all' // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    });
  }, [queryClient]);

  return {
    // –î–∞–Ω–Ω—ã–µ
    trips,
    stats,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    isLoading,
    isError,
    error: error as Error | null,
    isEmpty: trips.length === 0,
    
    // –î–µ–π—Å—Ç–≤–∏—è
    refresh,
    loadMore,
    invalidateGroupTrips, // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞
    
    // –§–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    filters,
    setFilters: handleSetFilters,
    sortBy,
    setSortBy: handleSetSort,
    
    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    hasMore,
    isLoadingMore,
  };
}

export default useGroupTrips;