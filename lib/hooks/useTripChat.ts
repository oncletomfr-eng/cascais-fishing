/**
 * –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ö—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Ä—ã–±–æ–ª–æ–≤–Ω—ã—Ö –ø–æ–µ–∑–¥–∫–∞—Ö
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Stream Chat API –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏
 */

'use client';

import { useState, useEffect, useCallback, useRef } from 'react';
import { StreamChat, Channel, User } from 'stream-chat';
import type { 
  UseTripChatProps, 
  UseTripChatReturn, 
  FishingSpotData, 
  GearData, 
  WeatherData, 
  CatchPhotoData, 
  LocationData,
  FishingMessageAttachment 
} from '@/lib/types/chat';

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ö—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º –ø–æ–µ–∑–¥–∫–∏
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Stream Chat –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏
 */
export function useTripChat({ 
  tripId, 
  userId, 
  userToken // –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –±—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ API
}: UseTripChatProps): UseTripChatReturn {
  const [client, setClient] = useState<StreamChat | null>(null);
  const [channel, setChannel] = useState<Channel | null>(null);
  const [isConnected, setIsConnected] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [participants, setParticipants] = useState<User[]>([]);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º ref –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  const initializationRef = useRef(false);
  
  const apiKey = process.env.NEXT_PUBLIC_STREAM_CHAT_API_KEY || '';

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Stream Chat –∫–ª–∏–µ–Ω—Ç–∞
  useEffect(() => {
    if (initializationRef.current || !apiKey || !userId) {
      return;
    }

    initializationRef.current = true;

    const initializeChat = async () => {
      try {
        setIsLoading(true);
        setError(null);

        console.log('üîÑ Initializing Stream Chat for trip:', tripId);

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ API endpoint
        let tokenData;
        try {
          const tokenResponse = await fetch('/api/chat/token', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ userId }),
          });

          if (!tokenResponse.ok) {
            throw new Error(`Token API responded with status: ${tokenResponse.status}`);
          }

          tokenData = await tokenResponse.json();
          
          if (!tokenData.success) {
            throw new Error(tokenData.error || 'Failed to get chat token');
          }
          
          console.log('‚úÖ Chat token obtained:', tokenData.isDemo ? 'demo' : 'real');
        } catch (tokenError) {
          console.error('‚ùå Failed to get chat token:', tokenError);
          
          // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
          if (userToken) {
            console.log('üîÑ Using fallback userToken');
            tokenData = { token: userToken, userId, userName: userId };
          } else {
            throw new Error('No chat token available');
          }
        }

        // –°–æ–∑–¥–∞–µ–º singleton instance –∫–ª–∏–µ–Ω—Ç–∞
        const chatClient = StreamChat.getInstance(apiKey);

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–æ–∫–µ–Ω–æ–º
        await chatClient.connectUser(
          {
            id: userId,
            name: tokenData.userName || userId,
            image: tokenData.userImage || undefined,
          },
          tokenData.token
        );

        console.log('‚úÖ User connected to Stream Chat');

        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–µ–∑–¥–∫–∏
        const tripChannel = chatClient.channel('messaging', `trip-${tripId}`, {
          name: `–ü–æ–µ–∑–¥–∫–∞ ${tripId}`,
          created_by_id: userId,
          members: [userId], // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        });

        // –°–ª–µ–¥–∏–º –∑–∞ –∫–∞–Ω–∞–ª–æ–º
        await tripChannel.watch();

        console.log('‚úÖ Trip channel initialized:', tripChannel.id);

        // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
        const channelState = tripChannel.state;
        const channelParticipants = Object.values(channelState.members).map(member => member.user as User);

        setClient(chatClient);
        setChannel(tripChannel);
        setParticipants(channelParticipants);
        setIsConnected(true);
        setIsLoading(false);

      } catch (err) {
        console.error('‚ùå Error initializing trip chat:', err);
        setError(err instanceof Error ? err.message : 'Failed to initialize chat');
        setIsLoading(false);
      }
    };

    initializeChat();

    // Cleanup —Ñ—É–Ω–∫—Ü–∏—è
    return () => {
      if (client) {
        console.log('üîÑ Disconnecting Stream Chat client');
        client.disconnectUser();
      }
    };
  }, [tripId, userId, apiKey]);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä—ã–±–∞—Ü–∫–æ–≥–æ –º–µ—Å—Ç–∞
  const sendFishingSpotMessage = useCallback(async (spotData: FishingSpotData) => {
    if (!channel) {
      throw new Error('Chat channel not initialized');
    }

    const attachment: FishingMessageAttachment = {
      type: 'fishing-spot',
      data: spotData
    };

    await channel.sendMessage({
      text: `üé£ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –º–µ—Å—Ç–æ: ${spotData.name}`,
      attachments: [attachment as any],
      fishing_attachment: attachment,
      is_fishing_related: true,
      fishing_category: 'spot'
    });

    console.log('‚úÖ Fishing spot message sent:', spotData.name);
  }, [channel]);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–Ω–∞—Å—Ç–µ–π
  const sendGearRecommendation = useCallback(async (gearData: GearData) => {
    if (!channel) {
      throw new Error('Chat channel not initialized');
    }

    const attachment: FishingMessageAttachment = {
      type: 'gear-recommendation',
      data: gearData
    };

    const emoji = {
      'rod': 'üé£',
      'reel': 'üé£', 
      'bait': 'ü™±',
      'lures': 'üêü',
      'tackle': 'üîß',
      'other': '‚öôÔ∏è'
    }[gearData.category] || '‚öôÔ∏è';

    await channel.sendMessage({
      text: `${emoji} –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç —Å–Ω–∞—Å—Ç–∏: ${gearData.name}`,
      attachments: [attachment as any],
      fishing_attachment: attachment,
      is_fishing_related: true,
      fishing_category: 'gear'
    });

    console.log('‚úÖ Gear recommendation sent:', gearData.name);
  }, [channel]);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
  const sendWeatherUpdate = useCallback(async (weatherData: WeatherData) => {
    if (!channel) {
      throw new Error('Chat channel not initialized');
    }

    const attachment: FishingMessageAttachment = {
      type: 'weather-update',
      data: weatherData
    };

    const favorableEmoji = weatherData.isFavorable ? '‚úÖ' : '‚ö†Ô∏è';
    const weatherText = `${favorableEmoji} –ü–æ–≥–æ–¥–∞: ${weatherData.conditions}, ${weatherData.temperature}¬∞C, –≤–µ—Ç–µ—Ä ${weatherData.windSpeed} –º/—Å`;

    await channel.sendMessage({
      text: weatherText,
      attachments: [attachment as any],
      fishing_attachment: attachment,
      is_fishing_related: true,
      fishing_category: 'weather'
    });

    console.log('‚úÖ Weather update sent');
  }, [channel]);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —É–ª–æ–≤–∞
  const sendCatchPhoto = useCallback(async (photoData: CatchPhotoData) => {
    if (!channel) {
      throw new Error('Chat channel not initialized');
    }

    const attachment: FishingMessageAttachment = {
      type: 'catch-photo',
      data: photoData
    };

    const fishInfo = photoData.fishSpecies 
      ? ` (${photoData.fishSpecies}${photoData.weight ? `, ${photoData.weight}–∫–≥` : ''})`
      : '';

    await channel.sendMessage({
      text: `üêü –ü–æ–π–º–∞–ª —Ä—ã–±—É${fishInfo}!`,
      attachments: [attachment as any],
      fishing_attachment: attachment,
      is_fishing_related: true,
      fishing_category: 'catch'
    });

    console.log('‚úÖ Catch photo sent');
  }, [channel]);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–∫–∞—Ü–∏–∏
  const sendLocationShare = useCallback(async (locationData: LocationData) => {
    if (!channel) {
      throw new Error('Chat channel not initialized');
    }

    const attachment: FishingMessageAttachment = {
      type: 'location',
      data: locationData
    };

    const locationEmoji = {
      'meeting-point': 'üìç',
      'fishing-spot': 'üé£',
      'harbor': '‚öì',
      'landmark': 'üó∫Ô∏è'
    }[locationData.type] || 'üìç';

    await channel.sendMessage({
      text: `${locationEmoji} –ü–æ–¥–µ–ª–∏–ª—Å—è –ª–æ–∫–∞—Ü–∏–µ–π: ${locationData.name}`,
      attachments: [attachment as any],
      fishing_attachment: attachment,
      is_fishing_related: true,
      fishing_category: 'location'
    });

    console.log('‚úÖ Location shared:', locationData.name);
  }, [channel]);

  return {
    client,
    channel,
    isConnected,
    isLoading,
    error,
    participants,
    sendFishingSpotMessage,
    sendGearRecommendation,
    sendWeatherUpdate,
    sendCatchPhoto,
    sendLocationShare,
  };
}
