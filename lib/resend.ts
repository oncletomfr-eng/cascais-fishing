import { Resend } from 'resend';
import { ResendConfig } from '@/lib/types/email';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const requiredEnvVars = {
  RESEND_API_KEY: process.env.RESEND_API_KEY,
  RESEND_FROM_EMAIL: process.env.RESEND_FROM_EMAIL,
  RESEND_FROM_NAME: process.env.RESEND_FROM_NAME,
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const missingEnvVars = Object.entries(requiredEnvVars)
  .filter(([_, value]) => !value)
  .map(([key]) => key);

if (missingEnvVars.length > 0) {
  console.warn(
    `Missing email environment variables: ${missingEnvVars.join(', ')}. ` +
    'Email functionality will be disabled.'
  );
}

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
export const resendConfig: ResendConfig = {
  apiKey: requiredEnvVars.RESEND_API_KEY || '',
  fromEmail: requiredEnvVars.RESEND_FROM_EMAIL || 'noreply@example.com',
  fromName: requiredEnvVars.RESEND_FROM_NAME || 'Cascais Premium Fishing',
};

// –°–æ–∑–¥–∞–µ–º Resend –∫–ª–∏–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á
export const resend = resendConfig.apiKey ? new Resend(resendConfig.apiKey) : null;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–∞–±–æ—Ç–µ
export const isEmailConfigured = (): boolean => {
  return Boolean(
    resendConfig.apiKey &&
    resendConfig.fromEmail &&
    resendConfig.fromName
  );
};

// –í–∞–ª–∏–¥–∞—Ü–∏—è email –∞–¥—Ä–µ—Å–∞
export const validateEmail = (email: string): { isValid: boolean; error?: string } => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  
  if (!email) {
    return { isValid: false, error: 'Email is required' };
  }
  
  if (!emailRegex.test(email)) {
    return { isValid: false, error: 'Invalid email format' };
  }
  
  return { isValid: true };
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç –∫–æ–≥–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –ø–∏—Å—å–º–æ
export const getFromAddress = (): string => {
  return `${resendConfig.fromName} <${resendConfig.fromEmail}>`;
};

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ email (–¥–ª—è development)
export const logEmailAttempt = (
  to: string, 
  subject: string, 
  template: string,
  success: boolean,
  error?: string
): void => {
  const timestamp = new Date().toISOString();
  const status = success ? '‚úÖ SUCCESS' : '‚ùå FAILED';
  
  console.log(`üìß [${timestamp}] EMAIL ${status}`);
  console.log(`   To: ${to}`);
  console.log(`   Subject: ${subject}`);
  console.log(`   Template: ${template}`);
  
  if (error) {
    console.log(`   Error: ${error}`);
  }
  
  if (!isEmailConfigured()) {
    console.log('   ‚ö†Ô∏è  WARNING: Email not configured - check environment variables');
  }
};

export default resend;
