import { GroupTripDisplay, ParticipantDisplay, GroupTripUpdate } from '@/lib/types/group-events';

// –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
const COUNTRIES = ['üáµüáπ', 'üá™üá∏', 'üá´üá∑', 'üáÆüáπ', 'üá©üá™', 'üá¨üáß', 'üá≥üá±', 'üáßüá™'];
const NAMES = [
  'Jo√£o Silva', 'Maria Santos', 'Pedro Costa', 'Ana Ferreira',
  'Carlos Oliveira', 'Sofia Rodrigues', 'Miguel Pereira', 'Isabel Martins',
  'Antonio Lopez', 'Carmen Garcia', 'Jos√© Martinez', 'Lucia Fernandez',
  'Pierre Dubois', 'Marie Leroy', 'Jean Martin', 'Sophie Bernard',
  'Marco Rossi', 'Giulia Ferrari', 'Francesco Romano', 'Elena Marino'
];

/**
 * –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–∫–∏ –∏–∑ Prisma –≤ UI —Ñ–æ—Ä–º–∞—Ç
 */
export function transformTripToDisplay(trip: any): GroupTripDisplay {
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
  const currentParticipants = trip.bookings?.reduce(
    (sum: number, booking: any) => sum + booking.participants, 
    0
  ) || 0;
  
  const spotsRemaining = trip.maxParticipants - currentParticipants;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–µ–∑–¥–∫–∏
  const status = determineDisplayStatus(
    trip.status,
    currentParticipants,
    trip.minRequired,
    spotsRemaining
  );
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
  const urgencyLevel = determineUrgencyLevel(
    status,
    spotsRemaining,
    currentParticipants,
    trip.maxParticipants
  );
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const participants = generateParticipantsDisplay(
    trip.bookings || [],
    currentParticipants
  );
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
  const timeDisplay = formatTimeSlot(trip.timeSlot);
  
  return {
    tripId: trip.id,
    date: typeof trip.date === 'string' ? new Date(trip.date) : trip.date,
    timeSlot: trip.timeSlot,
    timeDisplay,
    currentParticipants,
    maxParticipants: trip.maxParticipants,
    minRequired: trip.minRequired,
    spotsRemaining,
    pricePerPerson: Number(trip.pricePerPerson),
    status,
    urgencyLevel,
    participants,
    description: trip.description || `–†—ã–±–∞–ª–∫–∞ –≤ –º–æ—Ä–µ —É –±–µ—Ä–µ–≥–æ–≤ –ö–∞—à–∫–∞–π—à–∞`,
    meetingPoint: trip.meetingPoint || 'Cascais Marina',
    specialNotes: trip.specialNotes,
    
    // üé£ FISHING EVENT DATA
    eventType: trip.eventType || 'COMMERCIAL',
    skillLevel: trip.skillLevel || 'ANY',
    socialMode: trip.socialMode || 'COLLABORATIVE',
    fishingTechniques: trip.fishingTechniques || [],
    targetSpecies: trip.targetSpecies || [],
    equipment: trip.equipment || 'PROVIDED',
    weatherDependency: trip.weatherDependency ?? true,
    difficultyRating: trip.difficultyRating || 3,
    estimatedFishCatch: trip.estimatedFishCatch,
    maxGroupSize: trip.maxGroupSize,
    departureLocation: trip.departureLocation || trip.meetingPoint,
    fishingZones: trip.fishingZones || [],
    minimumWeatherScore: trip.minimumWeatherScore || 6,
    recommendedFor: trip.recommendedFor || [],
    approvalMode: trip.approvalMode || 'MANUAL',
    
    // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    socialProof: generateSocialProofText(currentParticipants, participants),
    recentActivity: generateRecentActivityText(trip.bookings || []),
    // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    createdAt: typeof trip.createdAt === 'string' ? new Date(trip.createdAt) : trip.createdAt,
    updatedAt: typeof trip.updatedAt === 'string' ? new Date(trip.updatedAt) : trip.updatedAt
  };
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function determineDisplayStatus(
  prismaStatus: string,
  currentParticipants: number,
  minRequired: number,
  spotsRemaining: number
): GroupTripDisplay['status'] {
  // –ï—Å–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ
  if (prismaStatus === 'CANCELLED') return 'cancelled';
  
  // –ï—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ –±–∞–∑–µ  
  if (prismaStatus === 'CONFIRMED') return 'confirmed';
  
  // –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–ª–∏ –º–∏–Ω–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  if (currentParticipants >= minRequired) return 'confirmed';
  
  // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –º–µ—Å—Ç
  if (spotsRemaining <= 2) return 'almost_full';
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è
  return 'forming';
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
 */
function determineUrgencyLevel(
  status: GroupTripDisplay['status'],
  spotsRemaining: number,
  currentParticipants: number,
  maxParticipants: number
): GroupTripDisplay['urgencyLevel'] {
  if (status === 'cancelled') return 'low';
  if (status === 'confirmed') return 'medium';
  
  const fillRatio = currentParticipants / maxParticipants;
  
  if (spotsRemaining === 1) return 'critical';
  if (spotsRemaining <= 2) return 'high';
  if (fillRatio >= 0.5) return 'medium';
  
  return 'low';
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function generateParticipantsDisplay(
  bookings: any[],
  totalParticipants: number
): ParticipantDisplay[] {
  const participants: ParticipantDisplay[] = [];
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
  bookings.forEach((booking, index) => {
    for (let i = 0; i < booking.participants; i++) {
      const participantIndex = participants.length;
      
      participants.push({
        id: `${booking.id}-${i}`,
        name: i === 0 ? booking.contactName : `${booking.contactName}+${i}`,
        avatar: generateAvatar(booking.contactName),
        country: COUNTRIES[participantIndex % COUNTRIES.length],
        joinedAt: booking.createdAt || new Date(),
        isReal: true
      });
    }
  });
  
  // –î–æ–ø–æ–ª–Ω—è–µ–º –¥–µ–º–æ-—É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–ª—è UI
  const demoNeeded = Math.max(0, Math.min(3, totalParticipants - participants.length));
  
  for (let i = 0; i < demoNeeded; i++) {
    const nameIndex = (participants.length + i) % NAMES.length;
    const name = NAMES[nameIndex];
    
    participants.push({
      id: `demo-${i}`,
      name,
      avatar: generateAvatar(name),
      country: COUNTRIES[(participants.length + i) % COUNTRIES.length],
      joinedAt: new Date(Date.now() - Math.random() * 24 * 60 * 60 * 1000), // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
      isReal: false
    });
  }
  
  return participants.slice(0, 5); // –ú–∞–∫—Å–∏–º—É–º 5 –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –∏–∑ –∏–º–µ–Ω–∏
 */
function generateAvatar(name: string): string {
  const initials = name
    .split(' ')
    .map(word => word.charAt(0).toUpperCase())
    .join('')
    .substring(0, 2);
  
  return initials;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
 */
function formatTimeSlot(timeSlot: string): string {
  const timeMap: Record<string, string> = {
    'MORNING_9AM': '09:00',
    'AFTERNOON_2PM': '14:00'
  };
  
  return timeMap[timeSlot] || timeSlot;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
 */
function generateSocialProofText(
  participantCount: number,
  participants: ParticipantDisplay[]
): string {
  if (participantCount === 0) {
    return '–ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π –ø–æ–µ–∑–¥–∫–∏!';
  }
  
  if (participantCount === 1) {
    const name = participants[0]?.name || '–£—á–∞—Å—Ç–Ω–∏–∫';
    return `${name} —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –ø–æ–µ–∑–¥–∫–µ`;
  }
  
  if (participantCount === 2) {
    const names = participants.slice(0, 2).map(p => p.name.split(' ')[0]);
    return `${names.join(' –∏ ')} —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å`;
  }
  
  const visibleNames = participants.slice(0, 2).map(p => p.name.split(' ')[0]);
  const hiddenCount = participantCount - 2;
  
  return `${visibleNames.join(', ')} –∏ –µ—â–µ ${hiddenCount} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å`;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */
function generateRecentActivityText(bookings: any[]): string {
  if (bookings.length === 0) return '';
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
  const recentBookings = [...bookings]
    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())
    .slice(0, 3);
  
  const recentCount = recentBookings.length;
  
  if (recentCount === 1) {
    return '–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –Ω–µ–¥–∞–≤–Ω–æ';
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
  const last24h = recentBookings.filter(booking => {
    const bookingTime = new Date(booking.createdAt).getTime();
    const now = Date.now();
    return now - bookingTime < 24 * 60 * 60 * 1000;
  });
  
  if (last24h.length > 0) {
    return `${last24h.length} —É—á–∞—Å—Ç–Ω–∏–∫${last24h.length > 1 ? '–∞' : ''} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª${last24h.length > 1 ? '–∏—Å—å' : '—Å—è'} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞`;
  }
  
  return `${recentCount} —É—á–∞—Å—Ç–Ω–∏–∫–∞ —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å`;
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ–µ–∑–¥–∫–∏
 */
export function isTripAvailable(trip: GroupTripDisplay): boolean {
  return (
    trip.status !== 'cancelled' &&
    trip.spotsRemaining > 0 &&
    new Date(trip.date) > new Date()
  );
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–µ–∑–¥–æ–∫
 */
export function filterTrips(
  trips: GroupTripDisplay[],
  filters: {
    status?: string;
    timeSlot?: string;
    spotsLeft?: number;
    experience?: string;
  }
): GroupTripDisplay[] {
  return trips.filter(trip => {
    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (filters.status && filters.status !== 'any' && trip.status !== filters.status) {
      return false;
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    if (filters.timeSlot && filters.timeSlot !== 'any') {
      const timeSlotMatch = (
        (filters.timeSlot === 'morning' && trip.timeSlot === 'MORNING_9AM') ||
        (filters.timeSlot === 'afternoon' && trip.timeSlot === 'AFTERNOON_2PM')
      );
      if (!timeSlotMatch) return false;
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç
    if (filters.spotsLeft && trip.spotsRemaining > filters.spotsLeft) {
      return false;
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
    
    return true;
  });
}

/**
 * –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–µ–∑–¥–æ–∫
 */
export function sortTrips(
  trips: GroupTripDisplay[],
  sortBy: 'chronological' | 'popularity' | 'almost_full'
): GroupTripDisplay[] {
  const sorted = [...trips];
  
  switch (sortBy) {
    case 'chronological':
      return sorted.sort((a, b) => 
        new Date(a.date).getTime() - new Date(b.date).getTime()
      );
      
    case 'popularity':
      return sorted.sort((a, b) => {
        const aPopularity = a.currentParticipants / a.maxParticipants;
        const bPopularity = b.currentParticipants / b.maxParticipants;
        return bPopularity - aPopularity;
      });
      
    case 'almost_full':
      return sorted.sort((a, b) => {
        const aProgress = a.currentParticipants / a.maxParticipants;
        const bProgress = b.currentParticipants / b.maxParticipants;
        return bProgress - aProgress;
      });
      
    default:
      return sorted;
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è mock –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
 */
export function generateMockGroupTrips(count: number = 6): GroupTripDisplay[] {
  const mockTrips: GroupTripDisplay[] = [];
  
  for (let i = 0; i < count; i++) {
    const date = new Date();
    date.setDate(date.getDate() + Math.floor(Math.random() * 14) + 1);
    
    const timeSlot = Math.random() > 0.5 ? 'MORNING_9AM' : 'AFTERNOON_2PM';
    const currentParticipants = Math.floor(Math.random() * 7) + 1;
    const maxParticipants = 8;
    const spotsRemaining = maxParticipants - currentParticipants;
    
    let status: GroupTripDisplay['status'] = 'forming';
    if (currentParticipants >= 6) {
      status = 'confirmed';
    } else if (spotsRemaining <= 2) {
      status = 'almost_full';
    }
    
    const participants: ParticipantDisplay[] = [];
    for (let j = 0; j < Math.min(currentParticipants, 3); j++) {
      participants.push({
        id: `mock-${i}-${j}`,
        name: NAMES[j % NAMES.length],
        avatar: NAMES[j % NAMES.length].split(' ').map(n => n[0]).join(''),
        country: COUNTRIES[j % COUNTRIES.length],
        joinedAt: new Date(Date.now() - Math.random() * 24 * 60 * 60 * 1000),
        isReal: false
      });
    }
    
    // üé£ Generate random FishingEvent data
    const eventTypes = ['COMMERCIAL', 'TOURNAMENT', 'LEARNING', 'COMMUNITY'];
    const skillLevels = ['BEGINNER', 'INTERMEDIATE', 'ADVANCED', 'EXPERT', 'ANY'];
    const socialModes = ['COMPETITIVE', 'COLLABORATIVE', 'EDUCATIONAL', 'RECREATIONAL', 'FAMILY'];
    const equipmentTypes = ['PROVIDED', 'BRING_OWN', 'RENTAL_AVAILABLE', 'PARTIALLY_PROVIDED'];
    const techniques = ['TROLLING', 'JIGGING', 'BOTTOM_FISHING', 'SPINNING', 'FLY_FISHING'];
    const species = ['SEABASS', 'DORADO', 'TUNA', 'MACKEREL', 'SARDINE'];
    
    mockTrips.push({
      tripId: `mock-trip-${i}`,
      date,
      timeSlot,
      timeDisplay: timeSlot === 'MORNING_9AM' ? '09:00' : '14:00',
      currentParticipants,
      maxParticipants,
      minRequired: 6,
      spotsRemaining,
      pricePerPerson: 95,
      status,
      urgencyLevel: spotsRemaining <= 1 ? 'critical' : spotsRemaining <= 2 ? 'high' : 'medium',
      participants,
      description: `–ú–æ—Ä—Å–∫–∞—è —Ä—ã–±–∞–ª–∫–∞ —É –±–µ—Ä–µ–≥–æ–≤ –ö–∞—à–∫–∞–π—à–∞`,
      meetingPoint: 'Cascais Marina',
      
      // üé£ FISHING EVENT DATA
      eventType: eventTypes[Math.floor(Math.random() * eventTypes.length)] as any,
      skillLevel: skillLevels[Math.floor(Math.random() * skillLevels.length)] as any,
      socialMode: socialModes[Math.floor(Math.random() * socialModes.length)] as any,
      fishingTechniques: techniques.slice(0, Math.floor(Math.random() * 3) + 1),
      targetSpecies: species.slice(0, Math.floor(Math.random() * 3) + 1),
      equipment: equipmentTypes[Math.floor(Math.random() * equipmentTypes.length)] as any,
      weatherDependency: Math.random() > 0.3,
      difficultyRating: Math.floor(Math.random() * 5) + 1,
      estimatedFishCatch: Math.floor(Math.random() * 10) + 2,
      maxGroupSize: maxParticipants,
      departureLocation: 'Cascais Marina',
      fishingZones: ['Deep Waters', 'Coastal Area'].slice(0, Math.floor(Math.random() * 2) + 1),
      minimumWeatherScore: Math.floor(Math.random() * 4) + 5,
      recommendedFor: ['Families', 'Beginners', 'Experienced'].slice(0, Math.floor(Math.random() * 2) + 1),
      approvalMode: Math.random() > 0.5 ? 'AUTO' : 'MANUAL' as any,
      
      socialProof: generateSocialProofText(currentParticipants, participants),
      recentActivity: `${Math.floor(Math.random() * 3) + 1} —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –Ω–µ–¥–∞–≤–Ω–æ`,
      createdAt: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000),
      updatedAt: new Date()
    });
  }
  
  return mockTrips;
}

/**
 * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫ –ø–æ–µ–∑–¥–∫–µ
 */
export function applyWebSocketUpdate(trip: GroupTripDisplay, update: GroupTripUpdate): GroupTripDisplay {
  if (trip.tripId !== update.tripId) return trip;
  
  return {
    ...trip,
    currentParticipants: update.currentParticipants,
    spotsRemaining: update.spotsRemaining || trip.spotsRemaining,
    status: update.status,
    urgencyLevel: determineUrgencyLevel(
      update.status,
      update.spotsRemaining || 0,
      update.currentParticipants,
      update.maxParticipants || trip.maxParticipants
    ),
    updatedAt: update.timestamp,
    // –û–±–Ω–æ–≤–ª—è–µ–º social proof –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫
    socialProof: update.participantName && update.type === 'participant_joined'
      ? `${update.participantName} —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è!`
      : trip.socialProof,
    recentActivity: update.type === 'participant_joined'
      ? '–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è —Ç–æ–ª—å–∫–æ —á—Ç–æ'
      : update.type === 'participant_left'
      ? '–£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª –ø–æ–µ–∑–¥–∫—É'
      : trip.recentActivity
  };
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
 */
export function getStatusColor(status: GroupTripDisplay['status']): string {
  const colors = {
    forming: '#2196F3',      // –°–∏–Ω–∏–π
    almost_full: '#FF9800',  // –û—Ä–∞–Ω–∂–µ–≤—ã–π
    confirmed: '#4CAF50',    // –ó–µ–ª–µ–Ω—ã–π
    cancelled: '#F44336'     // –ö—Ä–∞—Å–Ω—ã–π
  };
  
  return colors[status] || colors.forming;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –ø–æ–µ–∑–¥–∫–∏
 */
export function formatTripDate(date: Date | string): string {
  if (!date) {
    return '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
  }
  
  const dateObj = typeof date === 'string' ? new Date(date) : date;
  
  if (isNaN(dateObj.getTime())) {
    return '–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞';
  }
  
  return new Intl.DateTimeFormat('ru-RU', {
    day: '2-digit',
    month: 'short',
    weekday: 'short'
  }).format(dateObj);
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–µ–∑–¥–∫–∏
 */
export function formatTripTime(timeSlot: string): string {
  const timeMap: Record<string, string> = {
    'MORNING_9AM': '09:00',
    'AFTERNOON_2PM': '14:00'
  };
  
  return timeMap[timeSlot] || timeSlot;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –ø–æ–µ–∑–¥–∫–∏
 */
export function isTripUrgent(trip: GroupTripDisplay): boolean {
  return trip.urgencyLevel === 'high' || trip.urgencyLevel === 'critical';
}