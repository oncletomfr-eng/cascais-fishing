import { Resend } from 'resend';
import { render } from '@react-email/components';
import ParticipantApprovalNotification from '../emails/ParticipantApprovalNotification.tsx';
import BadgeAwardedNotification from '../emails/BadgeAwardedNotification.tsx';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Resend —Ç–æ–ª—å–∫–æ –≤ production –∏–ª–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º API –∫–ª—é—á–æ–º
const resend = process.env.RESEND_API_KEY && process.env.RESEND_API_KEY !== 're_development_key_placeholder' 
  ? new Resend(process.env.RESEND_API_KEY)
  : null;

interface EmailData {
  to: string;
  subject: string;
  html: string;
}

interface ParticipantApprovalData {
  participantEmail: string;
  participantName: string;
  captainName: string;
  tripTitle: string;
  tripDate: string;
  status: 'APPROVED' | 'REJECTED';
  rejectedReason?: string;
  tripDetailsUrl: string;
}

interface BadgeAwardedData {
  userEmail: string;
  userName: string;
  badge: {
    name: string;
    description: string;
    icon: string;
    category: string;
  };
  totalBadges: number;
  profileUrl: string;
}

class EmailService {
  private fromEmail = 'noreply@cascaisfishing.com';
  private fromName = 'Cascais Fishing';

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
   */
  async sendParticipantApprovalNotification(data: ParticipantApprovalData): Promise<boolean> {
    try {
      const emailHtml = await render(
        ParticipantApprovalNotification({
          participantName: data.participantName,
          captainName: data.captainName,
          tripTitle: data.tripTitle,
          tripDate: data.tripDate,
          status: data.status,
          rejectedReason: data.rejectedReason,
          tripDetailsUrl: data.tripDetailsUrl
        })
      );

      const subject = data.status === 'APPROVED' 
        ? `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–µ–∑–¥–∫—É "${data.tripTitle}" –æ–¥–æ–±—Ä–µ–Ω–∞!`
        : `‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–µ–∑–¥–∫—É "${data.tripTitle}" –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞`;

      const result = await this.sendEmail({
        to: data.participantEmail,
        subject,
        html: emailHtml
      });

      console.log(`üìß Participant approval email sent: ${data.participantEmail} (${data.status})`);
      return result;

    } catch (error) {
      console.error('Error sending participant approval email:', error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
   */
  async sendBadgeAwardedNotification(data: BadgeAwardedData): Promise<boolean> {
    try {
      const emailHtml = await render(
        BadgeAwardedNotification({
          userName: data.userName,
          badge: data.badge,
          totalBadges: data.totalBadges,
          profileUrl: data.profileUrl
        })
      );

      const subject = `üèÜ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${data.badge.name}!`;

      const result = await this.sendEmail({
        to: data.userEmail,
        subject,
        html: emailHtml
      });

      console.log(`üìß Badge awarded email sent: ${data.userEmail} (${data.badge.name})`);
      return result;

    } catch (error) {
      console.error('Error sending badge awarded email:', error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏
   */
  async sendTripConfirmedNotification(
    participants: Array<{ email: string; name: string }>,
    tripData: {
      title: string;
      date: string;
      timeSlot: string;
      meetingPoint: string;
      captainName: string;
      tripDetailsUrl: string;
    }
  ): Promise<boolean> {
    try {
      const emailPromises = participants.map(participant => {
        const subject = `üéâ –ü–æ–µ–∑–¥–∫–∞ "${tripData.title}" –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!`;
        
        const html = `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #0066cc;">üé£ –ü–æ–µ–∑–¥–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</h2>
            <p>–ü—Ä–∏–≤–µ—Ç, ${participant.name}!</p>
            <p>–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –í–∞—à–∞ –≥—Ä—É–ø–ø–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞ "<strong>${tripData.title}</strong>" –Ω–∞–±—Ä–∞–ª–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.</p>
            
            <div style="background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;">
              <h3 style="margin-top: 0;">üìÖ –î–µ—Ç–∞–ª–∏ –ø–æ–µ–∑–¥–∫–∏:</h3>
              <p><strong>–î–∞—Ç–∞:</strong> ${tripData.date}</p>
              <p><strong>–í—Ä–µ–º—è:</strong> ${tripData.timeSlot}</p>
              <p><strong>–ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏:</strong> ${tripData.meetingPoint}</p>
              <p><strong>–ö–∞–ø–∏—Ç–∞–Ω:</strong> ${tripData.captainName}</p>
            </div>

            <p><strong>–ß—Ç–æ –¥–∞–ª—å—à–µ?</strong></p>
            <ul>
              <li>–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ</li>
              <li>–ü—Ä–∏–±—É–¥—å—Ç–µ –≤–æ–≤—Ä–µ–º—è –∫ –º–µ—Å—Ç—É –≤—Å—Ç—Ä–µ—á–∏</li>
              <li>–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ —á–∞—Ç–µ</li>
              <li>–ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã</li>
            </ul>

            <p style="text-align: center; margin: 30px 0;">
              <a href="${tripData.tripDetailsUrl}" style="background: #0066cc; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px;">–î–µ—Ç–∞–ª–∏ –ø–æ–µ–∑–¥–∫–∏</a>
            </p>

            <p style="color: #666; font-size: 12px; text-align: center;">
              –° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ Cascais Fishing
            </p>
          </div>
        `;

        return this.sendEmail({
          to: participant.email,
          subject,
          html
        });
      });

      const results = await Promise.allSettled(emailPromises);
      const successCount = results.filter(r => r.status === 'fulfilled').length;

      console.log(`üìß Trip confirmed emails sent: ${successCount}/${participants.length}`);
      return successCount === participants.length;

    } catch (error) {
      console.error('Error sending trip confirmed emails:', error);
      return false;
    }
  }

  /**
   * –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —á–µ—Ä–µ–∑ Resend
   */
  private async sendEmail(data: EmailData): Promise<boolean> {
    try {
      // Development —Ä–µ–∂–∏–º - –µ—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞, –ª–æ–≥–∏—Ä—É–µ–º email –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏
      if (!process.env.RESEND_API_KEY || process.env.RESEND_API_KEY === 're_development_key_placeholder') {
        console.log('üìß [DEVELOPMENT MODE] Email would be sent:');
        console.log({
          from: `${this.fromName} <${this.fromEmail}>`,
          to: data.to,
          subject: data.subject,
          htmlLength: data.html.length,
          environment: process.env.NODE_ENV
        });
        console.log('üìß Email HTML content preview:', data.html.substring(0, 200) + '...');
        
        // –í development —Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true (—É—Å–ø–µ—à–Ω–æ "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        return true;
      }

      // Production —Ä–µ–∂–∏–º - —Ä–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Resend
      if (!resend) {
        console.error('‚ùå Resend client not initialized - missing or invalid API key');
        return false;
      }

      const result = await resend.emails.send({
        from: `${this.fromName} <${this.fromEmail}>`,
        to: data.to,
        subject: data.subject,
        html: data.html
      });

      if (result.error) {
        console.error('Resend API error:', result.error);
        return false;
      }

      console.log('üìß [PRODUCTION] Email sent successfully:', { 
        to: data.to, 
        subject: data.subject,
        emailId: result.data?.id 
      });

      return true;

    } catch (error) {
      console.error('Email sending error:', error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ welcome email –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  async sendWelcomeEmail(userEmail: string, userName: string): Promise<boolean> {
    try {
      const subject = 'üé£ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Cascais Fishing!';
      
      const html = `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <div style="background: #0066cc; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0;">
            <h1 style="margin: 0;">üé£ Cascais Fishing</h1>
          </div>
          
          <div style="padding: 30px;">
            <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userName}! üéâ</h2>
            
            <p>–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —Ä—ã–±–æ–ª–æ–≤–Ω–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ª—É—á—à–∏–º —Ä—ã–±–æ–ª–æ–≤–Ω—ã–º –ø–æ–µ–∑–¥–∫–∞–º –≤ –ö–∞—à–∫–∞–π—à–µ.</p>
            
            <div style="background: #f0f9ff; padding: 20px; border-radius: 8px; margin: 20px 0;">
              <h3 style="margin-top: 0;">üöÄ –ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:</h3>
              <ul>
                <li>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Ä—ã–±–æ–ª–æ–≤–∞</li>
                <li>–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø–æ–≤—ã–µ –ø–æ–µ–∑–¥–∫–∏</li>
                <li>–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –ø–æ–µ–∑–¥–∫—É</li>
                <li>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É</li>
              </ul>
            </div>

            <p style="text-align: center; margin: 30px 0;">
              <a href="https://cascaisfishing.com/profile" style="background: #0066cc; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px;">–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</a>
            </p>

            <p>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º!</p>
          </div>
          
          <div style="background: #f8fafc; padding: 20px; text-align: center; border-radius: 0 0 8px 8px;">
            <p style="color: #666; font-size: 12px; margin: 0;">
              –° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ Cascais Fishing<br>
              support@cascaisfishing.com
            </p>
          </div>
        </div>
      `;

      const result = await this.sendEmail({
        to: userEmail,
        subject,
        html
      });

      console.log(`üìß Welcome email sent: ${userEmail}`);
      return result;

    } catch (error) {
      console.error('Error sending welcome email:', error);
      return false;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const emailService = new EmailService();
